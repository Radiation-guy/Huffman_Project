
TP_C_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080018bc  080018bc  000028bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a00  08001a00  0000306c  2**0
                  CONTENTS
  4 .ARM          00000008  08001a00  08001a00  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a08  08001a08  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a08  08001a08  00002a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a0c  08001a0c  00002a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08001a10  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000970  2000006c  08001a7c  0000306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  08001a7c  000039dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a14  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c56  00000000  00000000  00005ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  00006708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c0  00000000  00000000  000069a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afaa  00000000  00000000  00006b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000404d  00000000  00000000  00021b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f86  00000000  00000000  00025b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6add  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fac  00000000  00000000  000b6b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000b7acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080018a4 	.word	0x080018a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080018a4 	.word	0x080018a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <CreerFeuille>:
#include <stdint.h>
#include "Arbre.h"
#include <stdlib.h>

void CreerFeuille(struct noeud * arbre[256], uint32_t tab[256]){
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	uint32_t j=0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = 0; i<255;i++ ){
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
 80002c2:	e028      	b.n	8000316 <CreerFeuille+0x66>
		if (tab[i] != 0){
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	4413      	add	r3, r2
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d01e      	beq.n	8000310 <CreerFeuille+0x60>
			  arbre[j] = malloc(sizeof(struct noeud));
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	18d4      	adds	r4, r2, r3
 80002da:	2018      	movs	r0, #24
 80002dc:	f000 fb4c 	bl	8000978 <malloc>
 80002e0:	4603      	mov	r3, r0
 80002e2:	6023      	str	r3, [r4, #0]
			  arbre[j]->occurence = tab[i];
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	683a      	ldr	r2, [r7, #0]
 80002ea:	441a      	add	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	6879      	ldr	r1, [r7, #4]
 80002f2:	440b      	add	r3, r1
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	6812      	ldr	r2, [r2, #0]
 80002f8:	605a      	str	r2, [r3, #4]
			  arbre[j]->c = (char)i;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	4413      	add	r3, r2
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	68ba      	ldr	r2, [r7, #8]
 8000306:	b2d2      	uxtb	r2, r2
 8000308:	701a      	strb	r2, [r3, #0]
			  j++;
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	3301      	adds	r3, #1
 800030e:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = 0; i<255;i++ ){
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	3301      	adds	r3, #1
 8000314:	60bb      	str	r3, [r7, #8]
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	2bfe      	cmp	r3, #254	@ 0xfe
 800031a:	d9d3      	bls.n	80002c4 <CreerFeuille+0x14>
		}
	}
}
 800031c:	bf00      	nop
 800031e:	bf00      	nop
 8000320:	3714      	adds	r7, #20
 8000322:	46bd      	mov	sp, r7
 8000324:	bd90      	pop	{r4, r7, pc}

08000326 <triArbre>:
	printf("	\r\n");
	printf("	\r\n");
	printf("	\r\n");
}

void triArbre(struct noeud* arbre[256], uint32_t taille){
 8000326:	b480      	push	{r7}
 8000328:	b087      	sub	sp, #28
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
 800032e:	6039      	str	r1, [r7, #0]
	uint8_t tri = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	75fb      	strb	r3, [r7, #23]
	while(tri==0){
 8000334:	e035      	b.n	80003a2 <triArbre+0x7c>
		tri = 1;
 8000336:	2301      	movs	r3, #1
 8000338:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0; i<taille-1;i++ ){
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
 800033e:	e02b      	b.n	8000398 <triArbre+0x72>
			if (arbre[i]->occurence > arbre[i+1]->occurence){
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	4413      	add	r3, r2
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	685a      	ldr	r2, [r3, #4]
 800034c:	693b      	ldr	r3, [r7, #16]
 800034e:	3301      	adds	r3, #1
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	6879      	ldr	r1, [r7, #4]
 8000354:	440b      	add	r3, r1
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	429a      	cmp	r2, r3
 800035c:	d919      	bls.n	8000392 <triArbre+0x6c>
				struct noeud * temp;
				temp = arbre[i+1];
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	3301      	adds	r3, #1
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	60fb      	str	r3, [r7, #12]
				arbre[i+1] = arbre[i];
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	441a      	add	r2, r3
 8000374:	693b      	ldr	r3, [r7, #16]
 8000376:	3301      	adds	r3, #1
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	440b      	add	r3, r1
 800037e:	6812      	ldr	r2, [r2, #0]
 8000380:	601a      	str	r2, [r3, #0]
				arbre[i] = temp;
 8000382:	693b      	ldr	r3, [r7, #16]
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	68fa      	ldr	r2, [r7, #12]
 800038c:	601a      	str	r2, [r3, #0]
				tri = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0; i<taille-1;i++ ){
 8000392:	693b      	ldr	r3, [r7, #16]
 8000394:	3301      	adds	r3, #1
 8000396:	613b      	str	r3, [r7, #16]
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	3b01      	subs	r3, #1
 800039c:	693a      	ldr	r2, [r7, #16]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d3ce      	bcc.n	8000340 <triArbre+0x1a>
	while(tri==0){
 80003a2:	7dfb      	ldrb	r3, [r7, #23]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d0c6      	beq.n	8000336 <triArbre+0x10>
			}
		}
	}
}
 80003a8:	bf00      	nop
 80003aa:	bf00      	nop
 80003ac:	371c      	adds	r7, #28
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <FaireNoeud>:
		}
	}
}


void FaireNoeud(struct noeud* arbre[256], uint32_t taille){
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b084      	sub	sp, #16
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
 80003be:	6039      	str	r1, [r7, #0]
	struct noeud * temp;
	temp = malloc(sizeof(struct noeud));
 80003c0:	2018      	movs	r0, #24
 80003c2:	f000 fad9 	bl	8000978 <malloc>
 80003c6:	4603      	mov	r3, r0
 80003c8:	60bb      	str	r3, [r7, #8]
	temp->c = '!';
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	2221      	movs	r2, #33	@ 0x21
 80003ce:	701a      	strb	r2, [r3, #0]
	temp->occurence = arbre[0]->occurence + arbre[1]->occurence;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	685a      	ldr	r2, [r3, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3304      	adds	r3, #4
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	441a      	add	r2, r3
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	605a      	str	r2, [r3, #4]
	temp->code = 0;
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
	temp->tailleCode = 0;
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	2200      	movs	r2, #0
 80003ee:	60da      	str	r2, [r3, #12]
	temp->gauche = arbre[0];
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	611a      	str	r2, [r3, #16]
	temp->droite = arbre[1];
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	685a      	ldr	r2, [r3, #4]
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	615a      	str	r2, [r3, #20]
	arbre[0] = temp;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	68ba      	ldr	r2, [r7, #8]
 8000404:	601a      	str	r2, [r3, #0]
	for (int index = 1; index < taille-1 ; index++) {
 8000406:	2301      	movs	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	e00d      	b.n	8000428 <FaireNoeud+0x72>
		arbre[index]=arbre[index+1];
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	3301      	adds	r3, #1
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	441a      	add	r2, r3
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	6879      	ldr	r1, [r7, #4]
 800041c:	440b      	add	r3, r1
 800041e:	6812      	ldr	r2, [r2, #0]
 8000420:	601a      	str	r2, [r3, #0]
	for (int index = 1; index < taille-1 ; index++) {
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	3301      	adds	r3, #1
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	1e5a      	subs	r2, r3, #1
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	429a      	cmp	r2, r3
 8000430:	d8ec      	bhi.n	800040c <FaireNoeud+0x56>
	}
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <parcourirArbre>:

void parcourirArbre(struct noeud* ptrNoeud){
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	if(ptrNoeud ->droite==NULL && ptrNoeud ->gauche==NULL){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d110      	bne.n	800046e <parcourirArbre+0x32>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	691b      	ldr	r3, [r3, #16]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d10c      	bne.n	800046e <parcourirArbre+0x32>
		printf("Je suis une feuille\r\n");
 8000454:	480f      	ldr	r0, [pc, #60]	@ (8000494 <parcourirArbre+0x58>)
 8000456:	f000 fc6f 	bl	8000d38 <puts>
		printf("Mon code est : %d \r\n",ptrNoeud->code);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	4619      	mov	r1, r3
 8000460:	480d      	ldr	r0, [pc, #52]	@ (8000498 <parcourirArbre+0x5c>)
 8000462:	f000 fc01 	bl	8000c68 <iprintf>
		printf("--------------------------\r\n");
 8000466:	480d      	ldr	r0, [pc, #52]	@ (800049c <parcourirArbre+0x60>)
 8000468:	f000 fc66 	bl	8000d38 <puts>
	if(ptrNoeud ->droite==NULL && ptrNoeud ->gauche==NULL){
 800046c:	e00d      	b.n	800048a <parcourirArbre+0x4e>
	}
	else{
		printf("Je suis un nœud\r\n");
 800046e:	480c      	ldr	r0, [pc, #48]	@ (80004a0 <parcourirArbre+0x64>)
 8000470:	f000 fc62 	bl	8000d38 <puts>
		parcourirArbre(ptrNoeud ->droite); // On va a droite
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ffdf 	bl	800043c <parcourirArbre>
		parcourirArbre(ptrNoeud ->gauche); // On va a gauche
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	691b      	ldr	r3, [r3, #16]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ffda 	bl	800043c <parcourirArbre>
	}
}
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	0800194c 	.word	0x0800194c
 8000498:	08001964 	.word	0x08001964
 800049c:	0800197c 	.word	0x0800197c
 80004a0:	08001998 	.word	0x08001998

080004a4 <creerCode>:

void creerCode(struct noeud* ptrNoeud,uint32_t code,uint32_t taille){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
	if(ptrNoeud ->droite==NULL && ptrNoeud ->gauche==NULL){
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d114      	bne.n	80004e2 <creerCode+0x3e>
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	691b      	ldr	r3, [r3, #16]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d110      	bne.n	80004e2 <creerCode+0x3e>
			ptrNoeud ->tailleCode=taille;
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	60da      	str	r2, [r3, #12]
			ptrNoeud ->code=code;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	68ba      	ldr	r2, [r7, #8]
 80004ca:	609a      	str	r2, [r3, #8]
			printf("%c \t code : %d \t taille :%d \r\n", ptrNoeud ->c, ptrNoeud->code, ptrNoeud->tailleCode);
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4619      	mov	r1, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	689a      	ldr	r2, [r3, #8]
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	480e      	ldr	r0, [pc, #56]	@ (8000514 <creerCode+0x70>)
 80004dc:	f000 fbc4 	bl	8000c68 <iprintf>
	if(ptrNoeud ->droite==NULL && ptrNoeud ->gauche==NULL){
 80004e0:	e013      	b.n	800050a <creerCode+0x66>
		}
		else{
			//On va a droite (on injecte un 0 à droite dans le code)
			creerCode(ptrNoeud ->droite,code<<1,taille+1);
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	6958      	ldr	r0, [r3, #20]
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	0059      	lsls	r1, r3, #1
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3301      	adds	r3, #1
 80004ee:	461a      	mov	r2, r3
 80004f0:	f7ff ffd8 	bl	80004a4 <creerCode>
			// On va a gauche (On injecte un 1 à droite)
			creerCode(ptrNoeud ->gauche,(code<<1)+1,taille+1);
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	6918      	ldr	r0, [r3, #16]
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	1c59      	adds	r1, r3, #1
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	3301      	adds	r3, #1
 8000502:	461a      	mov	r2, r3
 8000504:	f7ff ffce 	bl	80004a4 <creerCode>
		}
}
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	080019ac 	.word	0x080019ac

08000518 <GPIO_Init>:
#include <stdint.h>
#include <stm32f446xx.h>
#include "main.h"
#include "gpio.h"

void GPIO_Init(void){
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 800051c:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <GPIO_Init+0x30>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000520:	4a09      	ldr	r2, [pc, #36]	@ (8000548 <GPIO_Init+0x30>)
 8000522:	f043 0305 	orr.w	r3, r3, #5
 8000526:	6313      	str	r3, [r2, #48]	@ 0x30

	/* GPIO Init */
	GPIOA->MODER |= OUTPUT_MODE <<10;		// PA5 Output LED
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <GPIO_Init+0x34>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a07      	ldr	r2, [pc, #28]	@ (800054c <GPIO_Init+0x34>)
 800052e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000532:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= INPUT_MODE	<< 26;		// PC13 Input Push-Button
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <GPIO_Init+0x38>)
 8000536:	4a06      	ldr	r2, [pc, #24]	@ (8000550 <GPIO_Init+0x38>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6013      	str	r3, [r2, #0]
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023800 	.word	0x40023800
 800054c:	40020000 	.word	0x40020000
 8000550:	40020800 	.word	0x40020800

08000554 <SysTick_Handler>:
#include "interrupt.h"

extern uint32_t ticks;

// Interrupt Handler for SysTick Interrupt
void SysTick_Handler(void){
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
	ticks++;
 8000558:	4b04      	ldr	r3, [pc, #16]	@ (800056c <SysTick_Handler+0x18>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a03      	ldr	r2, [pc, #12]	@ (800056c <SysTick_Handler+0x18>)
 8000560:	6013      	str	r3, [r2, #0]
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	2000088c 	.word	0x2000088c

08000570 <main>:
struct noeud* arbreHuffman[256];

uint32_t tabCaractere[256];

int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	GPIO_Init();
 8000576:	f7ff ffcf 	bl	8000518 <GPIO_Init>
	USART2_Init();
 800057a:	f000 f957 	bl	800082c <USART2_Init>
	SYSTICK_Init();
 800057e:	f000 f943 	bl	8000808 <SYSTICK_Init>
	occurance(texte, tabCaractere);
 8000582:	4918      	ldr	r1, [pc, #96]	@ (80005e4 <main+0x74>)
 8000584:	4818      	ldr	r0, [pc, #96]	@ (80005e8 <main+0x78>)
 8000586:	f000 f833 	bl	80005f0 <occurance>
	CreerFeuille(arbreHuffman, tabCaractere);
 800058a:	4916      	ldr	r1, [pc, #88]	@ (80005e4 <main+0x74>)
 800058c:	4817      	ldr	r0, [pc, #92]	@ (80005ec <main+0x7c>)
 800058e:	f7ff fe8f 	bl	80002b0 <CreerFeuille>
	uint8_t taillearbre = 4;
 8000592:	2304      	movs	r3, #4
 8000594:	71fb      	strb	r3, [r7, #7]

	while(taillearbre !=1)
 8000596:	e00c      	b.n	80005b2 <main+0x42>
	{
		triArbre(arbreHuffman, taillearbre);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	4619      	mov	r1, r3
 800059c:	4813      	ldr	r0, [pc, #76]	@ (80005ec <main+0x7c>)
 800059e:	f7ff fec2 	bl	8000326 <triArbre>
		FaireNoeud(arbreHuffman, taillearbre);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4619      	mov	r1, r3
 80005a6:	4811      	ldr	r0, [pc, #68]	@ (80005ec <main+0x7c>)
 80005a8:	f7ff ff05 	bl	80003b6 <FaireNoeud>
		//triArbreHelene(arbreHuffman, taillearbre);
		taillearbre--;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	3b01      	subs	r3, #1
 80005b0:	71fb      	strb	r3, [r7, #7]
	while(taillearbre !=1)
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d1ef      	bne.n	8000598 <main+0x28>
	}
	parcourirArbre(arbreHuffman[0]);
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <main+0x7c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff3d 	bl	800043c <parcourirArbre>
	creerCode(arbreHuffman[0], 0,1);
 80005c2:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <main+0x7c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2201      	movs	r2, #1
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ff6a 	bl	80004a4 <creerCode>
	parcourirArbre(arbreHuffman[0]);
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <main+0x7c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ff31 	bl	800043c <parcourirArbre>
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000088 	.word	0x20000088
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000488 	.word	0x20000488

080005f0 <occurance>:
#include "occurence.h"
#include <stdint.h>

void occurance (uint8_t* chaine, uint32_t tab[256]){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
	while((*chaine) != ('\0')){
 80005fa:	e00a      	b.n	8000612 <occurance+0x22>
		tab[*chaine] ++;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	4413      	add	r3, r2
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	3201      	adds	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
		chaine ++;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3301      	adds	r3, #1
 8000610:	607b      	str	r3, [r7, #4]
	while((*chaine) != ('\0')){
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f0      	bne.n	80005fc <occurance+0xc>
	}
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	e00a      	b.n	8000650 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800063a:	f000 f96b 	bl	8000914 <__io_getchar>
 800063e:	4601      	mov	r1, r0
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	60ba      	str	r2, [r7, #8]
 8000646:	b2ca      	uxtb	r2, r1
 8000648:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	3301      	adds	r3, #1
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	dbf0      	blt.n	800063a <_read+0x12>
	}

return len;
 8000658:	687b      	ldr	r3, [r7, #4]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b086      	sub	sp, #24
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e009      	b.n	8000688 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	60ba      	str	r2, [r7, #8]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f000 f93b 	bl	80008f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	3301      	adds	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	429a      	cmp	r2, r3
 800068e:	dbf1      	blt.n	8000674 <_write+0x12>
	}
	return len;
 8000690:	687b      	ldr	r3, [r7, #4]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_close>:

int _close(int file)
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
	return -1;
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006b2:	b480      	push	{r7}
 80006b4:	b083      	sub	sp, #12
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006c2:	605a      	str	r2, [r3, #4]
	return 0;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_isatty>:

int _isatty(int file)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
	return 1;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
	return 0;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800070c:	4a14      	ldr	r2, [pc, #80]	@ (8000760 <_sbrk+0x5c>)
 800070e:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <_sbrk+0x60>)
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d102      	bne.n	8000726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <_sbrk+0x64>)
 8000722:	4a12      	ldr	r2, [pc, #72]	@ (800076c <_sbrk+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000726:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <_sbrk+0x64>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	429a      	cmp	r2, r3
 8000732:	d207      	bcs.n	8000744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000734:	f000 fc3e 	bl	8000fb4 <__errno>
 8000738:	4603      	mov	r3, r0
 800073a:	220c      	movs	r2, #12
 800073c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	e009      	b.n	8000758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000744:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <_sbrk+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800074a:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <_sbrk+0x64>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <_sbrk+0x64>)
 8000754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000756:	68fb      	ldr	r3, [r7, #12]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20020000 	.word	0x20020000
 8000764:	00000400 	.word	0x00000400
 8000768:	20000888 	.word	0x20000888
 800076c:	200009e0 	.word	0x200009e0

08000770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	db0a      	blt.n	800079a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	490c      	ldr	r1, [pc, #48]	@ (80007bc <__NVIC_SetPriority+0x4c>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	0112      	lsls	r2, r2, #4
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	440b      	add	r3, r1
 8000794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000798:	e00a      	b.n	80007b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4908      	ldr	r1, [pc, #32]	@ (80007c0 <__NVIC_SetPriority+0x50>)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	3b04      	subs	r3, #4
 80007a8:	0112      	lsls	r2, r2, #4
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	440b      	add	r3, r1
 80007ae:	761a      	strb	r2, [r3, #24]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000e100 	.word	0xe000e100
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007d4:	d301      	bcc.n	80007da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00f      	b.n	80007fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007da:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <SysTick_Config+0x40>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e2:	210f      	movs	r1, #15
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f7ff ffc2 	bl	8000770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ec:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <SysTick_Config+0x40>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f2:	4b04      	ldr	r3, [pc, #16]	@ (8000804 <SysTick_Config+0x40>)
 80007f4:	2207      	movs	r2, #7
 80007f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	e000e010 	.word	0xe000e010

08000808 <SYSTICK_Init>:

//////////////////////////////////////////////
////////////// SYSTICK TIMER /////////////////
//////////////////////////////////////////////

void SYSTICK_Init(void){
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <SYSTICK_Init+0x1c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a05      	ldr	r2, [pc, #20]	@ (8000828 <SYSTICK_Init+0x20>)
 8000812:	fba2 2303 	umull	r2, r3, r2, r3
 8000816:	099b      	lsrs	r3, r3, #6
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ffd3 	bl	80007c4 <SysTick_Config>
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000000c 	.word	0x2000000c
 8000828:	10624dd3 	.word	0x10624dd3

0800082c <USART2_Init>:
#include <stm32f446xx.h>
#include "main.h"
#include "usart.h"


void USART2_Init(void){
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;			// ABP1
 8000830:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <USART2_Init+0x68>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <USART2_Init+0x68>)
 8000836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800083a:	6413      	str	r3, [r2, #64]	@ 0x40
	USART2->CR1 |= USART_CR1_UE;
 800083c:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <USART2_Init+0x6c>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	4a15      	ldr	r2, [pc, #84]	@ (8000898 <USART2_Init+0x6c>)
 8000842:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000846:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <USART2_Init+0x70>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a13      	ldr	r2, [pc, #76]	@ (800089c <USART2_Init+0x70>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 8000854:	4b11      	ldr	r3, [pc, #68]	@ (800089c <USART2_Init+0x70>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a10      	ldr	r2, [pc, #64]	@ (800089c <USART2_Init+0x70>)
 800085a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <USART2_Init+0x70>)
 8000862:	6a1b      	ldr	r3, [r3, #32]
 8000864:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <USART2_Init+0x70>)
 8000866:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800086a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 800086c:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <USART2_Init+0x70>)
 800086e:	6a1b      	ldr	r3, [r3, #32]
 8000870:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <USART2_Init+0x70>)
 8000872:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000876:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <USART2_Init+0x6c>)
 800087a:	228b      	movs	r2, #139	@ 0x8b
 800087c:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <USART2_Init+0x6c>)
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <USART2_Init+0x6c>)
 8000884:	f043 030c 	orr.w	r3, r3, #12
 8000888:	60d3      	str	r3, [r2, #12]
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	40023800 	.word	0x40023800
 8000898:	40004400 	.word	0x40004400
 800089c:	40020000 	.word	0x40020000

080008a0 <USART2_TransmitChar>:


void USART2_TransmitChar(uint8_t data){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
	USART2->DR = data;
 80008aa:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <USART2_TransmitChar+0x2c>)
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	6053      	str	r3, [r2, #4]
	while( (USART2->SR & USART_SR_TXE)==0 );
 80008b0:	bf00      	nop
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <USART2_TransmitChar+0x2c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0f9      	beq.n	80008b2 <USART2_TransmitChar+0x12>
}
 80008be:	bf00      	nop
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	40004400 	.word	0x40004400

080008d0 <USART2_ReceiveChar>:


uint8_t USART2_ReceiveChar(void){
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
	while( (USART2->SR & USART_SR_RXNE)==0 );
 80008d4:	bf00      	nop
 80008d6:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <USART2_ReceiveChar+0x24>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f003 0320 	and.w	r3, r3, #32
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f9      	beq.n	80008d6 <USART2_ReceiveChar+0x6>
	return USART2->DR;
 80008e2:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <USART2_ReceiveChar+0x24>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	b2db      	uxtb	r3, r3

}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40004400 	.word	0x40004400

080008f8 <__io_putchar>:
#include "util.h"
#include "usart.h"


/* Send on USART2 PA2*/
int __io_putchar(int ch){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	USART2_TransmitChar(ch);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ffcb 	bl	80008a0 <USART2_TransmitChar>
	return 0;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <__io_getchar>:

/* Receive on USART2 PA3 */
int __io_getchar(void){
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	return USART2_ReceiveChar();
 8000918:	f7ff ffda 	bl	80008d0 <USART2_ReceiveChar>
 800091c:	4603      	mov	r3, r0
}
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000924:	480d      	ldr	r0, [pc, #52]	@ (800095c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000926:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000928:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	@ (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	@ (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000952:	f000 fb35 	bl	8000fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000956:	f7ff fe0b 	bl	8000570 <main>

0800095a <LoopForever>:

LoopForever:
  b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   r0, =_estack
 800095c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000968:	08001a10 	.word	0x08001a10
  ldr r2, =_sbss
 800096c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000970:	200009dc 	.word	0x200009dc

08000974 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC_IRQHandler>
	...

08000978 <malloc>:
 8000978:	4b02      	ldr	r3, [pc, #8]	@ (8000984 <malloc+0xc>)
 800097a:	4601      	mov	r1, r0
 800097c:	6818      	ldr	r0, [r3, #0]
 800097e:	f000 b825 	b.w	80009cc <_malloc_r>
 8000982:	bf00      	nop
 8000984:	2000001c 	.word	0x2000001c

08000988 <sbrk_aligned>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	4e0f      	ldr	r6, [pc, #60]	@ (80009c8 <sbrk_aligned+0x40>)
 800098c:	460c      	mov	r4, r1
 800098e:	6831      	ldr	r1, [r6, #0]
 8000990:	4605      	mov	r5, r0
 8000992:	b911      	cbnz	r1, 800099a <sbrk_aligned+0x12>
 8000994:	f000 faec 	bl	8000f70 <_sbrk_r>
 8000998:	6030      	str	r0, [r6, #0]
 800099a:	4621      	mov	r1, r4
 800099c:	4628      	mov	r0, r5
 800099e:	f000 fae7 	bl	8000f70 <_sbrk_r>
 80009a2:	1c43      	adds	r3, r0, #1
 80009a4:	d103      	bne.n	80009ae <sbrk_aligned+0x26>
 80009a6:	f04f 34ff 	mov.w	r4, #4294967295
 80009aa:	4620      	mov	r0, r4
 80009ac:	bd70      	pop	{r4, r5, r6, pc}
 80009ae:	1cc4      	adds	r4, r0, #3
 80009b0:	f024 0403 	bic.w	r4, r4, #3
 80009b4:	42a0      	cmp	r0, r4
 80009b6:	d0f8      	beq.n	80009aa <sbrk_aligned+0x22>
 80009b8:	1a21      	subs	r1, r4, r0
 80009ba:	4628      	mov	r0, r5
 80009bc:	f000 fad8 	bl	8000f70 <_sbrk_r>
 80009c0:	3001      	adds	r0, #1
 80009c2:	d1f2      	bne.n	80009aa <sbrk_aligned+0x22>
 80009c4:	e7ef      	b.n	80009a6 <sbrk_aligned+0x1e>
 80009c6:	bf00      	nop
 80009c8:	20000890 	.word	0x20000890

080009cc <_malloc_r>:
 80009cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009d0:	1ccd      	adds	r5, r1, #3
 80009d2:	f025 0503 	bic.w	r5, r5, #3
 80009d6:	3508      	adds	r5, #8
 80009d8:	2d0c      	cmp	r5, #12
 80009da:	bf38      	it	cc
 80009dc:	250c      	movcc	r5, #12
 80009de:	2d00      	cmp	r5, #0
 80009e0:	4606      	mov	r6, r0
 80009e2:	db01      	blt.n	80009e8 <_malloc_r+0x1c>
 80009e4:	42a9      	cmp	r1, r5
 80009e6:	d904      	bls.n	80009f2 <_malloc_r+0x26>
 80009e8:	230c      	movs	r3, #12
 80009ea:	6033      	str	r3, [r6, #0]
 80009ec:	2000      	movs	r0, #0
 80009ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ac8 <_malloc_r+0xfc>
 80009f6:	f000 f869 	bl	8000acc <__malloc_lock>
 80009fa:	f8d8 3000 	ldr.w	r3, [r8]
 80009fe:	461c      	mov	r4, r3
 8000a00:	bb44      	cbnz	r4, 8000a54 <_malloc_r+0x88>
 8000a02:	4629      	mov	r1, r5
 8000a04:	4630      	mov	r0, r6
 8000a06:	f7ff ffbf 	bl	8000988 <sbrk_aligned>
 8000a0a:	1c43      	adds	r3, r0, #1
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	d158      	bne.n	8000ac2 <_malloc_r+0xf6>
 8000a10:	f8d8 4000 	ldr.w	r4, [r8]
 8000a14:	4627      	mov	r7, r4
 8000a16:	2f00      	cmp	r7, #0
 8000a18:	d143      	bne.n	8000aa2 <_malloc_r+0xd6>
 8000a1a:	2c00      	cmp	r4, #0
 8000a1c:	d04b      	beq.n	8000ab6 <_malloc_r+0xea>
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	4639      	mov	r1, r7
 8000a22:	4630      	mov	r0, r6
 8000a24:	eb04 0903 	add.w	r9, r4, r3
 8000a28:	f000 faa2 	bl	8000f70 <_sbrk_r>
 8000a2c:	4581      	cmp	r9, r0
 8000a2e:	d142      	bne.n	8000ab6 <_malloc_r+0xea>
 8000a30:	6821      	ldr	r1, [r4, #0]
 8000a32:	1a6d      	subs	r5, r5, r1
 8000a34:	4629      	mov	r1, r5
 8000a36:	4630      	mov	r0, r6
 8000a38:	f7ff ffa6 	bl	8000988 <sbrk_aligned>
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	d03a      	beq.n	8000ab6 <_malloc_r+0xea>
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	442b      	add	r3, r5
 8000a44:	6023      	str	r3, [r4, #0]
 8000a46:	f8d8 3000 	ldr.w	r3, [r8]
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	bb62      	cbnz	r2, 8000aa8 <_malloc_r+0xdc>
 8000a4e:	f8c8 7000 	str.w	r7, [r8]
 8000a52:	e00f      	b.n	8000a74 <_malloc_r+0xa8>
 8000a54:	6822      	ldr	r2, [r4, #0]
 8000a56:	1b52      	subs	r2, r2, r5
 8000a58:	d420      	bmi.n	8000a9c <_malloc_r+0xd0>
 8000a5a:	2a0b      	cmp	r2, #11
 8000a5c:	d917      	bls.n	8000a8e <_malloc_r+0xc2>
 8000a5e:	1961      	adds	r1, r4, r5
 8000a60:	42a3      	cmp	r3, r4
 8000a62:	6025      	str	r5, [r4, #0]
 8000a64:	bf18      	it	ne
 8000a66:	6059      	strne	r1, [r3, #4]
 8000a68:	6863      	ldr	r3, [r4, #4]
 8000a6a:	bf08      	it	eq
 8000a6c:	f8c8 1000 	streq.w	r1, [r8]
 8000a70:	5162      	str	r2, [r4, r5]
 8000a72:	604b      	str	r3, [r1, #4]
 8000a74:	4630      	mov	r0, r6
 8000a76:	f000 f82f 	bl	8000ad8 <__malloc_unlock>
 8000a7a:	f104 000b 	add.w	r0, r4, #11
 8000a7e:	1d23      	adds	r3, r4, #4
 8000a80:	f020 0007 	bic.w	r0, r0, #7
 8000a84:	1ac2      	subs	r2, r0, r3
 8000a86:	bf1c      	itt	ne
 8000a88:	1a1b      	subne	r3, r3, r0
 8000a8a:	50a3      	strne	r3, [r4, r2]
 8000a8c:	e7af      	b.n	80009ee <_malloc_r+0x22>
 8000a8e:	6862      	ldr	r2, [r4, #4]
 8000a90:	42a3      	cmp	r3, r4
 8000a92:	bf0c      	ite	eq
 8000a94:	f8c8 2000 	streq.w	r2, [r8]
 8000a98:	605a      	strne	r2, [r3, #4]
 8000a9a:	e7eb      	b.n	8000a74 <_malloc_r+0xa8>
 8000a9c:	4623      	mov	r3, r4
 8000a9e:	6864      	ldr	r4, [r4, #4]
 8000aa0:	e7ae      	b.n	8000a00 <_malloc_r+0x34>
 8000aa2:	463c      	mov	r4, r7
 8000aa4:	687f      	ldr	r7, [r7, #4]
 8000aa6:	e7b6      	b.n	8000a16 <_malloc_r+0x4a>
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	42a3      	cmp	r3, r4
 8000aae:	d1fb      	bne.n	8000aa8 <_malloc_r+0xdc>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	6053      	str	r3, [r2, #4]
 8000ab4:	e7de      	b.n	8000a74 <_malloc_r+0xa8>
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	6033      	str	r3, [r6, #0]
 8000aba:	4630      	mov	r0, r6
 8000abc:	f000 f80c 	bl	8000ad8 <__malloc_unlock>
 8000ac0:	e794      	b.n	80009ec <_malloc_r+0x20>
 8000ac2:	6005      	str	r5, [r0, #0]
 8000ac4:	e7d6      	b.n	8000a74 <_malloc_r+0xa8>
 8000ac6:	bf00      	nop
 8000ac8:	20000894 	.word	0x20000894

08000acc <__malloc_lock>:
 8000acc:	4801      	ldr	r0, [pc, #4]	@ (8000ad4 <__malloc_lock+0x8>)
 8000ace:	f000 ba9c 	b.w	800100a <__retarget_lock_acquire_recursive>
 8000ad2:	bf00      	nop
 8000ad4:	200009d8 	.word	0x200009d8

08000ad8 <__malloc_unlock>:
 8000ad8:	4801      	ldr	r0, [pc, #4]	@ (8000ae0 <__malloc_unlock+0x8>)
 8000ada:	f000 ba97 	b.w	800100c <__retarget_lock_release_recursive>
 8000ade:	bf00      	nop
 8000ae0:	200009d8 	.word	0x200009d8

08000ae4 <std>:
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	b510      	push	{r4, lr}
 8000ae8:	4604      	mov	r4, r0
 8000aea:	e9c0 3300 	strd	r3, r3, [r0]
 8000aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000af2:	6083      	str	r3, [r0, #8]
 8000af4:	8181      	strh	r1, [r0, #12]
 8000af6:	6643      	str	r3, [r0, #100]	@ 0x64
 8000af8:	81c2      	strh	r2, [r0, #14]
 8000afa:	6183      	str	r3, [r0, #24]
 8000afc:	4619      	mov	r1, r3
 8000afe:	2208      	movs	r2, #8
 8000b00:	305c      	adds	r0, #92	@ 0x5c
 8000b02:	f000 f9f9 	bl	8000ef8 <memset>
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <std+0x58>)
 8000b08:	6263      	str	r3, [r4, #36]	@ 0x24
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <std+0x5c>)
 8000b0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <std+0x60>)
 8000b10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <std+0x64>)
 8000b14:	6323      	str	r3, [r4, #48]	@ 0x30
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <std+0x68>)
 8000b18:	6224      	str	r4, [r4, #32]
 8000b1a:	429c      	cmp	r4, r3
 8000b1c:	d006      	beq.n	8000b2c <std+0x48>
 8000b1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000b22:	4294      	cmp	r4, r2
 8000b24:	d002      	beq.n	8000b2c <std+0x48>
 8000b26:	33d0      	adds	r3, #208	@ 0xd0
 8000b28:	429c      	cmp	r4, r3
 8000b2a:	d105      	bne.n	8000b38 <std+0x54>
 8000b2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b34:	f000 ba68 	b.w	8001008 <__retarget_lock_init_recursive>
 8000b38:	bd10      	pop	{r4, pc}
 8000b3a:	bf00      	nop
 8000b3c:	08000d49 	.word	0x08000d49
 8000b40:	08000d6b 	.word	0x08000d6b
 8000b44:	08000da3 	.word	0x08000da3
 8000b48:	08000dc7 	.word	0x08000dc7
 8000b4c:	20000898 	.word	0x20000898

08000b50 <stdio_exit_handler>:
 8000b50:	4a02      	ldr	r2, [pc, #8]	@ (8000b5c <stdio_exit_handler+0xc>)
 8000b52:	4903      	ldr	r1, [pc, #12]	@ (8000b60 <stdio_exit_handler+0x10>)
 8000b54:	4803      	ldr	r0, [pc, #12]	@ (8000b64 <stdio_exit_handler+0x14>)
 8000b56:	f000 b869 	b.w	8000c2c <_fwalk_sglue>
 8000b5a:	bf00      	nop
 8000b5c:	20000010 	.word	0x20000010
 8000b60:	0800174d 	.word	0x0800174d
 8000b64:	20000020 	.word	0x20000020

08000b68 <cleanup_stdio>:
 8000b68:	6841      	ldr	r1, [r0, #4]
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <cleanup_stdio+0x34>)
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	b510      	push	{r4, lr}
 8000b70:	4604      	mov	r4, r0
 8000b72:	d001      	beq.n	8000b78 <cleanup_stdio+0x10>
 8000b74:	f000 fdea 	bl	800174c <_fflush_r>
 8000b78:	68a1      	ldr	r1, [r4, #8]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <cleanup_stdio+0x38>)
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d002      	beq.n	8000b86 <cleanup_stdio+0x1e>
 8000b80:	4620      	mov	r0, r4
 8000b82:	f000 fde3 	bl	800174c <_fflush_r>
 8000b86:	68e1      	ldr	r1, [r4, #12]
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <cleanup_stdio+0x3c>)
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	d004      	beq.n	8000b98 <cleanup_stdio+0x30>
 8000b8e:	4620      	mov	r0, r4
 8000b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b94:	f000 bdda 	b.w	800174c <_fflush_r>
 8000b98:	bd10      	pop	{r4, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000898 	.word	0x20000898
 8000ba0:	20000900 	.word	0x20000900
 8000ba4:	20000968 	.word	0x20000968

08000ba8 <global_stdio_init.part.0>:
 8000ba8:	b510      	push	{r4, lr}
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <global_stdio_init.part.0+0x30>)
 8000bac:	4c0b      	ldr	r4, [pc, #44]	@ (8000bdc <global_stdio_init.part.0+0x34>)
 8000bae:	4a0c      	ldr	r2, [pc, #48]	@ (8000be0 <global_stdio_init.part.0+0x38>)
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	f7ff ff94 	bl	8000ae4 <std>
 8000bbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2109      	movs	r1, #9
 8000bc4:	f7ff ff8e 	bl	8000ae4 <std>
 8000bc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000bcc:	2202      	movs	r2, #2
 8000bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bd2:	2112      	movs	r1, #18
 8000bd4:	f7ff bf86 	b.w	8000ae4 <std>
 8000bd8:	200009d0 	.word	0x200009d0
 8000bdc:	20000898 	.word	0x20000898
 8000be0:	08000b51 	.word	0x08000b51

08000be4 <__sfp_lock_acquire>:
 8000be4:	4801      	ldr	r0, [pc, #4]	@ (8000bec <__sfp_lock_acquire+0x8>)
 8000be6:	f000 ba10 	b.w	800100a <__retarget_lock_acquire_recursive>
 8000bea:	bf00      	nop
 8000bec:	200009d9 	.word	0x200009d9

08000bf0 <__sfp_lock_release>:
 8000bf0:	4801      	ldr	r0, [pc, #4]	@ (8000bf8 <__sfp_lock_release+0x8>)
 8000bf2:	f000 ba0b 	b.w	800100c <__retarget_lock_release_recursive>
 8000bf6:	bf00      	nop
 8000bf8:	200009d9 	.word	0x200009d9

08000bfc <__sinit>:
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	4604      	mov	r4, r0
 8000c00:	f7ff fff0 	bl	8000be4 <__sfp_lock_acquire>
 8000c04:	6a23      	ldr	r3, [r4, #32]
 8000c06:	b11b      	cbz	r3, 8000c10 <__sinit+0x14>
 8000c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c0c:	f7ff bff0 	b.w	8000bf0 <__sfp_lock_release>
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <__sinit+0x28>)
 8000c12:	6223      	str	r3, [r4, #32]
 8000c14:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <__sinit+0x2c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d1f5      	bne.n	8000c08 <__sinit+0xc>
 8000c1c:	f7ff ffc4 	bl	8000ba8 <global_stdio_init.part.0>
 8000c20:	e7f2      	b.n	8000c08 <__sinit+0xc>
 8000c22:	bf00      	nop
 8000c24:	08000b69 	.word	0x08000b69
 8000c28:	200009d0 	.word	0x200009d0

08000c2c <_fwalk_sglue>:
 8000c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c30:	4607      	mov	r7, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	4614      	mov	r4, r2
 8000c36:	2600      	movs	r6, #0
 8000c38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c3c:	f1b9 0901 	subs.w	r9, r9, #1
 8000c40:	d505      	bpl.n	8000c4e <_fwalk_sglue+0x22>
 8000c42:	6824      	ldr	r4, [r4, #0]
 8000c44:	2c00      	cmp	r4, #0
 8000c46:	d1f7      	bne.n	8000c38 <_fwalk_sglue+0xc>
 8000c48:	4630      	mov	r0, r6
 8000c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c4e:	89ab      	ldrh	r3, [r5, #12]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d907      	bls.n	8000c64 <_fwalk_sglue+0x38>
 8000c54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	d003      	beq.n	8000c64 <_fwalk_sglue+0x38>
 8000c5c:	4629      	mov	r1, r5
 8000c5e:	4638      	mov	r0, r7
 8000c60:	47c0      	blx	r8
 8000c62:	4306      	orrs	r6, r0
 8000c64:	3568      	adds	r5, #104	@ 0x68
 8000c66:	e7e9      	b.n	8000c3c <_fwalk_sglue+0x10>

08000c68 <iprintf>:
 8000c68:	b40f      	push	{r0, r1, r2, r3}
 8000c6a:	b507      	push	{r0, r1, r2, lr}
 8000c6c:	4906      	ldr	r1, [pc, #24]	@ (8000c88 <iprintf+0x20>)
 8000c6e:	ab04      	add	r3, sp, #16
 8000c70:	6808      	ldr	r0, [r1, #0]
 8000c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c76:	6881      	ldr	r1, [r0, #8]
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	f000 fa3d 	bl	80010f8 <_vfiprintf_r>
 8000c7e:	b003      	add	sp, #12
 8000c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr
 8000c88:	2000001c 	.word	0x2000001c

08000c8c <_puts_r>:
 8000c8c:	6a03      	ldr	r3, [r0, #32]
 8000c8e:	b570      	push	{r4, r5, r6, lr}
 8000c90:	6884      	ldr	r4, [r0, #8]
 8000c92:	4605      	mov	r5, r0
 8000c94:	460e      	mov	r6, r1
 8000c96:	b90b      	cbnz	r3, 8000c9c <_puts_r+0x10>
 8000c98:	f7ff ffb0 	bl	8000bfc <__sinit>
 8000c9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000c9e:	07db      	lsls	r3, r3, #31
 8000ca0:	d405      	bmi.n	8000cae <_puts_r+0x22>
 8000ca2:	89a3      	ldrh	r3, [r4, #12]
 8000ca4:	0598      	lsls	r0, r3, #22
 8000ca6:	d402      	bmi.n	8000cae <_puts_r+0x22>
 8000ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000caa:	f000 f9ae 	bl	800100a <__retarget_lock_acquire_recursive>
 8000cae:	89a3      	ldrh	r3, [r4, #12]
 8000cb0:	0719      	lsls	r1, r3, #28
 8000cb2:	d502      	bpl.n	8000cba <_puts_r+0x2e>
 8000cb4:	6923      	ldr	r3, [r4, #16]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d135      	bne.n	8000d26 <_puts_r+0x9a>
 8000cba:	4621      	mov	r1, r4
 8000cbc:	4628      	mov	r0, r5
 8000cbe:	f000 f8c5 	bl	8000e4c <__swsetup_r>
 8000cc2:	b380      	cbz	r0, 8000d26 <_puts_r+0x9a>
 8000cc4:	f04f 35ff 	mov.w	r5, #4294967295
 8000cc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000cca:	07da      	lsls	r2, r3, #31
 8000ccc:	d405      	bmi.n	8000cda <_puts_r+0x4e>
 8000cce:	89a3      	ldrh	r3, [r4, #12]
 8000cd0:	059b      	lsls	r3, r3, #22
 8000cd2:	d402      	bmi.n	8000cda <_puts_r+0x4e>
 8000cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000cd6:	f000 f999 	bl	800100c <__retarget_lock_release_recursive>
 8000cda:	4628      	mov	r0, r5
 8000cdc:	bd70      	pop	{r4, r5, r6, pc}
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	da04      	bge.n	8000cec <_puts_r+0x60>
 8000ce2:	69a2      	ldr	r2, [r4, #24]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dc17      	bgt.n	8000d18 <_puts_r+0x8c>
 8000ce8:	290a      	cmp	r1, #10
 8000cea:	d015      	beq.n	8000d18 <_puts_r+0x8c>
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	6022      	str	r2, [r4, #0]
 8000cf2:	7019      	strb	r1, [r3, #0]
 8000cf4:	68a3      	ldr	r3, [r4, #8]
 8000cf6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	60a3      	str	r3, [r4, #8]
 8000cfe:	2900      	cmp	r1, #0
 8000d00:	d1ed      	bne.n	8000cde <_puts_r+0x52>
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	da11      	bge.n	8000d2a <_puts_r+0x9e>
 8000d06:	4622      	mov	r2, r4
 8000d08:	210a      	movs	r1, #10
 8000d0a:	4628      	mov	r0, r5
 8000d0c:	f000 f85f 	bl	8000dce <__swbuf_r>
 8000d10:	3001      	adds	r0, #1
 8000d12:	d0d7      	beq.n	8000cc4 <_puts_r+0x38>
 8000d14:	250a      	movs	r5, #10
 8000d16:	e7d7      	b.n	8000cc8 <_puts_r+0x3c>
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	f000 f857 	bl	8000dce <__swbuf_r>
 8000d20:	3001      	adds	r0, #1
 8000d22:	d1e7      	bne.n	8000cf4 <_puts_r+0x68>
 8000d24:	e7ce      	b.n	8000cc4 <_puts_r+0x38>
 8000d26:	3e01      	subs	r6, #1
 8000d28:	e7e4      	b.n	8000cf4 <_puts_r+0x68>
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	6022      	str	r2, [r4, #0]
 8000d30:	220a      	movs	r2, #10
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	e7ee      	b.n	8000d14 <_puts_r+0x88>
	...

08000d38 <puts>:
 8000d38:	4b02      	ldr	r3, [pc, #8]	@ (8000d44 <puts+0xc>)
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	f7ff bfa5 	b.w	8000c8c <_puts_r>
 8000d42:	bf00      	nop
 8000d44:	2000001c 	.word	0x2000001c

08000d48 <__sread>:
 8000d48:	b510      	push	{r4, lr}
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d50:	f000 f8fc 	bl	8000f4c <_read_r>
 8000d54:	2800      	cmp	r0, #0
 8000d56:	bfab      	itete	ge
 8000d58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8000d5c:	181b      	addge	r3, r3, r0
 8000d5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000d62:	bfac      	ite	ge
 8000d64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000d66:	81a3      	strhlt	r3, [r4, #12]
 8000d68:	bd10      	pop	{r4, pc}

08000d6a <__swrite>:
 8000d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d6e:	461f      	mov	r7, r3
 8000d70:	898b      	ldrh	r3, [r1, #12]
 8000d72:	05db      	lsls	r3, r3, #23
 8000d74:	4605      	mov	r5, r0
 8000d76:	460c      	mov	r4, r1
 8000d78:	4616      	mov	r6, r2
 8000d7a:	d505      	bpl.n	8000d88 <__swrite+0x1e>
 8000d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d80:	2302      	movs	r3, #2
 8000d82:	2200      	movs	r2, #0
 8000d84:	f000 f8d0 	bl	8000f28 <_lseek_r>
 8000d88:	89a3      	ldrh	r3, [r4, #12]
 8000d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d92:	81a3      	strh	r3, [r4, #12]
 8000d94:	4632      	mov	r2, r6
 8000d96:	463b      	mov	r3, r7
 8000d98:	4628      	mov	r0, r5
 8000d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d9e:	f000 b8f7 	b.w	8000f90 <_write_r>

08000da2 <__sseek>:
 8000da2:	b510      	push	{r4, lr}
 8000da4:	460c      	mov	r4, r1
 8000da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000daa:	f000 f8bd 	bl	8000f28 <_lseek_r>
 8000dae:	1c43      	adds	r3, r0, #1
 8000db0:	89a3      	ldrh	r3, [r4, #12]
 8000db2:	bf15      	itete	ne
 8000db4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000db6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000dba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000dbe:	81a3      	strheq	r3, [r4, #12]
 8000dc0:	bf18      	it	ne
 8000dc2:	81a3      	strhne	r3, [r4, #12]
 8000dc4:	bd10      	pop	{r4, pc}

08000dc6 <__sclose>:
 8000dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dca:	f000 b89d 	b.w	8000f08 <_close_r>

08000dce <__swbuf_r>:
 8000dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd0:	460e      	mov	r6, r1
 8000dd2:	4614      	mov	r4, r2
 8000dd4:	4605      	mov	r5, r0
 8000dd6:	b118      	cbz	r0, 8000de0 <__swbuf_r+0x12>
 8000dd8:	6a03      	ldr	r3, [r0, #32]
 8000dda:	b90b      	cbnz	r3, 8000de0 <__swbuf_r+0x12>
 8000ddc:	f7ff ff0e 	bl	8000bfc <__sinit>
 8000de0:	69a3      	ldr	r3, [r4, #24]
 8000de2:	60a3      	str	r3, [r4, #8]
 8000de4:	89a3      	ldrh	r3, [r4, #12]
 8000de6:	071a      	lsls	r2, r3, #28
 8000de8:	d501      	bpl.n	8000dee <__swbuf_r+0x20>
 8000dea:	6923      	ldr	r3, [r4, #16]
 8000dec:	b943      	cbnz	r3, 8000e00 <__swbuf_r+0x32>
 8000dee:	4621      	mov	r1, r4
 8000df0:	4628      	mov	r0, r5
 8000df2:	f000 f82b 	bl	8000e4c <__swsetup_r>
 8000df6:	b118      	cbz	r0, 8000e00 <__swbuf_r+0x32>
 8000df8:	f04f 37ff 	mov.w	r7, #4294967295
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e00:	6823      	ldr	r3, [r4, #0]
 8000e02:	6922      	ldr	r2, [r4, #16]
 8000e04:	1a98      	subs	r0, r3, r2
 8000e06:	6963      	ldr	r3, [r4, #20]
 8000e08:	b2f6      	uxtb	r6, r6
 8000e0a:	4283      	cmp	r3, r0
 8000e0c:	4637      	mov	r7, r6
 8000e0e:	dc05      	bgt.n	8000e1c <__swbuf_r+0x4e>
 8000e10:	4621      	mov	r1, r4
 8000e12:	4628      	mov	r0, r5
 8000e14:	f000 fc9a 	bl	800174c <_fflush_r>
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	d1ed      	bne.n	8000df8 <__swbuf_r+0x2a>
 8000e1c:	68a3      	ldr	r3, [r4, #8]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	60a3      	str	r3, [r4, #8]
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	6022      	str	r2, [r4, #0]
 8000e28:	701e      	strb	r6, [r3, #0]
 8000e2a:	6962      	ldr	r2, [r4, #20]
 8000e2c:	1c43      	adds	r3, r0, #1
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d004      	beq.n	8000e3c <__swbuf_r+0x6e>
 8000e32:	89a3      	ldrh	r3, [r4, #12]
 8000e34:	07db      	lsls	r3, r3, #31
 8000e36:	d5e1      	bpl.n	8000dfc <__swbuf_r+0x2e>
 8000e38:	2e0a      	cmp	r6, #10
 8000e3a:	d1df      	bne.n	8000dfc <__swbuf_r+0x2e>
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	4628      	mov	r0, r5
 8000e40:	f000 fc84 	bl	800174c <_fflush_r>
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d0d9      	beq.n	8000dfc <__swbuf_r+0x2e>
 8000e48:	e7d6      	b.n	8000df8 <__swbuf_r+0x2a>
	...

08000e4c <__swsetup_r>:
 8000e4c:	b538      	push	{r3, r4, r5, lr}
 8000e4e:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <__swsetup_r+0xa8>)
 8000e50:	4605      	mov	r5, r0
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	460c      	mov	r4, r1
 8000e56:	b118      	cbz	r0, 8000e60 <__swsetup_r+0x14>
 8000e58:	6a03      	ldr	r3, [r0, #32]
 8000e5a:	b90b      	cbnz	r3, 8000e60 <__swsetup_r+0x14>
 8000e5c:	f7ff fece 	bl	8000bfc <__sinit>
 8000e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e64:	0719      	lsls	r1, r3, #28
 8000e66:	d422      	bmi.n	8000eae <__swsetup_r+0x62>
 8000e68:	06da      	lsls	r2, r3, #27
 8000e6a:	d407      	bmi.n	8000e7c <__swsetup_r+0x30>
 8000e6c:	2209      	movs	r2, #9
 8000e6e:	602a      	str	r2, [r5, #0]
 8000e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e74:	81a3      	strh	r3, [r4, #12]
 8000e76:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7a:	e033      	b.n	8000ee4 <__swsetup_r+0x98>
 8000e7c:	0758      	lsls	r0, r3, #29
 8000e7e:	d512      	bpl.n	8000ea6 <__swsetup_r+0x5a>
 8000e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e82:	b141      	cbz	r1, 8000e96 <__swsetup_r+0x4a>
 8000e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d002      	beq.n	8000e92 <__swsetup_r+0x46>
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	f000 f8bf 	bl	8001010 <_free_r>
 8000e92:	2300      	movs	r3, #0
 8000e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e96:	89a3      	ldrh	r3, [r4, #12]
 8000e98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000e9c:	81a3      	strh	r3, [r4, #12]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	6063      	str	r3, [r4, #4]
 8000ea2:	6923      	ldr	r3, [r4, #16]
 8000ea4:	6023      	str	r3, [r4, #0]
 8000ea6:	89a3      	ldrh	r3, [r4, #12]
 8000ea8:	f043 0308 	orr.w	r3, r3, #8
 8000eac:	81a3      	strh	r3, [r4, #12]
 8000eae:	6923      	ldr	r3, [r4, #16]
 8000eb0:	b94b      	cbnz	r3, 8000ec6 <__swsetup_r+0x7a>
 8000eb2:	89a3      	ldrh	r3, [r4, #12]
 8000eb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ebc:	d003      	beq.n	8000ec6 <__swsetup_r+0x7a>
 8000ebe:	4621      	mov	r1, r4
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	f000 fc91 	bl	80017e8 <__smakebuf_r>
 8000ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000eca:	f013 0201 	ands.w	r2, r3, #1
 8000ece:	d00a      	beq.n	8000ee6 <__swsetup_r+0x9a>
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60a2      	str	r2, [r4, #8]
 8000ed4:	6962      	ldr	r2, [r4, #20]
 8000ed6:	4252      	negs	r2, r2
 8000ed8:	61a2      	str	r2, [r4, #24]
 8000eda:	6922      	ldr	r2, [r4, #16]
 8000edc:	b942      	cbnz	r2, 8000ef0 <__swsetup_r+0xa4>
 8000ede:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000ee2:	d1c5      	bne.n	8000e70 <__swsetup_r+0x24>
 8000ee4:	bd38      	pop	{r3, r4, r5, pc}
 8000ee6:	0799      	lsls	r1, r3, #30
 8000ee8:	bf58      	it	pl
 8000eea:	6962      	ldrpl	r2, [r4, #20]
 8000eec:	60a2      	str	r2, [r4, #8]
 8000eee:	e7f4      	b.n	8000eda <__swsetup_r+0x8e>
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	e7f7      	b.n	8000ee4 <__swsetup_r+0x98>
 8000ef4:	2000001c 	.word	0x2000001c

08000ef8 <memset>:
 8000ef8:	4402      	add	r2, r0
 8000efa:	4603      	mov	r3, r0
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d100      	bne.n	8000f02 <memset+0xa>
 8000f00:	4770      	bx	lr
 8000f02:	f803 1b01 	strb.w	r1, [r3], #1
 8000f06:	e7f9      	b.n	8000efc <memset+0x4>

08000f08 <_close_r>:
 8000f08:	b538      	push	{r3, r4, r5, lr}
 8000f0a:	4d06      	ldr	r5, [pc, #24]	@ (8000f24 <_close_r+0x1c>)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4604      	mov	r4, r0
 8000f10:	4608      	mov	r0, r1
 8000f12:	602b      	str	r3, [r5, #0]
 8000f14:	f7ff fbc1 	bl	800069a <_close>
 8000f18:	1c43      	adds	r3, r0, #1
 8000f1a:	d102      	bne.n	8000f22 <_close_r+0x1a>
 8000f1c:	682b      	ldr	r3, [r5, #0]
 8000f1e:	b103      	cbz	r3, 8000f22 <_close_r+0x1a>
 8000f20:	6023      	str	r3, [r4, #0]
 8000f22:	bd38      	pop	{r3, r4, r5, pc}
 8000f24:	200009d4 	.word	0x200009d4

08000f28 <_lseek_r>:
 8000f28:	b538      	push	{r3, r4, r5, lr}
 8000f2a:	4d07      	ldr	r5, [pc, #28]	@ (8000f48 <_lseek_r+0x20>)
 8000f2c:	4604      	mov	r4, r0
 8000f2e:	4608      	mov	r0, r1
 8000f30:	4611      	mov	r1, r2
 8000f32:	2200      	movs	r2, #0
 8000f34:	602a      	str	r2, [r5, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	f7ff fbd6 	bl	80006e8 <_lseek>
 8000f3c:	1c43      	adds	r3, r0, #1
 8000f3e:	d102      	bne.n	8000f46 <_lseek_r+0x1e>
 8000f40:	682b      	ldr	r3, [r5, #0]
 8000f42:	b103      	cbz	r3, 8000f46 <_lseek_r+0x1e>
 8000f44:	6023      	str	r3, [r4, #0]
 8000f46:	bd38      	pop	{r3, r4, r5, pc}
 8000f48:	200009d4 	.word	0x200009d4

08000f4c <_read_r>:
 8000f4c:	b538      	push	{r3, r4, r5, lr}
 8000f4e:	4d07      	ldr	r5, [pc, #28]	@ (8000f6c <_read_r+0x20>)
 8000f50:	4604      	mov	r4, r0
 8000f52:	4608      	mov	r0, r1
 8000f54:	4611      	mov	r1, r2
 8000f56:	2200      	movs	r2, #0
 8000f58:	602a      	str	r2, [r5, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	f7ff fb64 	bl	8000628 <_read>
 8000f60:	1c43      	adds	r3, r0, #1
 8000f62:	d102      	bne.n	8000f6a <_read_r+0x1e>
 8000f64:	682b      	ldr	r3, [r5, #0]
 8000f66:	b103      	cbz	r3, 8000f6a <_read_r+0x1e>
 8000f68:	6023      	str	r3, [r4, #0]
 8000f6a:	bd38      	pop	{r3, r4, r5, pc}
 8000f6c:	200009d4 	.word	0x200009d4

08000f70 <_sbrk_r>:
 8000f70:	b538      	push	{r3, r4, r5, lr}
 8000f72:	4d06      	ldr	r5, [pc, #24]	@ (8000f8c <_sbrk_r+0x1c>)
 8000f74:	2300      	movs	r3, #0
 8000f76:	4604      	mov	r4, r0
 8000f78:	4608      	mov	r0, r1
 8000f7a:	602b      	str	r3, [r5, #0]
 8000f7c:	f7ff fbc2 	bl	8000704 <_sbrk>
 8000f80:	1c43      	adds	r3, r0, #1
 8000f82:	d102      	bne.n	8000f8a <_sbrk_r+0x1a>
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	b103      	cbz	r3, 8000f8a <_sbrk_r+0x1a>
 8000f88:	6023      	str	r3, [r4, #0]
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}
 8000f8c:	200009d4 	.word	0x200009d4

08000f90 <_write_r>:
 8000f90:	b538      	push	{r3, r4, r5, lr}
 8000f92:	4d07      	ldr	r5, [pc, #28]	@ (8000fb0 <_write_r+0x20>)
 8000f94:	4604      	mov	r4, r0
 8000f96:	4608      	mov	r0, r1
 8000f98:	4611      	mov	r1, r2
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	602a      	str	r2, [r5, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	f7ff fb5f 	bl	8000662 <_write>
 8000fa4:	1c43      	adds	r3, r0, #1
 8000fa6:	d102      	bne.n	8000fae <_write_r+0x1e>
 8000fa8:	682b      	ldr	r3, [r5, #0]
 8000faa:	b103      	cbz	r3, 8000fae <_write_r+0x1e>
 8000fac:	6023      	str	r3, [r4, #0]
 8000fae:	bd38      	pop	{r3, r4, r5, pc}
 8000fb0:	200009d4 	.word	0x200009d4

08000fb4 <__errno>:
 8000fb4:	4b01      	ldr	r3, [pc, #4]	@ (8000fbc <__errno+0x8>)
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	2000001c 	.word	0x2000001c

08000fc0 <__libc_init_array>:
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	4d0d      	ldr	r5, [pc, #52]	@ (8000ff8 <__libc_init_array+0x38>)
 8000fc4:	4c0d      	ldr	r4, [pc, #52]	@ (8000ffc <__libc_init_array+0x3c>)
 8000fc6:	1b64      	subs	r4, r4, r5
 8000fc8:	10a4      	asrs	r4, r4, #2
 8000fca:	2600      	movs	r6, #0
 8000fcc:	42a6      	cmp	r6, r4
 8000fce:	d109      	bne.n	8000fe4 <__libc_init_array+0x24>
 8000fd0:	4d0b      	ldr	r5, [pc, #44]	@ (8001000 <__libc_init_array+0x40>)
 8000fd2:	4c0c      	ldr	r4, [pc, #48]	@ (8001004 <__libc_init_array+0x44>)
 8000fd4:	f000 fc66 	bl	80018a4 <_init>
 8000fd8:	1b64      	subs	r4, r4, r5
 8000fda:	10a4      	asrs	r4, r4, #2
 8000fdc:	2600      	movs	r6, #0
 8000fde:	42a6      	cmp	r6, r4
 8000fe0:	d105      	bne.n	8000fee <__libc_init_array+0x2e>
 8000fe2:	bd70      	pop	{r4, r5, r6, pc}
 8000fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fe8:	4798      	blx	r3
 8000fea:	3601      	adds	r6, #1
 8000fec:	e7ee      	b.n	8000fcc <__libc_init_array+0xc>
 8000fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ff2:	4798      	blx	r3
 8000ff4:	3601      	adds	r6, #1
 8000ff6:	e7f2      	b.n	8000fde <__libc_init_array+0x1e>
 8000ff8:	08001a08 	.word	0x08001a08
 8000ffc:	08001a08 	.word	0x08001a08
 8001000:	08001a08 	.word	0x08001a08
 8001004:	08001a0c 	.word	0x08001a0c

08001008 <__retarget_lock_init_recursive>:
 8001008:	4770      	bx	lr

0800100a <__retarget_lock_acquire_recursive>:
 800100a:	4770      	bx	lr

0800100c <__retarget_lock_release_recursive>:
 800100c:	4770      	bx	lr
	...

08001010 <_free_r>:
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4605      	mov	r5, r0
 8001014:	2900      	cmp	r1, #0
 8001016:	d041      	beq.n	800109c <_free_r+0x8c>
 8001018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800101c:	1f0c      	subs	r4, r1, #4
 800101e:	2b00      	cmp	r3, #0
 8001020:	bfb8      	it	lt
 8001022:	18e4      	addlt	r4, r4, r3
 8001024:	f7ff fd52 	bl	8000acc <__malloc_lock>
 8001028:	4a1d      	ldr	r2, [pc, #116]	@ (80010a0 <_free_r+0x90>)
 800102a:	6813      	ldr	r3, [r2, #0]
 800102c:	b933      	cbnz	r3, 800103c <_free_r+0x2c>
 800102e:	6063      	str	r3, [r4, #4]
 8001030:	6014      	str	r4, [r2, #0]
 8001032:	4628      	mov	r0, r5
 8001034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001038:	f7ff bd4e 	b.w	8000ad8 <__malloc_unlock>
 800103c:	42a3      	cmp	r3, r4
 800103e:	d908      	bls.n	8001052 <_free_r+0x42>
 8001040:	6820      	ldr	r0, [r4, #0]
 8001042:	1821      	adds	r1, r4, r0
 8001044:	428b      	cmp	r3, r1
 8001046:	bf01      	itttt	eq
 8001048:	6819      	ldreq	r1, [r3, #0]
 800104a:	685b      	ldreq	r3, [r3, #4]
 800104c:	1809      	addeq	r1, r1, r0
 800104e:	6021      	streq	r1, [r4, #0]
 8001050:	e7ed      	b.n	800102e <_free_r+0x1e>
 8001052:	461a      	mov	r2, r3
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	b10b      	cbz	r3, 800105c <_free_r+0x4c>
 8001058:	42a3      	cmp	r3, r4
 800105a:	d9fa      	bls.n	8001052 <_free_r+0x42>
 800105c:	6811      	ldr	r1, [r2, #0]
 800105e:	1850      	adds	r0, r2, r1
 8001060:	42a0      	cmp	r0, r4
 8001062:	d10b      	bne.n	800107c <_free_r+0x6c>
 8001064:	6820      	ldr	r0, [r4, #0]
 8001066:	4401      	add	r1, r0
 8001068:	1850      	adds	r0, r2, r1
 800106a:	4283      	cmp	r3, r0
 800106c:	6011      	str	r1, [r2, #0]
 800106e:	d1e0      	bne.n	8001032 <_free_r+0x22>
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	6053      	str	r3, [r2, #4]
 8001076:	4408      	add	r0, r1
 8001078:	6010      	str	r0, [r2, #0]
 800107a:	e7da      	b.n	8001032 <_free_r+0x22>
 800107c:	d902      	bls.n	8001084 <_free_r+0x74>
 800107e:	230c      	movs	r3, #12
 8001080:	602b      	str	r3, [r5, #0]
 8001082:	e7d6      	b.n	8001032 <_free_r+0x22>
 8001084:	6820      	ldr	r0, [r4, #0]
 8001086:	1821      	adds	r1, r4, r0
 8001088:	428b      	cmp	r3, r1
 800108a:	bf04      	itt	eq
 800108c:	6819      	ldreq	r1, [r3, #0]
 800108e:	685b      	ldreq	r3, [r3, #4]
 8001090:	6063      	str	r3, [r4, #4]
 8001092:	bf04      	itt	eq
 8001094:	1809      	addeq	r1, r1, r0
 8001096:	6021      	streq	r1, [r4, #0]
 8001098:	6054      	str	r4, [r2, #4]
 800109a:	e7ca      	b.n	8001032 <_free_r+0x22>
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop
 80010a0:	20000894 	.word	0x20000894

080010a4 <__sfputc_r>:
 80010a4:	6893      	ldr	r3, [r2, #8]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	b410      	push	{r4}
 80010ac:	6093      	str	r3, [r2, #8]
 80010ae:	da08      	bge.n	80010c2 <__sfputc_r+0x1e>
 80010b0:	6994      	ldr	r4, [r2, #24]
 80010b2:	42a3      	cmp	r3, r4
 80010b4:	db01      	blt.n	80010ba <__sfputc_r+0x16>
 80010b6:	290a      	cmp	r1, #10
 80010b8:	d103      	bne.n	80010c2 <__sfputc_r+0x1e>
 80010ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010be:	f7ff be86 	b.w	8000dce <__swbuf_r>
 80010c2:	6813      	ldr	r3, [r2, #0]
 80010c4:	1c58      	adds	r0, r3, #1
 80010c6:	6010      	str	r0, [r2, #0]
 80010c8:	7019      	strb	r1, [r3, #0]
 80010ca:	4608      	mov	r0, r1
 80010cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <__sfputs_r>:
 80010d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d4:	4606      	mov	r6, r0
 80010d6:	460f      	mov	r7, r1
 80010d8:	4614      	mov	r4, r2
 80010da:	18d5      	adds	r5, r2, r3
 80010dc:	42ac      	cmp	r4, r5
 80010de:	d101      	bne.n	80010e4 <__sfputs_r+0x12>
 80010e0:	2000      	movs	r0, #0
 80010e2:	e007      	b.n	80010f4 <__sfputs_r+0x22>
 80010e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010e8:	463a      	mov	r2, r7
 80010ea:	4630      	mov	r0, r6
 80010ec:	f7ff ffda 	bl	80010a4 <__sfputc_r>
 80010f0:	1c43      	adds	r3, r0, #1
 80010f2:	d1f3      	bne.n	80010dc <__sfputs_r+0xa>
 80010f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080010f8 <_vfiprintf_r>:
 80010f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010fc:	460d      	mov	r5, r1
 80010fe:	b09d      	sub	sp, #116	@ 0x74
 8001100:	4614      	mov	r4, r2
 8001102:	4698      	mov	r8, r3
 8001104:	4606      	mov	r6, r0
 8001106:	b118      	cbz	r0, 8001110 <_vfiprintf_r+0x18>
 8001108:	6a03      	ldr	r3, [r0, #32]
 800110a:	b90b      	cbnz	r3, 8001110 <_vfiprintf_r+0x18>
 800110c:	f7ff fd76 	bl	8000bfc <__sinit>
 8001110:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001112:	07d9      	lsls	r1, r3, #31
 8001114:	d405      	bmi.n	8001122 <_vfiprintf_r+0x2a>
 8001116:	89ab      	ldrh	r3, [r5, #12]
 8001118:	059a      	lsls	r2, r3, #22
 800111a:	d402      	bmi.n	8001122 <_vfiprintf_r+0x2a>
 800111c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800111e:	f7ff ff74 	bl	800100a <__retarget_lock_acquire_recursive>
 8001122:	89ab      	ldrh	r3, [r5, #12]
 8001124:	071b      	lsls	r3, r3, #28
 8001126:	d501      	bpl.n	800112c <_vfiprintf_r+0x34>
 8001128:	692b      	ldr	r3, [r5, #16]
 800112a:	b99b      	cbnz	r3, 8001154 <_vfiprintf_r+0x5c>
 800112c:	4629      	mov	r1, r5
 800112e:	4630      	mov	r0, r6
 8001130:	f7ff fe8c 	bl	8000e4c <__swsetup_r>
 8001134:	b170      	cbz	r0, 8001154 <_vfiprintf_r+0x5c>
 8001136:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001138:	07dc      	lsls	r4, r3, #31
 800113a:	d504      	bpl.n	8001146 <_vfiprintf_r+0x4e>
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	b01d      	add	sp, #116	@ 0x74
 8001142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001146:	89ab      	ldrh	r3, [r5, #12]
 8001148:	0598      	lsls	r0, r3, #22
 800114a:	d4f7      	bmi.n	800113c <_vfiprintf_r+0x44>
 800114c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800114e:	f7ff ff5d 	bl	800100c <__retarget_lock_release_recursive>
 8001152:	e7f3      	b.n	800113c <_vfiprintf_r+0x44>
 8001154:	2300      	movs	r3, #0
 8001156:	9309      	str	r3, [sp, #36]	@ 0x24
 8001158:	2320      	movs	r3, #32
 800115a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800115e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001162:	2330      	movs	r3, #48	@ 0x30
 8001164:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001314 <_vfiprintf_r+0x21c>
 8001168:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800116c:	f04f 0901 	mov.w	r9, #1
 8001170:	4623      	mov	r3, r4
 8001172:	469a      	mov	sl, r3
 8001174:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001178:	b10a      	cbz	r2, 800117e <_vfiprintf_r+0x86>
 800117a:	2a25      	cmp	r2, #37	@ 0x25
 800117c:	d1f9      	bne.n	8001172 <_vfiprintf_r+0x7a>
 800117e:	ebba 0b04 	subs.w	fp, sl, r4
 8001182:	d00b      	beq.n	800119c <_vfiprintf_r+0xa4>
 8001184:	465b      	mov	r3, fp
 8001186:	4622      	mov	r2, r4
 8001188:	4629      	mov	r1, r5
 800118a:	4630      	mov	r0, r6
 800118c:	f7ff ffa1 	bl	80010d2 <__sfputs_r>
 8001190:	3001      	adds	r0, #1
 8001192:	f000 80a7 	beq.w	80012e4 <_vfiprintf_r+0x1ec>
 8001196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001198:	445a      	add	r2, fp
 800119a:	9209      	str	r2, [sp, #36]	@ 0x24
 800119c:	f89a 3000 	ldrb.w	r3, [sl]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 809f 	beq.w	80012e4 <_vfiprintf_r+0x1ec>
 80011a6:	2300      	movs	r3, #0
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011b0:	f10a 0a01 	add.w	sl, sl, #1
 80011b4:	9304      	str	r3, [sp, #16]
 80011b6:	9307      	str	r3, [sp, #28]
 80011b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80011bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80011be:	4654      	mov	r4, sl
 80011c0:	2205      	movs	r2, #5
 80011c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011c6:	4853      	ldr	r0, [pc, #332]	@ (8001314 <_vfiprintf_r+0x21c>)
 80011c8:	f7ff f822 	bl	8000210 <memchr>
 80011cc:	9a04      	ldr	r2, [sp, #16]
 80011ce:	b9d8      	cbnz	r0, 8001208 <_vfiprintf_r+0x110>
 80011d0:	06d1      	lsls	r1, r2, #27
 80011d2:	bf44      	itt	mi
 80011d4:	2320      	movmi	r3, #32
 80011d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80011da:	0713      	lsls	r3, r2, #28
 80011dc:	bf44      	itt	mi
 80011de:	232b      	movmi	r3, #43	@ 0x2b
 80011e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80011e4:	f89a 3000 	ldrb.w	r3, [sl]
 80011e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80011ea:	d015      	beq.n	8001218 <_vfiprintf_r+0x120>
 80011ec:	9a07      	ldr	r2, [sp, #28]
 80011ee:	4654      	mov	r4, sl
 80011f0:	2000      	movs	r0, #0
 80011f2:	f04f 0c0a 	mov.w	ip, #10
 80011f6:	4621      	mov	r1, r4
 80011f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011fc:	3b30      	subs	r3, #48	@ 0x30
 80011fe:	2b09      	cmp	r3, #9
 8001200:	d94b      	bls.n	800129a <_vfiprintf_r+0x1a2>
 8001202:	b1b0      	cbz	r0, 8001232 <_vfiprintf_r+0x13a>
 8001204:	9207      	str	r2, [sp, #28]
 8001206:	e014      	b.n	8001232 <_vfiprintf_r+0x13a>
 8001208:	eba0 0308 	sub.w	r3, r0, r8
 800120c:	fa09 f303 	lsl.w	r3, r9, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	9304      	str	r3, [sp, #16]
 8001214:	46a2      	mov	sl, r4
 8001216:	e7d2      	b.n	80011be <_vfiprintf_r+0xc6>
 8001218:	9b03      	ldr	r3, [sp, #12]
 800121a:	1d19      	adds	r1, r3, #4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	9103      	str	r1, [sp, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	bfbb      	ittet	lt
 8001224:	425b      	neglt	r3, r3
 8001226:	f042 0202 	orrlt.w	r2, r2, #2
 800122a:	9307      	strge	r3, [sp, #28]
 800122c:	9307      	strlt	r3, [sp, #28]
 800122e:	bfb8      	it	lt
 8001230:	9204      	strlt	r2, [sp, #16]
 8001232:	7823      	ldrb	r3, [r4, #0]
 8001234:	2b2e      	cmp	r3, #46	@ 0x2e
 8001236:	d10a      	bne.n	800124e <_vfiprintf_r+0x156>
 8001238:	7863      	ldrb	r3, [r4, #1]
 800123a:	2b2a      	cmp	r3, #42	@ 0x2a
 800123c:	d132      	bne.n	80012a4 <_vfiprintf_r+0x1ac>
 800123e:	9b03      	ldr	r3, [sp, #12]
 8001240:	1d1a      	adds	r2, r3, #4
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	9203      	str	r2, [sp, #12]
 8001246:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800124a:	3402      	adds	r4, #2
 800124c:	9305      	str	r3, [sp, #20]
 800124e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001324 <_vfiprintf_r+0x22c>
 8001252:	7821      	ldrb	r1, [r4, #0]
 8001254:	2203      	movs	r2, #3
 8001256:	4650      	mov	r0, sl
 8001258:	f7fe ffda 	bl	8000210 <memchr>
 800125c:	b138      	cbz	r0, 800126e <_vfiprintf_r+0x176>
 800125e:	9b04      	ldr	r3, [sp, #16]
 8001260:	eba0 000a 	sub.w	r0, r0, sl
 8001264:	2240      	movs	r2, #64	@ 0x40
 8001266:	4082      	lsls	r2, r0
 8001268:	4313      	orrs	r3, r2
 800126a:	3401      	adds	r4, #1
 800126c:	9304      	str	r3, [sp, #16]
 800126e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001272:	4829      	ldr	r0, [pc, #164]	@ (8001318 <_vfiprintf_r+0x220>)
 8001274:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001278:	2206      	movs	r2, #6
 800127a:	f7fe ffc9 	bl	8000210 <memchr>
 800127e:	2800      	cmp	r0, #0
 8001280:	d03f      	beq.n	8001302 <_vfiprintf_r+0x20a>
 8001282:	4b26      	ldr	r3, [pc, #152]	@ (800131c <_vfiprintf_r+0x224>)
 8001284:	bb1b      	cbnz	r3, 80012ce <_vfiprintf_r+0x1d6>
 8001286:	9b03      	ldr	r3, [sp, #12]
 8001288:	3307      	adds	r3, #7
 800128a:	f023 0307 	bic.w	r3, r3, #7
 800128e:	3308      	adds	r3, #8
 8001290:	9303      	str	r3, [sp, #12]
 8001292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001294:	443b      	add	r3, r7
 8001296:	9309      	str	r3, [sp, #36]	@ 0x24
 8001298:	e76a      	b.n	8001170 <_vfiprintf_r+0x78>
 800129a:	fb0c 3202 	mla	r2, ip, r2, r3
 800129e:	460c      	mov	r4, r1
 80012a0:	2001      	movs	r0, #1
 80012a2:	e7a8      	b.n	80011f6 <_vfiprintf_r+0xfe>
 80012a4:	2300      	movs	r3, #0
 80012a6:	3401      	adds	r4, #1
 80012a8:	9305      	str	r3, [sp, #20]
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 0c0a 	mov.w	ip, #10
 80012b0:	4620      	mov	r0, r4
 80012b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80012b6:	3a30      	subs	r2, #48	@ 0x30
 80012b8:	2a09      	cmp	r2, #9
 80012ba:	d903      	bls.n	80012c4 <_vfiprintf_r+0x1cc>
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0c6      	beq.n	800124e <_vfiprintf_r+0x156>
 80012c0:	9105      	str	r1, [sp, #20]
 80012c2:	e7c4      	b.n	800124e <_vfiprintf_r+0x156>
 80012c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80012c8:	4604      	mov	r4, r0
 80012ca:	2301      	movs	r3, #1
 80012cc:	e7f0      	b.n	80012b0 <_vfiprintf_r+0x1b8>
 80012ce:	ab03      	add	r3, sp, #12
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	462a      	mov	r2, r5
 80012d4:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <_vfiprintf_r+0x228>)
 80012d6:	a904      	add	r1, sp, #16
 80012d8:	4630      	mov	r0, r6
 80012da:	f3af 8000 	nop.w
 80012de:	4607      	mov	r7, r0
 80012e0:	1c78      	adds	r0, r7, #1
 80012e2:	d1d6      	bne.n	8001292 <_vfiprintf_r+0x19a>
 80012e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80012e6:	07d9      	lsls	r1, r3, #31
 80012e8:	d405      	bmi.n	80012f6 <_vfiprintf_r+0x1fe>
 80012ea:	89ab      	ldrh	r3, [r5, #12]
 80012ec:	059a      	lsls	r2, r3, #22
 80012ee:	d402      	bmi.n	80012f6 <_vfiprintf_r+0x1fe>
 80012f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80012f2:	f7ff fe8b 	bl	800100c <__retarget_lock_release_recursive>
 80012f6:	89ab      	ldrh	r3, [r5, #12]
 80012f8:	065b      	lsls	r3, r3, #25
 80012fa:	f53f af1f 	bmi.w	800113c <_vfiprintf_r+0x44>
 80012fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001300:	e71e      	b.n	8001140 <_vfiprintf_r+0x48>
 8001302:	ab03      	add	r3, sp, #12
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	462a      	mov	r2, r5
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <_vfiprintf_r+0x228>)
 800130a:	a904      	add	r1, sp, #16
 800130c:	4630      	mov	r0, r6
 800130e:	f000 f879 	bl	8001404 <_printf_i>
 8001312:	e7e4      	b.n	80012de <_vfiprintf_r+0x1e6>
 8001314:	080019cb 	.word	0x080019cb
 8001318:	080019d5 	.word	0x080019d5
 800131c:	00000000 	.word	0x00000000
 8001320:	080010d3 	.word	0x080010d3
 8001324:	080019d1 	.word	0x080019d1

08001328 <_printf_common>:
 8001328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800132c:	4616      	mov	r6, r2
 800132e:	4698      	mov	r8, r3
 8001330:	688a      	ldr	r2, [r1, #8]
 8001332:	690b      	ldr	r3, [r1, #16]
 8001334:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001338:	4293      	cmp	r3, r2
 800133a:	bfb8      	it	lt
 800133c:	4613      	movlt	r3, r2
 800133e:	6033      	str	r3, [r6, #0]
 8001340:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001344:	4607      	mov	r7, r0
 8001346:	460c      	mov	r4, r1
 8001348:	b10a      	cbz	r2, 800134e <_printf_common+0x26>
 800134a:	3301      	adds	r3, #1
 800134c:	6033      	str	r3, [r6, #0]
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	0699      	lsls	r1, r3, #26
 8001352:	bf42      	ittt	mi
 8001354:	6833      	ldrmi	r3, [r6, #0]
 8001356:	3302      	addmi	r3, #2
 8001358:	6033      	strmi	r3, [r6, #0]
 800135a:	6825      	ldr	r5, [r4, #0]
 800135c:	f015 0506 	ands.w	r5, r5, #6
 8001360:	d106      	bne.n	8001370 <_printf_common+0x48>
 8001362:	f104 0a19 	add.w	sl, r4, #25
 8001366:	68e3      	ldr	r3, [r4, #12]
 8001368:	6832      	ldr	r2, [r6, #0]
 800136a:	1a9b      	subs	r3, r3, r2
 800136c:	42ab      	cmp	r3, r5
 800136e:	dc26      	bgt.n	80013be <_printf_common+0x96>
 8001370:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001374:	6822      	ldr	r2, [r4, #0]
 8001376:	3b00      	subs	r3, #0
 8001378:	bf18      	it	ne
 800137a:	2301      	movne	r3, #1
 800137c:	0692      	lsls	r2, r2, #26
 800137e:	d42b      	bmi.n	80013d8 <_printf_common+0xb0>
 8001380:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001384:	4641      	mov	r1, r8
 8001386:	4638      	mov	r0, r7
 8001388:	47c8      	blx	r9
 800138a:	3001      	adds	r0, #1
 800138c:	d01e      	beq.n	80013cc <_printf_common+0xa4>
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	6922      	ldr	r2, [r4, #16]
 8001392:	f003 0306 	and.w	r3, r3, #6
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf02      	ittt	eq
 800139a:	68e5      	ldreq	r5, [r4, #12]
 800139c:	6833      	ldreq	r3, [r6, #0]
 800139e:	1aed      	subeq	r5, r5, r3
 80013a0:	68a3      	ldr	r3, [r4, #8]
 80013a2:	bf0c      	ite	eq
 80013a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013a8:	2500      	movne	r5, #0
 80013aa:	4293      	cmp	r3, r2
 80013ac:	bfc4      	itt	gt
 80013ae:	1a9b      	subgt	r3, r3, r2
 80013b0:	18ed      	addgt	r5, r5, r3
 80013b2:	2600      	movs	r6, #0
 80013b4:	341a      	adds	r4, #26
 80013b6:	42b5      	cmp	r5, r6
 80013b8:	d11a      	bne.n	80013f0 <_printf_common+0xc8>
 80013ba:	2000      	movs	r0, #0
 80013bc:	e008      	b.n	80013d0 <_printf_common+0xa8>
 80013be:	2301      	movs	r3, #1
 80013c0:	4652      	mov	r2, sl
 80013c2:	4641      	mov	r1, r8
 80013c4:	4638      	mov	r0, r7
 80013c6:	47c8      	blx	r9
 80013c8:	3001      	adds	r0, #1
 80013ca:	d103      	bne.n	80013d4 <_printf_common+0xac>
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013d4:	3501      	adds	r5, #1
 80013d6:	e7c6      	b.n	8001366 <_printf_common+0x3e>
 80013d8:	18e1      	adds	r1, r4, r3
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	2030      	movs	r0, #48	@ 0x30
 80013de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80013e2:	4422      	add	r2, r4
 80013e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80013e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80013ec:	3302      	adds	r3, #2
 80013ee:	e7c7      	b.n	8001380 <_printf_common+0x58>
 80013f0:	2301      	movs	r3, #1
 80013f2:	4622      	mov	r2, r4
 80013f4:	4641      	mov	r1, r8
 80013f6:	4638      	mov	r0, r7
 80013f8:	47c8      	blx	r9
 80013fa:	3001      	adds	r0, #1
 80013fc:	d0e6      	beq.n	80013cc <_printf_common+0xa4>
 80013fe:	3601      	adds	r6, #1
 8001400:	e7d9      	b.n	80013b6 <_printf_common+0x8e>
	...

08001404 <_printf_i>:
 8001404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001408:	7e0f      	ldrb	r7, [r1, #24]
 800140a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800140c:	2f78      	cmp	r7, #120	@ 0x78
 800140e:	4691      	mov	r9, r2
 8001410:	4680      	mov	r8, r0
 8001412:	460c      	mov	r4, r1
 8001414:	469a      	mov	sl, r3
 8001416:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800141a:	d807      	bhi.n	800142c <_printf_i+0x28>
 800141c:	2f62      	cmp	r7, #98	@ 0x62
 800141e:	d80a      	bhi.n	8001436 <_printf_i+0x32>
 8001420:	2f00      	cmp	r7, #0
 8001422:	f000 80d2 	beq.w	80015ca <_printf_i+0x1c6>
 8001426:	2f58      	cmp	r7, #88	@ 0x58
 8001428:	f000 80b9 	beq.w	800159e <_printf_i+0x19a>
 800142c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001430:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001434:	e03a      	b.n	80014ac <_printf_i+0xa8>
 8001436:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800143a:	2b15      	cmp	r3, #21
 800143c:	d8f6      	bhi.n	800142c <_printf_i+0x28>
 800143e:	a101      	add	r1, pc, #4	@ (adr r1, 8001444 <_printf_i+0x40>)
 8001440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001444:	0800149d 	.word	0x0800149d
 8001448:	080014b1 	.word	0x080014b1
 800144c:	0800142d 	.word	0x0800142d
 8001450:	0800142d 	.word	0x0800142d
 8001454:	0800142d 	.word	0x0800142d
 8001458:	0800142d 	.word	0x0800142d
 800145c:	080014b1 	.word	0x080014b1
 8001460:	0800142d 	.word	0x0800142d
 8001464:	0800142d 	.word	0x0800142d
 8001468:	0800142d 	.word	0x0800142d
 800146c:	0800142d 	.word	0x0800142d
 8001470:	080015b1 	.word	0x080015b1
 8001474:	080014db 	.word	0x080014db
 8001478:	0800156b 	.word	0x0800156b
 800147c:	0800142d 	.word	0x0800142d
 8001480:	0800142d 	.word	0x0800142d
 8001484:	080015d3 	.word	0x080015d3
 8001488:	0800142d 	.word	0x0800142d
 800148c:	080014db 	.word	0x080014db
 8001490:	0800142d 	.word	0x0800142d
 8001494:	0800142d 	.word	0x0800142d
 8001498:	08001573 	.word	0x08001573
 800149c:	6833      	ldr	r3, [r6, #0]
 800149e:	1d1a      	adds	r2, r3, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6032      	str	r2, [r6, #0]
 80014a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80014ac:	2301      	movs	r3, #1
 80014ae:	e09d      	b.n	80015ec <_printf_i+0x1e8>
 80014b0:	6833      	ldr	r3, [r6, #0]
 80014b2:	6820      	ldr	r0, [r4, #0]
 80014b4:	1d19      	adds	r1, r3, #4
 80014b6:	6031      	str	r1, [r6, #0]
 80014b8:	0606      	lsls	r6, r0, #24
 80014ba:	d501      	bpl.n	80014c0 <_printf_i+0xbc>
 80014bc:	681d      	ldr	r5, [r3, #0]
 80014be:	e003      	b.n	80014c8 <_printf_i+0xc4>
 80014c0:	0645      	lsls	r5, r0, #25
 80014c2:	d5fb      	bpl.n	80014bc <_printf_i+0xb8>
 80014c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80014c8:	2d00      	cmp	r5, #0
 80014ca:	da03      	bge.n	80014d4 <_printf_i+0xd0>
 80014cc:	232d      	movs	r3, #45	@ 0x2d
 80014ce:	426d      	negs	r5, r5
 80014d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80014d4:	4859      	ldr	r0, [pc, #356]	@ (800163c <_printf_i+0x238>)
 80014d6:	230a      	movs	r3, #10
 80014d8:	e011      	b.n	80014fe <_printf_i+0xfa>
 80014da:	6821      	ldr	r1, [r4, #0]
 80014dc:	6833      	ldr	r3, [r6, #0]
 80014de:	0608      	lsls	r0, r1, #24
 80014e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80014e4:	d402      	bmi.n	80014ec <_printf_i+0xe8>
 80014e6:	0649      	lsls	r1, r1, #25
 80014e8:	bf48      	it	mi
 80014ea:	b2ad      	uxthmi	r5, r5
 80014ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80014ee:	4853      	ldr	r0, [pc, #332]	@ (800163c <_printf_i+0x238>)
 80014f0:	6033      	str	r3, [r6, #0]
 80014f2:	bf14      	ite	ne
 80014f4:	230a      	movne	r3, #10
 80014f6:	2308      	moveq	r3, #8
 80014f8:	2100      	movs	r1, #0
 80014fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80014fe:	6866      	ldr	r6, [r4, #4]
 8001500:	60a6      	str	r6, [r4, #8]
 8001502:	2e00      	cmp	r6, #0
 8001504:	bfa2      	ittt	ge
 8001506:	6821      	ldrge	r1, [r4, #0]
 8001508:	f021 0104 	bicge.w	r1, r1, #4
 800150c:	6021      	strge	r1, [r4, #0]
 800150e:	b90d      	cbnz	r5, 8001514 <_printf_i+0x110>
 8001510:	2e00      	cmp	r6, #0
 8001512:	d04b      	beq.n	80015ac <_printf_i+0x1a8>
 8001514:	4616      	mov	r6, r2
 8001516:	fbb5 f1f3 	udiv	r1, r5, r3
 800151a:	fb03 5711 	mls	r7, r3, r1, r5
 800151e:	5dc7      	ldrb	r7, [r0, r7]
 8001520:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001524:	462f      	mov	r7, r5
 8001526:	42bb      	cmp	r3, r7
 8001528:	460d      	mov	r5, r1
 800152a:	d9f4      	bls.n	8001516 <_printf_i+0x112>
 800152c:	2b08      	cmp	r3, #8
 800152e:	d10b      	bne.n	8001548 <_printf_i+0x144>
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	07df      	lsls	r7, r3, #31
 8001534:	d508      	bpl.n	8001548 <_printf_i+0x144>
 8001536:	6923      	ldr	r3, [r4, #16]
 8001538:	6861      	ldr	r1, [r4, #4]
 800153a:	4299      	cmp	r1, r3
 800153c:	bfde      	ittt	le
 800153e:	2330      	movle	r3, #48	@ 0x30
 8001540:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001544:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001548:	1b92      	subs	r2, r2, r6
 800154a:	6122      	str	r2, [r4, #16]
 800154c:	f8cd a000 	str.w	sl, [sp]
 8001550:	464b      	mov	r3, r9
 8001552:	aa03      	add	r2, sp, #12
 8001554:	4621      	mov	r1, r4
 8001556:	4640      	mov	r0, r8
 8001558:	f7ff fee6 	bl	8001328 <_printf_common>
 800155c:	3001      	adds	r0, #1
 800155e:	d14a      	bne.n	80015f6 <_printf_i+0x1f2>
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	b004      	add	sp, #16
 8001566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	f043 0320 	orr.w	r3, r3, #32
 8001570:	6023      	str	r3, [r4, #0]
 8001572:	4833      	ldr	r0, [pc, #204]	@ (8001640 <_printf_i+0x23c>)
 8001574:	2778      	movs	r7, #120	@ 0x78
 8001576:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	6831      	ldr	r1, [r6, #0]
 800157e:	061f      	lsls	r7, r3, #24
 8001580:	f851 5b04 	ldr.w	r5, [r1], #4
 8001584:	d402      	bmi.n	800158c <_printf_i+0x188>
 8001586:	065f      	lsls	r7, r3, #25
 8001588:	bf48      	it	mi
 800158a:	b2ad      	uxthmi	r5, r5
 800158c:	6031      	str	r1, [r6, #0]
 800158e:	07d9      	lsls	r1, r3, #31
 8001590:	bf44      	itt	mi
 8001592:	f043 0320 	orrmi.w	r3, r3, #32
 8001596:	6023      	strmi	r3, [r4, #0]
 8001598:	b11d      	cbz	r5, 80015a2 <_printf_i+0x19e>
 800159a:	2310      	movs	r3, #16
 800159c:	e7ac      	b.n	80014f8 <_printf_i+0xf4>
 800159e:	4827      	ldr	r0, [pc, #156]	@ (800163c <_printf_i+0x238>)
 80015a0:	e7e9      	b.n	8001576 <_printf_i+0x172>
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	f023 0320 	bic.w	r3, r3, #32
 80015a8:	6023      	str	r3, [r4, #0]
 80015aa:	e7f6      	b.n	800159a <_printf_i+0x196>
 80015ac:	4616      	mov	r6, r2
 80015ae:	e7bd      	b.n	800152c <_printf_i+0x128>
 80015b0:	6833      	ldr	r3, [r6, #0]
 80015b2:	6825      	ldr	r5, [r4, #0]
 80015b4:	6961      	ldr	r1, [r4, #20]
 80015b6:	1d18      	adds	r0, r3, #4
 80015b8:	6030      	str	r0, [r6, #0]
 80015ba:	062e      	lsls	r6, r5, #24
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	d501      	bpl.n	80015c4 <_printf_i+0x1c0>
 80015c0:	6019      	str	r1, [r3, #0]
 80015c2:	e002      	b.n	80015ca <_printf_i+0x1c6>
 80015c4:	0668      	lsls	r0, r5, #25
 80015c6:	d5fb      	bpl.n	80015c0 <_printf_i+0x1bc>
 80015c8:	8019      	strh	r1, [r3, #0]
 80015ca:	2300      	movs	r3, #0
 80015cc:	6123      	str	r3, [r4, #16]
 80015ce:	4616      	mov	r6, r2
 80015d0:	e7bc      	b.n	800154c <_printf_i+0x148>
 80015d2:	6833      	ldr	r3, [r6, #0]
 80015d4:	1d1a      	adds	r2, r3, #4
 80015d6:	6032      	str	r2, [r6, #0]
 80015d8:	681e      	ldr	r6, [r3, #0]
 80015da:	6862      	ldr	r2, [r4, #4]
 80015dc:	2100      	movs	r1, #0
 80015de:	4630      	mov	r0, r6
 80015e0:	f7fe fe16 	bl	8000210 <memchr>
 80015e4:	b108      	cbz	r0, 80015ea <_printf_i+0x1e6>
 80015e6:	1b80      	subs	r0, r0, r6
 80015e8:	6060      	str	r0, [r4, #4]
 80015ea:	6863      	ldr	r3, [r4, #4]
 80015ec:	6123      	str	r3, [r4, #16]
 80015ee:	2300      	movs	r3, #0
 80015f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015f4:	e7aa      	b.n	800154c <_printf_i+0x148>
 80015f6:	6923      	ldr	r3, [r4, #16]
 80015f8:	4632      	mov	r2, r6
 80015fa:	4649      	mov	r1, r9
 80015fc:	4640      	mov	r0, r8
 80015fe:	47d0      	blx	sl
 8001600:	3001      	adds	r0, #1
 8001602:	d0ad      	beq.n	8001560 <_printf_i+0x15c>
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	079b      	lsls	r3, r3, #30
 8001608:	d413      	bmi.n	8001632 <_printf_i+0x22e>
 800160a:	68e0      	ldr	r0, [r4, #12]
 800160c:	9b03      	ldr	r3, [sp, #12]
 800160e:	4298      	cmp	r0, r3
 8001610:	bfb8      	it	lt
 8001612:	4618      	movlt	r0, r3
 8001614:	e7a6      	b.n	8001564 <_printf_i+0x160>
 8001616:	2301      	movs	r3, #1
 8001618:	4632      	mov	r2, r6
 800161a:	4649      	mov	r1, r9
 800161c:	4640      	mov	r0, r8
 800161e:	47d0      	blx	sl
 8001620:	3001      	adds	r0, #1
 8001622:	d09d      	beq.n	8001560 <_printf_i+0x15c>
 8001624:	3501      	adds	r5, #1
 8001626:	68e3      	ldr	r3, [r4, #12]
 8001628:	9903      	ldr	r1, [sp, #12]
 800162a:	1a5b      	subs	r3, r3, r1
 800162c:	42ab      	cmp	r3, r5
 800162e:	dcf2      	bgt.n	8001616 <_printf_i+0x212>
 8001630:	e7eb      	b.n	800160a <_printf_i+0x206>
 8001632:	2500      	movs	r5, #0
 8001634:	f104 0619 	add.w	r6, r4, #25
 8001638:	e7f5      	b.n	8001626 <_printf_i+0x222>
 800163a:	bf00      	nop
 800163c:	080019dc 	.word	0x080019dc
 8001640:	080019ed 	.word	0x080019ed

08001644 <__sflush_r>:
 8001644:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800164c:	0716      	lsls	r6, r2, #28
 800164e:	4605      	mov	r5, r0
 8001650:	460c      	mov	r4, r1
 8001652:	d454      	bmi.n	80016fe <__sflush_r+0xba>
 8001654:	684b      	ldr	r3, [r1, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	dc02      	bgt.n	8001660 <__sflush_r+0x1c>
 800165a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800165c:	2b00      	cmp	r3, #0
 800165e:	dd48      	ble.n	80016f2 <__sflush_r+0xae>
 8001660:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001662:	2e00      	cmp	r6, #0
 8001664:	d045      	beq.n	80016f2 <__sflush_r+0xae>
 8001666:	2300      	movs	r3, #0
 8001668:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800166c:	682f      	ldr	r7, [r5, #0]
 800166e:	6a21      	ldr	r1, [r4, #32]
 8001670:	602b      	str	r3, [r5, #0]
 8001672:	d030      	beq.n	80016d6 <__sflush_r+0x92>
 8001674:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001676:	89a3      	ldrh	r3, [r4, #12]
 8001678:	0759      	lsls	r1, r3, #29
 800167a:	d505      	bpl.n	8001688 <__sflush_r+0x44>
 800167c:	6863      	ldr	r3, [r4, #4]
 800167e:	1ad2      	subs	r2, r2, r3
 8001680:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001682:	b10b      	cbz	r3, 8001688 <__sflush_r+0x44>
 8001684:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001686:	1ad2      	subs	r2, r2, r3
 8001688:	2300      	movs	r3, #0
 800168a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800168c:	6a21      	ldr	r1, [r4, #32]
 800168e:	4628      	mov	r0, r5
 8001690:	47b0      	blx	r6
 8001692:	1c43      	adds	r3, r0, #1
 8001694:	89a3      	ldrh	r3, [r4, #12]
 8001696:	d106      	bne.n	80016a6 <__sflush_r+0x62>
 8001698:	6829      	ldr	r1, [r5, #0]
 800169a:	291d      	cmp	r1, #29
 800169c:	d82b      	bhi.n	80016f6 <__sflush_r+0xb2>
 800169e:	4a2a      	ldr	r2, [pc, #168]	@ (8001748 <__sflush_r+0x104>)
 80016a0:	410a      	asrs	r2, r1
 80016a2:	07d6      	lsls	r6, r2, #31
 80016a4:	d427      	bmi.n	80016f6 <__sflush_r+0xb2>
 80016a6:	2200      	movs	r2, #0
 80016a8:	6062      	str	r2, [r4, #4]
 80016aa:	04d9      	lsls	r1, r3, #19
 80016ac:	6922      	ldr	r2, [r4, #16]
 80016ae:	6022      	str	r2, [r4, #0]
 80016b0:	d504      	bpl.n	80016bc <__sflush_r+0x78>
 80016b2:	1c42      	adds	r2, r0, #1
 80016b4:	d101      	bne.n	80016ba <__sflush_r+0x76>
 80016b6:	682b      	ldr	r3, [r5, #0]
 80016b8:	b903      	cbnz	r3, 80016bc <__sflush_r+0x78>
 80016ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80016bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80016be:	602f      	str	r7, [r5, #0]
 80016c0:	b1b9      	cbz	r1, 80016f2 <__sflush_r+0xae>
 80016c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80016c6:	4299      	cmp	r1, r3
 80016c8:	d002      	beq.n	80016d0 <__sflush_r+0x8c>
 80016ca:	4628      	mov	r0, r5
 80016cc:	f7ff fca0 	bl	8001010 <_free_r>
 80016d0:	2300      	movs	r3, #0
 80016d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80016d4:	e00d      	b.n	80016f2 <__sflush_r+0xae>
 80016d6:	2301      	movs	r3, #1
 80016d8:	4628      	mov	r0, r5
 80016da:	47b0      	blx	r6
 80016dc:	4602      	mov	r2, r0
 80016de:	1c50      	adds	r0, r2, #1
 80016e0:	d1c9      	bne.n	8001676 <__sflush_r+0x32>
 80016e2:	682b      	ldr	r3, [r5, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0c6      	beq.n	8001676 <__sflush_r+0x32>
 80016e8:	2b1d      	cmp	r3, #29
 80016ea:	d001      	beq.n	80016f0 <__sflush_r+0xac>
 80016ec:	2b16      	cmp	r3, #22
 80016ee:	d11e      	bne.n	800172e <__sflush_r+0xea>
 80016f0:	602f      	str	r7, [r5, #0]
 80016f2:	2000      	movs	r0, #0
 80016f4:	e022      	b.n	800173c <__sflush_r+0xf8>
 80016f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	e01b      	b.n	8001736 <__sflush_r+0xf2>
 80016fe:	690f      	ldr	r7, [r1, #16]
 8001700:	2f00      	cmp	r7, #0
 8001702:	d0f6      	beq.n	80016f2 <__sflush_r+0xae>
 8001704:	0793      	lsls	r3, r2, #30
 8001706:	680e      	ldr	r6, [r1, #0]
 8001708:	bf08      	it	eq
 800170a:	694b      	ldreq	r3, [r1, #20]
 800170c:	600f      	str	r7, [r1, #0]
 800170e:	bf18      	it	ne
 8001710:	2300      	movne	r3, #0
 8001712:	eba6 0807 	sub.w	r8, r6, r7
 8001716:	608b      	str	r3, [r1, #8]
 8001718:	f1b8 0f00 	cmp.w	r8, #0
 800171c:	dde9      	ble.n	80016f2 <__sflush_r+0xae>
 800171e:	6a21      	ldr	r1, [r4, #32]
 8001720:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001722:	4643      	mov	r3, r8
 8001724:	463a      	mov	r2, r7
 8001726:	4628      	mov	r0, r5
 8001728:	47b0      	blx	r6
 800172a:	2800      	cmp	r0, #0
 800172c:	dc08      	bgt.n	8001740 <__sflush_r+0xfc>
 800172e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001736:	81a3      	strh	r3, [r4, #12]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001740:	4407      	add	r7, r0
 8001742:	eba8 0800 	sub.w	r8, r8, r0
 8001746:	e7e7      	b.n	8001718 <__sflush_r+0xd4>
 8001748:	dfbffffe 	.word	0xdfbffffe

0800174c <_fflush_r>:
 800174c:	b538      	push	{r3, r4, r5, lr}
 800174e:	690b      	ldr	r3, [r1, #16]
 8001750:	4605      	mov	r5, r0
 8001752:	460c      	mov	r4, r1
 8001754:	b913      	cbnz	r3, 800175c <_fflush_r+0x10>
 8001756:	2500      	movs	r5, #0
 8001758:	4628      	mov	r0, r5
 800175a:	bd38      	pop	{r3, r4, r5, pc}
 800175c:	b118      	cbz	r0, 8001766 <_fflush_r+0x1a>
 800175e:	6a03      	ldr	r3, [r0, #32]
 8001760:	b90b      	cbnz	r3, 8001766 <_fflush_r+0x1a>
 8001762:	f7ff fa4b 	bl	8000bfc <__sinit>
 8001766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f3      	beq.n	8001756 <_fflush_r+0xa>
 800176e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001770:	07d0      	lsls	r0, r2, #31
 8001772:	d404      	bmi.n	800177e <_fflush_r+0x32>
 8001774:	0599      	lsls	r1, r3, #22
 8001776:	d402      	bmi.n	800177e <_fflush_r+0x32>
 8001778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800177a:	f7ff fc46 	bl	800100a <__retarget_lock_acquire_recursive>
 800177e:	4628      	mov	r0, r5
 8001780:	4621      	mov	r1, r4
 8001782:	f7ff ff5f 	bl	8001644 <__sflush_r>
 8001786:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001788:	07da      	lsls	r2, r3, #31
 800178a:	4605      	mov	r5, r0
 800178c:	d4e4      	bmi.n	8001758 <_fflush_r+0xc>
 800178e:	89a3      	ldrh	r3, [r4, #12]
 8001790:	059b      	lsls	r3, r3, #22
 8001792:	d4e1      	bmi.n	8001758 <_fflush_r+0xc>
 8001794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001796:	f7ff fc39 	bl	800100c <__retarget_lock_release_recursive>
 800179a:	e7dd      	b.n	8001758 <_fflush_r+0xc>

0800179c <__swhatbuf_r>:
 800179c:	b570      	push	{r4, r5, r6, lr}
 800179e:	460c      	mov	r4, r1
 80017a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017a4:	2900      	cmp	r1, #0
 80017a6:	b096      	sub	sp, #88	@ 0x58
 80017a8:	4615      	mov	r5, r2
 80017aa:	461e      	mov	r6, r3
 80017ac:	da0d      	bge.n	80017ca <__swhatbuf_r+0x2e>
 80017ae:	89a3      	ldrh	r3, [r4, #12]
 80017b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80017b4:	f04f 0100 	mov.w	r1, #0
 80017b8:	bf14      	ite	ne
 80017ba:	2340      	movne	r3, #64	@ 0x40
 80017bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80017c0:	2000      	movs	r0, #0
 80017c2:	6031      	str	r1, [r6, #0]
 80017c4:	602b      	str	r3, [r5, #0]
 80017c6:	b016      	add	sp, #88	@ 0x58
 80017c8:	bd70      	pop	{r4, r5, r6, pc}
 80017ca:	466a      	mov	r2, sp
 80017cc:	f000 f848 	bl	8001860 <_fstat_r>
 80017d0:	2800      	cmp	r0, #0
 80017d2:	dbec      	blt.n	80017ae <__swhatbuf_r+0x12>
 80017d4:	9901      	ldr	r1, [sp, #4]
 80017d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80017da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80017de:	4259      	negs	r1, r3
 80017e0:	4159      	adcs	r1, r3
 80017e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017e6:	e7eb      	b.n	80017c0 <__swhatbuf_r+0x24>

080017e8 <__smakebuf_r>:
 80017e8:	898b      	ldrh	r3, [r1, #12]
 80017ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017ec:	079d      	lsls	r5, r3, #30
 80017ee:	4606      	mov	r6, r0
 80017f0:	460c      	mov	r4, r1
 80017f2:	d507      	bpl.n	8001804 <__smakebuf_r+0x1c>
 80017f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80017f8:	6023      	str	r3, [r4, #0]
 80017fa:	6123      	str	r3, [r4, #16]
 80017fc:	2301      	movs	r3, #1
 80017fe:	6163      	str	r3, [r4, #20]
 8001800:	b003      	add	sp, #12
 8001802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001804:	ab01      	add	r3, sp, #4
 8001806:	466a      	mov	r2, sp
 8001808:	f7ff ffc8 	bl	800179c <__swhatbuf_r>
 800180c:	9f00      	ldr	r7, [sp, #0]
 800180e:	4605      	mov	r5, r0
 8001810:	4639      	mov	r1, r7
 8001812:	4630      	mov	r0, r6
 8001814:	f7ff f8da 	bl	80009cc <_malloc_r>
 8001818:	b948      	cbnz	r0, 800182e <__smakebuf_r+0x46>
 800181a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800181e:	059a      	lsls	r2, r3, #22
 8001820:	d4ee      	bmi.n	8001800 <__smakebuf_r+0x18>
 8001822:	f023 0303 	bic.w	r3, r3, #3
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	81a3      	strh	r3, [r4, #12]
 800182c:	e7e2      	b.n	80017f4 <__smakebuf_r+0xc>
 800182e:	89a3      	ldrh	r3, [r4, #12]
 8001830:	6020      	str	r0, [r4, #0]
 8001832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001836:	81a3      	strh	r3, [r4, #12]
 8001838:	9b01      	ldr	r3, [sp, #4]
 800183a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800183e:	b15b      	cbz	r3, 8001858 <__smakebuf_r+0x70>
 8001840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001844:	4630      	mov	r0, r6
 8001846:	f000 f81d 	bl	8001884 <_isatty_r>
 800184a:	b128      	cbz	r0, 8001858 <__smakebuf_r+0x70>
 800184c:	89a3      	ldrh	r3, [r4, #12]
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	81a3      	strh	r3, [r4, #12]
 8001858:	89a3      	ldrh	r3, [r4, #12]
 800185a:	431d      	orrs	r5, r3
 800185c:	81a5      	strh	r5, [r4, #12]
 800185e:	e7cf      	b.n	8001800 <__smakebuf_r+0x18>

08001860 <_fstat_r>:
 8001860:	b538      	push	{r3, r4, r5, lr}
 8001862:	4d07      	ldr	r5, [pc, #28]	@ (8001880 <_fstat_r+0x20>)
 8001864:	2300      	movs	r3, #0
 8001866:	4604      	mov	r4, r0
 8001868:	4608      	mov	r0, r1
 800186a:	4611      	mov	r1, r2
 800186c:	602b      	str	r3, [r5, #0]
 800186e:	f7fe ff20 	bl	80006b2 <_fstat>
 8001872:	1c43      	adds	r3, r0, #1
 8001874:	d102      	bne.n	800187c <_fstat_r+0x1c>
 8001876:	682b      	ldr	r3, [r5, #0]
 8001878:	b103      	cbz	r3, 800187c <_fstat_r+0x1c>
 800187a:	6023      	str	r3, [r4, #0]
 800187c:	bd38      	pop	{r3, r4, r5, pc}
 800187e:	bf00      	nop
 8001880:	200009d4 	.word	0x200009d4

08001884 <_isatty_r>:
 8001884:	b538      	push	{r3, r4, r5, lr}
 8001886:	4d06      	ldr	r5, [pc, #24]	@ (80018a0 <_isatty_r+0x1c>)
 8001888:	2300      	movs	r3, #0
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	602b      	str	r3, [r5, #0]
 8001890:	f7fe ff1f 	bl	80006d2 <_isatty>
 8001894:	1c43      	adds	r3, r0, #1
 8001896:	d102      	bne.n	800189e <_isatty_r+0x1a>
 8001898:	682b      	ldr	r3, [r5, #0]
 800189a:	b103      	cbz	r3, 800189e <_isatty_r+0x1a>
 800189c:	6023      	str	r3, [r4, #0]
 800189e:	bd38      	pop	{r3, r4, r5, pc}
 80018a0:	200009d4 	.word	0x200009d4

080018a4 <_init>:
 80018a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a6:	bf00      	nop
 80018a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018aa:	bc08      	pop	{r3}
 80018ac:	469e      	mov	lr, r3
 80018ae:	4770      	bx	lr

080018b0 <_fini>:
 80018b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b2:	bf00      	nop
 80018b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018b6:	bc08      	pop	{r3}
 80018b8:	469e      	mov	lr, r3
 80018ba:	4770      	bx	lr
