
TP_C_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001414  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080015e4  080015e4  000025e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001648  08001648  0000306c  2**0
                  CONTENTS
  4 .ARM          00000008  08001648  08001648  00002648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001650  08001650  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001650  08001650  00002650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001654  08001654  00002654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08001658  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000970  2000006c  080016c4  0000306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  080016c4  000039dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000275b  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bf1  00000000  00000000  000057f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000268  00000000  00000000  000063e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000197  00000000  00000000  00006650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad29  00000000  00000000  000067e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003d50  00000000  00000000  00021510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ee8  00000000  00000000  00025260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6148  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e8c  00000000  00000000  000b618c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b7018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080015cc 	.word	0x080015cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080015cc 	.word	0x080015cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <CreerFeuille>:
#include <stdint.h>
#include "Arbre.h"

void CreerFeuille(struct noeud * arbre[256], uint32_t tab[256]){
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	uint32_t j=0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i<255;i++ ){
 80002be:	2300      	movs	r3, #0
 80002c0:	72fb      	strb	r3, [r7, #11]
 80002c2:	e027      	b.n	8000314 <CreerFeuille+0x64>
		if (tab[i] != 0){
 80002c4:	7afb      	ldrb	r3, [r7, #11]
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	4413      	add	r3, r2
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d01d      	beq.n	800030e <CreerFeuille+0x5e>
			  arbre[j] = malloc(sizeof(struct noeud));
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	18d4      	adds	r4, r2, r3
 80002da:	2018      	movs	r0, #24
 80002dc:	f000 fa3e 	bl	800075c <malloc>
 80002e0:	4603      	mov	r3, r0
 80002e2:	6023      	str	r3, [r4, #0]
			  arbre[j]->occurence = tab[i];
 80002e4:	7afb      	ldrb	r3, [r7, #11]
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	683a      	ldr	r2, [r7, #0]
 80002ea:	441a      	add	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	6879      	ldr	r1, [r7, #4]
 80002f2:	440b      	add	r3, r1
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	6812      	ldr	r2, [r2, #0]
 80002f8:	605a      	str	r2, [r3, #4]
			  arbre[j]->c = (char)i;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	4413      	add	r3, r2
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	7afa      	ldrb	r2, [r7, #11]
 8000306:	701a      	strb	r2, [r3, #0]
			  j++;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	3301      	adds	r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i<255;i++ ){
 800030e:	7afb      	ldrb	r3, [r7, #11]
 8000310:	3301      	adds	r3, #1
 8000312:	72fb      	strb	r3, [r7, #11]
 8000314:	7afb      	ldrb	r3, [r7, #11]
 8000316:	2bff      	cmp	r3, #255	@ 0xff
 8000318:	d1d4      	bne.n	80002c4 <CreerFeuille+0x14>
		}
	}
}
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	3714      	adds	r7, #20
 8000320:	46bd      	mov	sp, r7
 8000322:	bd90      	pop	{r4, r7, pc}

08000324 <GPIO_Init>:
#include <stdint.h>
#include <stm32f446xx.h>
#include "main.h"
#include "gpio.h"

void GPIO_Init(void){
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8000328:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <GPIO_Init+0x30>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032c:	4a09      	ldr	r2, [pc, #36]	@ (8000354 <GPIO_Init+0x30>)
 800032e:	f043 0305 	orr.w	r3, r3, #5
 8000332:	6313      	str	r3, [r2, #48]	@ 0x30

	/* GPIO Init */
	GPIOA->MODER |= OUTPUT_MODE <<10;		// PA5 Output LED
 8000334:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <GPIO_Init+0x34>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a07      	ldr	r2, [pc, #28]	@ (8000358 <GPIO_Init+0x34>)
 800033a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800033e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= INPUT_MODE	<< 26;		// PC13 Input Push-Button
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <GPIO_Init+0x38>)
 8000342:	4a06      	ldr	r2, [pc, #24]	@ (800035c <GPIO_Init+0x38>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	6013      	str	r3, [r2, #0]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800
 8000358:	40020000 	.word	0x40020000
 800035c:	40020800 	.word	0x40020800

08000360 <SysTick_Handler>:
#include "interrupt.h"

extern uint32_t ticks;

// Interrupt Handler for SysTick Interrupt
void SysTick_Handler(void){
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
	ticks++;
 8000364:	4b04      	ldr	r3, [pc, #16]	@ (8000378 <SysTick_Handler+0x18>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	3301      	adds	r3, #1
 800036a:	4a03      	ldr	r2, [pc, #12]	@ (8000378 <SysTick_Handler+0x18>)
 800036c:	6013      	str	r3, [r2, #0]
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	2000088c 	.word	0x2000088c

0800037c <main>:
struct noeud* arbreHuffman[256];

uint32_t tabCaractere[256];

int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af02      	add	r7, sp, #8
	GPIO_Init();
 8000382:	f7ff ffcf 	bl	8000324 <GPIO_Init>
	USART2_Init();
 8000386:	f000 f943 	bl	8000610 <USART2_Init>
	SYSTICK_Init();
 800038a:	f000 f92f 	bl	80005ec <SYSTICK_Init>
	occurance(texte, tabCaractere);
 800038e:	490d      	ldr	r1, [pc, #52]	@ (80003c4 <main+0x48>)
 8000390:	480d      	ldr	r0, [pc, #52]	@ (80003c8 <main+0x4c>)
 8000392:	f000 f81f 	bl	80003d4 <occurance>
	CreerFeuille(arbreHuffman, tabCaractere);
 8000396:	490b      	ldr	r1, [pc, #44]	@ (80003c4 <main+0x48>)
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <main+0x50>)
 800039a:	f7ff ff89 	bl	80002b0 <CreerFeuille>
	while(1){
	printf("occurance de a = %ld, b= %ld, c=%ld, d=%ld \r\n", arbreHuffman[0]->occurence, arbreHuffman[1]->occurence, arbreHuffman[2]->occurence, arbreHuffman[3]->occurence);
 800039e:	4b0b      	ldr	r3, [pc, #44]	@ (80003cc <main+0x50>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	6859      	ldr	r1, [r3, #4]
 80003a4:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <main+0x50>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	685a      	ldr	r2, [r3, #4]
 80003aa:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <main+0x50>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	6858      	ldr	r0, [r3, #4]
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <main+0x50>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	4603      	mov	r3, r0
 80003ba:	4805      	ldr	r0, [pc, #20]	@ (80003d0 <main+0x54>)
 80003bc:	f000 fb46 	bl	8000a4c <iprintf>
 80003c0:	e7ed      	b.n	800039e <main+0x22>
 80003c2:	bf00      	nop
 80003c4:	20000088 	.word	0x20000088
 80003c8:	20000000 	.word	0x20000000
 80003cc:	20000488 	.word	0x20000488
 80003d0:	080015e4 	.word	0x080015e4

080003d4 <occurance>:
#include "occurence.h"
#include <stdint.h>

void occurance (uint8_t* chaine, uint32_t tab[256]){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
	while((*chaine) != ('\0')){
 80003de:	e00a      	b.n	80003f6 <occurance+0x22>
		tab[*chaine] ++;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	683a      	ldr	r2, [r7, #0]
 80003e8:	4413      	add	r3, r2
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	3201      	adds	r2, #1
 80003ee:	601a      	str	r2, [r3, #0]
		chaine ++;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	3301      	adds	r3, #1
 80003f4:	607b      	str	r3, [r7, #4]
	while((*chaine) != ('\0')){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d1f0      	bne.n	80003e0 <occurance+0xc>
	}
}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	e00a      	b.n	8000434 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800041e:	f000 f96b 	bl	80006f8 <__io_getchar>
 8000422:	4601      	mov	r1, r0
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	1c5a      	adds	r2, r3, #1
 8000428:	60ba      	str	r2, [r7, #8]
 800042a:	b2ca      	uxtb	r2, r1
 800042c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	3301      	adds	r3, #1
 8000432:	617b      	str	r3, [r7, #20]
 8000434:	697a      	ldr	r2, [r7, #20]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	429a      	cmp	r2, r3
 800043a:	dbf0      	blt.n	800041e <_read+0x12>
	}

return len;
 800043c:	687b      	ldr	r3, [r7, #4]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b086      	sub	sp, #24
 800044a:	af00      	add	r7, sp, #0
 800044c:	60f8      	str	r0, [r7, #12]
 800044e:	60b9      	str	r1, [r7, #8]
 8000450:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
 8000456:	e009      	b.n	800046c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	1c5a      	adds	r2, r3, #1
 800045c:	60ba      	str	r2, [r7, #8]
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4618      	mov	r0, r3
 8000462:	f000 f93b 	bl	80006dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	3301      	adds	r3, #1
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	697a      	ldr	r2, [r7, #20]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	429a      	cmp	r2, r3
 8000472:	dbf1      	blt.n	8000458 <_write+0x12>
	}
	return len;
 8000474:	687b      	ldr	r3, [r7, #4]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3718      	adds	r7, #24
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <_close>:

int _close(int file)
{
 800047e:	b480      	push	{r7}
 8000480:	b083      	sub	sp, #12
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
	return -1;
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
}
 800048a:	4618      	mov	r0, r3
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000496:	b480      	push	{r7}
 8000498:	b083      	sub	sp, #12
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
 800049e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004a6:	605a      	str	r2, [r3, #4]
	return 0;
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <_isatty>:

int _isatty(int file)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
	return 1;
 80004be:	2301      	movs	r3, #1
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	return 0;
 80004d8:	2300      	movs	r3, #0
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
	...

080004e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004f0:	4a14      	ldr	r2, [pc, #80]	@ (8000544 <_sbrk+0x5c>)
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <_sbrk+0x60>)
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004fc:	4b13      	ldr	r3, [pc, #76]	@ (800054c <_sbrk+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d102      	bne.n	800050a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000504:	4b11      	ldr	r3, [pc, #68]	@ (800054c <_sbrk+0x64>)
 8000506:	4a12      	ldr	r2, [pc, #72]	@ (8000550 <_sbrk+0x68>)
 8000508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800050a:	4b10      	ldr	r3, [pc, #64]	@ (800054c <_sbrk+0x64>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	693a      	ldr	r2, [r7, #16]
 8000514:	429a      	cmp	r2, r3
 8000516:	d207      	bcs.n	8000528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000518:	f000 fb4c 	bl	8000bb4 <__errno>
 800051c:	4603      	mov	r3, r0
 800051e:	220c      	movs	r2, #12
 8000520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
 8000526:	e009      	b.n	800053c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <_sbrk+0x64>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <_sbrk+0x64>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	4a05      	ldr	r2, [pc, #20]	@ (800054c <_sbrk+0x64>)
 8000538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20020000 	.word	0x20020000
 8000548:	00000400 	.word	0x00000400
 800054c:	20000888 	.word	0x20000888
 8000550:	200009e0 	.word	0x200009e0

08000554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db0a      	blt.n	800057e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2da      	uxtb	r2, r3
 800056c:	490c      	ldr	r1, [pc, #48]	@ (80005a0 <__NVIC_SetPriority+0x4c>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	440b      	add	r3, r1
 8000578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800057c:	e00a      	b.n	8000594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4908      	ldr	r1, [pc, #32]	@ (80005a4 <__NVIC_SetPriority+0x50>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	3b04      	subs	r3, #4
 800058c:	0112      	lsls	r2, r2, #4
 800058e:	b2d2      	uxtb	r2, r2
 8000590:	440b      	add	r3, r1
 8000592:	761a      	strb	r2, [r3, #24]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000e100 	.word	0xe000e100
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80005b8:	d301      	bcc.n	80005be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ba:	2301      	movs	r3, #1
 80005bc:	e00f      	b.n	80005de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005be:	4a0a      	ldr	r2, [pc, #40]	@ (80005e8 <SysTick_Config+0x40>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005c6:	210f      	movs	r1, #15
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f7ff ffc2 	bl	8000554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d0:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <SysTick_Config+0x40>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005d6:	4b04      	ldr	r3, [pc, #16]	@ (80005e8 <SysTick_Config+0x40>)
 80005d8:	2207      	movs	r2, #7
 80005da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	e000e010 	.word	0xe000e010

080005ec <SYSTICK_Init>:

//////////////////////////////////////////////
////////////// SYSTICK TIMER /////////////////
//////////////////////////////////////////////

void SYSTICK_Init(void){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <SYSTICK_Init+0x1c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a05      	ldr	r2, [pc, #20]	@ (800060c <SYSTICK_Init+0x20>)
 80005f6:	fba2 2303 	umull	r2, r3, r2, r3
 80005fa:	099b      	lsrs	r3, r3, #6
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ffd3 	bl	80005a8 <SysTick_Config>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000000c 	.word	0x2000000c
 800060c:	10624dd3 	.word	0x10624dd3

08000610 <USART2_Init>:
#include <stm32f446xx.h>
#include "main.h"
#include "usart.h"


void USART2_Init(void){
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;			// ABP1
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <USART2_Init+0x68>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a17      	ldr	r2, [pc, #92]	@ (8000678 <USART2_Init+0x68>)
 800061a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
	USART2->CR1 |= USART_CR1_UE;
 8000620:	4b16      	ldr	r3, [pc, #88]	@ (800067c <USART2_Init+0x6c>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	4a15      	ldr	r2, [pc, #84]	@ (800067c <USART2_Init+0x6c>)
 8000626:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800062a:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 800062c:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <USART2_Init+0x70>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <USART2_Init+0x70>)
 8000632:	f043 0320 	orr.w	r3, r3, #32
 8000636:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <USART2_Init+0x70>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a10      	ldr	r2, [pc, #64]	@ (8000680 <USART2_Init+0x70>)
 800063e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000642:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 8000644:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <USART2_Init+0x70>)
 8000646:	6a1b      	ldr	r3, [r3, #32]
 8000648:	4a0d      	ldr	r2, [pc, #52]	@ (8000680 <USART2_Init+0x70>)
 800064a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800064e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 8000650:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <USART2_Init+0x70>)
 8000652:	6a1b      	ldr	r3, [r3, #32]
 8000654:	4a0a      	ldr	r2, [pc, #40]	@ (8000680 <USART2_Init+0x70>)
 8000656:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800065a:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <USART2_Init+0x6c>)
 800065e:	228b      	movs	r2, #139	@ 0x8b
 8000660:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <USART2_Init+0x6c>)
 8000664:	68db      	ldr	r3, [r3, #12]
 8000666:	4a05      	ldr	r2, [pc, #20]	@ (800067c <USART2_Init+0x6c>)
 8000668:	f043 030c 	orr.w	r3, r3, #12
 800066c:	60d3      	str	r3, [r2, #12]
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40023800 	.word	0x40023800
 800067c:	40004400 	.word	0x40004400
 8000680:	40020000 	.word	0x40020000

08000684 <USART2_TransmitChar>:


void USART2_TransmitChar(uint8_t data){
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	USART2->DR = data;
 800068e:	4a08      	ldr	r2, [pc, #32]	@ (80006b0 <USART2_TransmitChar+0x2c>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	6053      	str	r3, [r2, #4]
	while( (USART2->SR & USART_SR_TXE)==0 );
 8000694:	bf00      	nop
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <USART2_TransmitChar+0x2c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f9      	beq.n	8000696 <USART2_TransmitChar+0x12>
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	40004400 	.word	0x40004400

080006b4 <USART2_ReceiveChar>:


uint8_t USART2_ReceiveChar(void){
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	while( (USART2->SR & USART_SR_RXNE)==0 );
 80006b8:	bf00      	nop
 80006ba:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <USART2_ReceiveChar+0x24>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f003 0320 	and.w	r3, r3, #32
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0f9      	beq.n	80006ba <USART2_ReceiveChar+0x6>
	return USART2->DR;
 80006c6:	4b04      	ldr	r3, [pc, #16]	@ (80006d8 <USART2_ReceiveChar+0x24>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	b2db      	uxtb	r3, r3

}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40004400 	.word	0x40004400

080006dc <__io_putchar>:
#include "util.h"
#include "usart.h"


/* Send on USART2 PA2*/
int __io_putchar(int ch){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	USART2_TransmitChar(ch);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffcb 	bl	8000684 <USART2_TransmitChar>
	return 0;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <__io_getchar>:

/* Receive on USART2 PA3 */
int __io_getchar(void){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	return USART2_ReceiveChar();
 80006fc:	f7ff ffda 	bl	80006b4 <USART2_ReceiveChar>
 8000700:	4603      	mov	r3, r0
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000708:	480d      	ldr	r0, [pc, #52]	@ (8000740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800070a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800070c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <LoopForever+0x6>)
  ldr r1, =_edata
 8000712:	490d      	ldr	r1, [pc, #52]	@ (8000748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000714:	4a0d      	ldr	r2, [pc, #52]	@ (800074c <LoopForever+0xe>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000718:	e002      	b.n	8000720 <LoopCopyDataInit>

0800071a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800071c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071e:	3304      	adds	r3, #4

08000720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000724:	d3f9      	bcc.n	800071a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000726:	4a0a      	ldr	r2, [pc, #40]	@ (8000750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000728:	4c0a      	ldr	r4, [pc, #40]	@ (8000754 <LoopForever+0x16>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800072c:	e001      	b.n	8000732 <LoopFillZerobss>

0800072e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000730:	3204      	adds	r2, #4

08000732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000734:	d3fb      	bcc.n	800072e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000736:	f000 fa43 	bl	8000bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073a:	f7ff fe1f 	bl	800037c <main>

0800073e <LoopForever>:

LoopForever:
  b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   r0, =_estack
 8000740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800074c:	08001658 	.word	0x08001658
  ldr r2, =_sbss
 8000750:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000754:	200009dc 	.word	0x200009dc

08000758 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC_IRQHandler>
	...

0800075c <malloc>:
 800075c:	4b02      	ldr	r3, [pc, #8]	@ (8000768 <malloc+0xc>)
 800075e:	4601      	mov	r1, r0
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	f000 b825 	b.w	80007b0 <_malloc_r>
 8000766:	bf00      	nop
 8000768:	2000001c 	.word	0x2000001c

0800076c <sbrk_aligned>:
 800076c:	b570      	push	{r4, r5, r6, lr}
 800076e:	4e0f      	ldr	r6, [pc, #60]	@ (80007ac <sbrk_aligned+0x40>)
 8000770:	460c      	mov	r4, r1
 8000772:	6831      	ldr	r1, [r6, #0]
 8000774:	4605      	mov	r5, r0
 8000776:	b911      	cbnz	r1, 800077e <sbrk_aligned+0x12>
 8000778:	f000 f9fa 	bl	8000b70 <_sbrk_r>
 800077c:	6030      	str	r0, [r6, #0]
 800077e:	4621      	mov	r1, r4
 8000780:	4628      	mov	r0, r5
 8000782:	f000 f9f5 	bl	8000b70 <_sbrk_r>
 8000786:	1c43      	adds	r3, r0, #1
 8000788:	d103      	bne.n	8000792 <sbrk_aligned+0x26>
 800078a:	f04f 34ff 	mov.w	r4, #4294967295
 800078e:	4620      	mov	r0, r4
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	1cc4      	adds	r4, r0, #3
 8000794:	f024 0403 	bic.w	r4, r4, #3
 8000798:	42a0      	cmp	r0, r4
 800079a:	d0f8      	beq.n	800078e <sbrk_aligned+0x22>
 800079c:	1a21      	subs	r1, r4, r0
 800079e:	4628      	mov	r0, r5
 80007a0:	f000 f9e6 	bl	8000b70 <_sbrk_r>
 80007a4:	3001      	adds	r0, #1
 80007a6:	d1f2      	bne.n	800078e <sbrk_aligned+0x22>
 80007a8:	e7ef      	b.n	800078a <sbrk_aligned+0x1e>
 80007aa:	bf00      	nop
 80007ac:	20000890 	.word	0x20000890

080007b0 <_malloc_r>:
 80007b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007b4:	1ccd      	adds	r5, r1, #3
 80007b6:	f025 0503 	bic.w	r5, r5, #3
 80007ba:	3508      	adds	r5, #8
 80007bc:	2d0c      	cmp	r5, #12
 80007be:	bf38      	it	cc
 80007c0:	250c      	movcc	r5, #12
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	4606      	mov	r6, r0
 80007c6:	db01      	blt.n	80007cc <_malloc_r+0x1c>
 80007c8:	42a9      	cmp	r1, r5
 80007ca:	d904      	bls.n	80007d6 <_malloc_r+0x26>
 80007cc:	230c      	movs	r3, #12
 80007ce:	6033      	str	r3, [r6, #0]
 80007d0:	2000      	movs	r0, #0
 80007d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80008ac <_malloc_r+0xfc>
 80007da:	f000 f869 	bl	80008b0 <__malloc_lock>
 80007de:	f8d8 3000 	ldr.w	r3, [r8]
 80007e2:	461c      	mov	r4, r3
 80007e4:	bb44      	cbnz	r4, 8000838 <_malloc_r+0x88>
 80007e6:	4629      	mov	r1, r5
 80007e8:	4630      	mov	r0, r6
 80007ea:	f7ff ffbf 	bl	800076c <sbrk_aligned>
 80007ee:	1c43      	adds	r3, r0, #1
 80007f0:	4604      	mov	r4, r0
 80007f2:	d158      	bne.n	80008a6 <_malloc_r+0xf6>
 80007f4:	f8d8 4000 	ldr.w	r4, [r8]
 80007f8:	4627      	mov	r7, r4
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	d143      	bne.n	8000886 <_malloc_r+0xd6>
 80007fe:	2c00      	cmp	r4, #0
 8000800:	d04b      	beq.n	800089a <_malloc_r+0xea>
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	4639      	mov	r1, r7
 8000806:	4630      	mov	r0, r6
 8000808:	eb04 0903 	add.w	r9, r4, r3
 800080c:	f000 f9b0 	bl	8000b70 <_sbrk_r>
 8000810:	4581      	cmp	r9, r0
 8000812:	d142      	bne.n	800089a <_malloc_r+0xea>
 8000814:	6821      	ldr	r1, [r4, #0]
 8000816:	1a6d      	subs	r5, r5, r1
 8000818:	4629      	mov	r1, r5
 800081a:	4630      	mov	r0, r6
 800081c:	f7ff ffa6 	bl	800076c <sbrk_aligned>
 8000820:	3001      	adds	r0, #1
 8000822:	d03a      	beq.n	800089a <_malloc_r+0xea>
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	442b      	add	r3, r5
 8000828:	6023      	str	r3, [r4, #0]
 800082a:	f8d8 3000 	ldr.w	r3, [r8]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	bb62      	cbnz	r2, 800088c <_malloc_r+0xdc>
 8000832:	f8c8 7000 	str.w	r7, [r8]
 8000836:	e00f      	b.n	8000858 <_malloc_r+0xa8>
 8000838:	6822      	ldr	r2, [r4, #0]
 800083a:	1b52      	subs	r2, r2, r5
 800083c:	d420      	bmi.n	8000880 <_malloc_r+0xd0>
 800083e:	2a0b      	cmp	r2, #11
 8000840:	d917      	bls.n	8000872 <_malloc_r+0xc2>
 8000842:	1961      	adds	r1, r4, r5
 8000844:	42a3      	cmp	r3, r4
 8000846:	6025      	str	r5, [r4, #0]
 8000848:	bf18      	it	ne
 800084a:	6059      	strne	r1, [r3, #4]
 800084c:	6863      	ldr	r3, [r4, #4]
 800084e:	bf08      	it	eq
 8000850:	f8c8 1000 	streq.w	r1, [r8]
 8000854:	5162      	str	r2, [r4, r5]
 8000856:	604b      	str	r3, [r1, #4]
 8000858:	4630      	mov	r0, r6
 800085a:	f000 f82f 	bl	80008bc <__malloc_unlock>
 800085e:	f104 000b 	add.w	r0, r4, #11
 8000862:	1d23      	adds	r3, r4, #4
 8000864:	f020 0007 	bic.w	r0, r0, #7
 8000868:	1ac2      	subs	r2, r0, r3
 800086a:	bf1c      	itt	ne
 800086c:	1a1b      	subne	r3, r3, r0
 800086e:	50a3      	strne	r3, [r4, r2]
 8000870:	e7af      	b.n	80007d2 <_malloc_r+0x22>
 8000872:	6862      	ldr	r2, [r4, #4]
 8000874:	42a3      	cmp	r3, r4
 8000876:	bf0c      	ite	eq
 8000878:	f8c8 2000 	streq.w	r2, [r8]
 800087c:	605a      	strne	r2, [r3, #4]
 800087e:	e7eb      	b.n	8000858 <_malloc_r+0xa8>
 8000880:	4623      	mov	r3, r4
 8000882:	6864      	ldr	r4, [r4, #4]
 8000884:	e7ae      	b.n	80007e4 <_malloc_r+0x34>
 8000886:	463c      	mov	r4, r7
 8000888:	687f      	ldr	r7, [r7, #4]
 800088a:	e7b6      	b.n	80007fa <_malloc_r+0x4a>
 800088c:	461a      	mov	r2, r3
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	42a3      	cmp	r3, r4
 8000892:	d1fb      	bne.n	800088c <_malloc_r+0xdc>
 8000894:	2300      	movs	r3, #0
 8000896:	6053      	str	r3, [r2, #4]
 8000898:	e7de      	b.n	8000858 <_malloc_r+0xa8>
 800089a:	230c      	movs	r3, #12
 800089c:	6033      	str	r3, [r6, #0]
 800089e:	4630      	mov	r0, r6
 80008a0:	f000 f80c 	bl	80008bc <__malloc_unlock>
 80008a4:	e794      	b.n	80007d0 <_malloc_r+0x20>
 80008a6:	6005      	str	r5, [r0, #0]
 80008a8:	e7d6      	b.n	8000858 <_malloc_r+0xa8>
 80008aa:	bf00      	nop
 80008ac:	20000894 	.word	0x20000894

080008b0 <__malloc_lock>:
 80008b0:	4801      	ldr	r0, [pc, #4]	@ (80008b8 <__malloc_lock+0x8>)
 80008b2:	f000 b9aa 	b.w	8000c0a <__retarget_lock_acquire_recursive>
 80008b6:	bf00      	nop
 80008b8:	200009d8 	.word	0x200009d8

080008bc <__malloc_unlock>:
 80008bc:	4801      	ldr	r0, [pc, #4]	@ (80008c4 <__malloc_unlock+0x8>)
 80008be:	f000 b9a5 	b.w	8000c0c <__retarget_lock_release_recursive>
 80008c2:	bf00      	nop
 80008c4:	200009d8 	.word	0x200009d8

080008c8 <std>:
 80008c8:	2300      	movs	r3, #0
 80008ca:	b510      	push	{r4, lr}
 80008cc:	4604      	mov	r4, r0
 80008ce:	e9c0 3300 	strd	r3, r3, [r0]
 80008d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008d6:	6083      	str	r3, [r0, #8]
 80008d8:	8181      	strh	r1, [r0, #12]
 80008da:	6643      	str	r3, [r0, #100]	@ 0x64
 80008dc:	81c2      	strh	r2, [r0, #14]
 80008de:	6183      	str	r3, [r0, #24]
 80008e0:	4619      	mov	r1, r3
 80008e2:	2208      	movs	r2, #8
 80008e4:	305c      	adds	r0, #92	@ 0x5c
 80008e6:	f000 f906 	bl	8000af6 <memset>
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <std+0x58>)
 80008ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80008ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <std+0x5c>)
 80008f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <std+0x60>)
 80008f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <std+0x64>)
 80008f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <std+0x68>)
 80008fc:	6224      	str	r4, [r4, #32]
 80008fe:	429c      	cmp	r4, r3
 8000900:	d006      	beq.n	8000910 <std+0x48>
 8000902:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000906:	4294      	cmp	r4, r2
 8000908:	d002      	beq.n	8000910 <std+0x48>
 800090a:	33d0      	adds	r3, #208	@ 0xd0
 800090c:	429c      	cmp	r4, r3
 800090e:	d105      	bne.n	800091c <std+0x54>
 8000910:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000918:	f000 b976 	b.w	8000c08 <__retarget_lock_init_recursive>
 800091c:	bd10      	pop	{r4, pc}
 800091e:	bf00      	nop
 8000920:	08000a71 	.word	0x08000a71
 8000924:	08000a93 	.word	0x08000a93
 8000928:	08000acb 	.word	0x08000acb
 800092c:	08000aef 	.word	0x08000aef
 8000930:	20000898 	.word	0x20000898

08000934 <stdio_exit_handler>:
 8000934:	4a02      	ldr	r2, [pc, #8]	@ (8000940 <stdio_exit_handler+0xc>)
 8000936:	4903      	ldr	r1, [pc, #12]	@ (8000944 <stdio_exit_handler+0x10>)
 8000938:	4803      	ldr	r0, [pc, #12]	@ (8000948 <stdio_exit_handler+0x14>)
 800093a:	f000 b869 	b.w	8000a10 <_fwalk_sglue>
 800093e:	bf00      	nop
 8000940:	20000010 	.word	0x20000010
 8000944:	0800134d 	.word	0x0800134d
 8000948:	20000020 	.word	0x20000020

0800094c <cleanup_stdio>:
 800094c:	6841      	ldr	r1, [r0, #4]
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <cleanup_stdio+0x34>)
 8000950:	4299      	cmp	r1, r3
 8000952:	b510      	push	{r4, lr}
 8000954:	4604      	mov	r4, r0
 8000956:	d001      	beq.n	800095c <cleanup_stdio+0x10>
 8000958:	f000 fcf8 	bl	800134c <_fflush_r>
 800095c:	68a1      	ldr	r1, [r4, #8]
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <cleanup_stdio+0x38>)
 8000960:	4299      	cmp	r1, r3
 8000962:	d002      	beq.n	800096a <cleanup_stdio+0x1e>
 8000964:	4620      	mov	r0, r4
 8000966:	f000 fcf1 	bl	800134c <_fflush_r>
 800096a:	68e1      	ldr	r1, [r4, #12]
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <cleanup_stdio+0x3c>)
 800096e:	4299      	cmp	r1, r3
 8000970:	d004      	beq.n	800097c <cleanup_stdio+0x30>
 8000972:	4620      	mov	r0, r4
 8000974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000978:	f000 bce8 	b.w	800134c <_fflush_r>
 800097c:	bd10      	pop	{r4, pc}
 800097e:	bf00      	nop
 8000980:	20000898 	.word	0x20000898
 8000984:	20000900 	.word	0x20000900
 8000988:	20000968 	.word	0x20000968

0800098c <global_stdio_init.part.0>:
 800098c:	b510      	push	{r4, lr}
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <global_stdio_init.part.0+0x30>)
 8000990:	4c0b      	ldr	r4, [pc, #44]	@ (80009c0 <global_stdio_init.part.0+0x34>)
 8000992:	4a0c      	ldr	r2, [pc, #48]	@ (80009c4 <global_stdio_init.part.0+0x38>)
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	4620      	mov	r0, r4
 8000998:	2200      	movs	r2, #0
 800099a:	2104      	movs	r1, #4
 800099c:	f7ff ff94 	bl	80008c8 <std>
 80009a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80009a4:	2201      	movs	r2, #1
 80009a6:	2109      	movs	r1, #9
 80009a8:	f7ff ff8e 	bl	80008c8 <std>
 80009ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80009b0:	2202      	movs	r2, #2
 80009b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009b6:	2112      	movs	r1, #18
 80009b8:	f7ff bf86 	b.w	80008c8 <std>
 80009bc:	200009d0 	.word	0x200009d0
 80009c0:	20000898 	.word	0x20000898
 80009c4:	08000935 	.word	0x08000935

080009c8 <__sfp_lock_acquire>:
 80009c8:	4801      	ldr	r0, [pc, #4]	@ (80009d0 <__sfp_lock_acquire+0x8>)
 80009ca:	f000 b91e 	b.w	8000c0a <__retarget_lock_acquire_recursive>
 80009ce:	bf00      	nop
 80009d0:	200009d9 	.word	0x200009d9

080009d4 <__sfp_lock_release>:
 80009d4:	4801      	ldr	r0, [pc, #4]	@ (80009dc <__sfp_lock_release+0x8>)
 80009d6:	f000 b919 	b.w	8000c0c <__retarget_lock_release_recursive>
 80009da:	bf00      	nop
 80009dc:	200009d9 	.word	0x200009d9

080009e0 <__sinit>:
 80009e0:	b510      	push	{r4, lr}
 80009e2:	4604      	mov	r4, r0
 80009e4:	f7ff fff0 	bl	80009c8 <__sfp_lock_acquire>
 80009e8:	6a23      	ldr	r3, [r4, #32]
 80009ea:	b11b      	cbz	r3, 80009f4 <__sinit+0x14>
 80009ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009f0:	f7ff bff0 	b.w	80009d4 <__sfp_lock_release>
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <__sinit+0x28>)
 80009f6:	6223      	str	r3, [r4, #32]
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__sinit+0x2c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1f5      	bne.n	80009ec <__sinit+0xc>
 8000a00:	f7ff ffc4 	bl	800098c <global_stdio_init.part.0>
 8000a04:	e7f2      	b.n	80009ec <__sinit+0xc>
 8000a06:	bf00      	nop
 8000a08:	0800094d 	.word	0x0800094d
 8000a0c:	200009d0 	.word	0x200009d0

08000a10 <_fwalk_sglue>:
 8000a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a14:	4607      	mov	r7, r0
 8000a16:	4688      	mov	r8, r1
 8000a18:	4614      	mov	r4, r2
 8000a1a:	2600      	movs	r6, #0
 8000a1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a20:	f1b9 0901 	subs.w	r9, r9, #1
 8000a24:	d505      	bpl.n	8000a32 <_fwalk_sglue+0x22>
 8000a26:	6824      	ldr	r4, [r4, #0]
 8000a28:	2c00      	cmp	r4, #0
 8000a2a:	d1f7      	bne.n	8000a1c <_fwalk_sglue+0xc>
 8000a2c:	4630      	mov	r0, r6
 8000a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a32:	89ab      	ldrh	r3, [r5, #12]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d907      	bls.n	8000a48 <_fwalk_sglue+0x38>
 8000a38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	d003      	beq.n	8000a48 <_fwalk_sglue+0x38>
 8000a40:	4629      	mov	r1, r5
 8000a42:	4638      	mov	r0, r7
 8000a44:	47c0      	blx	r8
 8000a46:	4306      	orrs	r6, r0
 8000a48:	3568      	adds	r5, #104	@ 0x68
 8000a4a:	e7e9      	b.n	8000a20 <_fwalk_sglue+0x10>

08000a4c <iprintf>:
 8000a4c:	b40f      	push	{r0, r1, r2, r3}
 8000a4e:	b507      	push	{r0, r1, r2, lr}
 8000a50:	4906      	ldr	r1, [pc, #24]	@ (8000a6c <iprintf+0x20>)
 8000a52:	ab04      	add	r3, sp, #16
 8000a54:	6808      	ldr	r0, [r1, #0]
 8000a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a5a:	6881      	ldr	r1, [r0, #8]
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	f000 f94b 	bl	8000cf8 <_vfiprintf_r>
 8000a62:	b003      	add	sp, #12
 8000a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a68:	b004      	add	sp, #16
 8000a6a:	4770      	bx	lr
 8000a6c:	2000001c 	.word	0x2000001c

08000a70 <__sread>:
 8000a70:	b510      	push	{r4, lr}
 8000a72:	460c      	mov	r4, r1
 8000a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a78:	f000 f868 	bl	8000b4c <_read_r>
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	bfab      	itete	ge
 8000a80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000a82:	89a3      	ldrhlt	r3, [r4, #12]
 8000a84:	181b      	addge	r3, r3, r0
 8000a86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000a8a:	bfac      	ite	ge
 8000a8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000a8e:	81a3      	strhlt	r3, [r4, #12]
 8000a90:	bd10      	pop	{r4, pc}

08000a92 <__swrite>:
 8000a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a96:	461f      	mov	r7, r3
 8000a98:	898b      	ldrh	r3, [r1, #12]
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	4605      	mov	r5, r0
 8000a9e:	460c      	mov	r4, r1
 8000aa0:	4616      	mov	r6, r2
 8000aa2:	d505      	bpl.n	8000ab0 <__swrite+0x1e>
 8000aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f000 f83c 	bl	8000b28 <_lseek_r>
 8000ab0:	89a3      	ldrh	r3, [r4, #12]
 8000ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ab6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000aba:	81a3      	strh	r3, [r4, #12]
 8000abc:	4632      	mov	r2, r6
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ac6:	f000 b863 	b.w	8000b90 <_write_r>

08000aca <__sseek>:
 8000aca:	b510      	push	{r4, lr}
 8000acc:	460c      	mov	r4, r1
 8000ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ad2:	f000 f829 	bl	8000b28 <_lseek_r>
 8000ad6:	1c43      	adds	r3, r0, #1
 8000ad8:	89a3      	ldrh	r3, [r4, #12]
 8000ada:	bf15      	itete	ne
 8000adc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000ade:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000ae2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000ae6:	81a3      	strheq	r3, [r4, #12]
 8000ae8:	bf18      	it	ne
 8000aea:	81a3      	strhne	r3, [r4, #12]
 8000aec:	bd10      	pop	{r4, pc}

08000aee <__sclose>:
 8000aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000af2:	f000 b809 	b.w	8000b08 <_close_r>

08000af6 <memset>:
 8000af6:	4402      	add	r2, r0
 8000af8:	4603      	mov	r3, r0
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d100      	bne.n	8000b00 <memset+0xa>
 8000afe:	4770      	bx	lr
 8000b00:	f803 1b01 	strb.w	r1, [r3], #1
 8000b04:	e7f9      	b.n	8000afa <memset+0x4>
	...

08000b08 <_close_r>:
 8000b08:	b538      	push	{r3, r4, r5, lr}
 8000b0a:	4d06      	ldr	r5, [pc, #24]	@ (8000b24 <_close_r+0x1c>)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	4604      	mov	r4, r0
 8000b10:	4608      	mov	r0, r1
 8000b12:	602b      	str	r3, [r5, #0]
 8000b14:	f7ff fcb3 	bl	800047e <_close>
 8000b18:	1c43      	adds	r3, r0, #1
 8000b1a:	d102      	bne.n	8000b22 <_close_r+0x1a>
 8000b1c:	682b      	ldr	r3, [r5, #0]
 8000b1e:	b103      	cbz	r3, 8000b22 <_close_r+0x1a>
 8000b20:	6023      	str	r3, [r4, #0]
 8000b22:	bd38      	pop	{r3, r4, r5, pc}
 8000b24:	200009d4 	.word	0x200009d4

08000b28 <_lseek_r>:
 8000b28:	b538      	push	{r3, r4, r5, lr}
 8000b2a:	4d07      	ldr	r5, [pc, #28]	@ (8000b48 <_lseek_r+0x20>)
 8000b2c:	4604      	mov	r4, r0
 8000b2e:	4608      	mov	r0, r1
 8000b30:	4611      	mov	r1, r2
 8000b32:	2200      	movs	r2, #0
 8000b34:	602a      	str	r2, [r5, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	f7ff fcc8 	bl	80004cc <_lseek>
 8000b3c:	1c43      	adds	r3, r0, #1
 8000b3e:	d102      	bne.n	8000b46 <_lseek_r+0x1e>
 8000b40:	682b      	ldr	r3, [r5, #0]
 8000b42:	b103      	cbz	r3, 8000b46 <_lseek_r+0x1e>
 8000b44:	6023      	str	r3, [r4, #0]
 8000b46:	bd38      	pop	{r3, r4, r5, pc}
 8000b48:	200009d4 	.word	0x200009d4

08000b4c <_read_r>:
 8000b4c:	b538      	push	{r3, r4, r5, lr}
 8000b4e:	4d07      	ldr	r5, [pc, #28]	@ (8000b6c <_read_r+0x20>)
 8000b50:	4604      	mov	r4, r0
 8000b52:	4608      	mov	r0, r1
 8000b54:	4611      	mov	r1, r2
 8000b56:	2200      	movs	r2, #0
 8000b58:	602a      	str	r2, [r5, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	f7ff fc56 	bl	800040c <_read>
 8000b60:	1c43      	adds	r3, r0, #1
 8000b62:	d102      	bne.n	8000b6a <_read_r+0x1e>
 8000b64:	682b      	ldr	r3, [r5, #0]
 8000b66:	b103      	cbz	r3, 8000b6a <_read_r+0x1e>
 8000b68:	6023      	str	r3, [r4, #0]
 8000b6a:	bd38      	pop	{r3, r4, r5, pc}
 8000b6c:	200009d4 	.word	0x200009d4

08000b70 <_sbrk_r>:
 8000b70:	b538      	push	{r3, r4, r5, lr}
 8000b72:	4d06      	ldr	r5, [pc, #24]	@ (8000b8c <_sbrk_r+0x1c>)
 8000b74:	2300      	movs	r3, #0
 8000b76:	4604      	mov	r4, r0
 8000b78:	4608      	mov	r0, r1
 8000b7a:	602b      	str	r3, [r5, #0]
 8000b7c:	f7ff fcb4 	bl	80004e8 <_sbrk>
 8000b80:	1c43      	adds	r3, r0, #1
 8000b82:	d102      	bne.n	8000b8a <_sbrk_r+0x1a>
 8000b84:	682b      	ldr	r3, [r5, #0]
 8000b86:	b103      	cbz	r3, 8000b8a <_sbrk_r+0x1a>
 8000b88:	6023      	str	r3, [r4, #0]
 8000b8a:	bd38      	pop	{r3, r4, r5, pc}
 8000b8c:	200009d4 	.word	0x200009d4

08000b90 <_write_r>:
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4d07      	ldr	r5, [pc, #28]	@ (8000bb0 <_write_r+0x20>)
 8000b94:	4604      	mov	r4, r0
 8000b96:	4608      	mov	r0, r1
 8000b98:	4611      	mov	r1, r2
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	602a      	str	r2, [r5, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	f7ff fc51 	bl	8000446 <_write>
 8000ba4:	1c43      	adds	r3, r0, #1
 8000ba6:	d102      	bne.n	8000bae <_write_r+0x1e>
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	b103      	cbz	r3, 8000bae <_write_r+0x1e>
 8000bac:	6023      	str	r3, [r4, #0]
 8000bae:	bd38      	pop	{r3, r4, r5, pc}
 8000bb0:	200009d4 	.word	0x200009d4

08000bb4 <__errno>:
 8000bb4:	4b01      	ldr	r3, [pc, #4]	@ (8000bbc <__errno+0x8>)
 8000bb6:	6818      	ldr	r0, [r3, #0]
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	2000001c 	.word	0x2000001c

08000bc0 <__libc_init_array>:
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	4d0d      	ldr	r5, [pc, #52]	@ (8000bf8 <__libc_init_array+0x38>)
 8000bc4:	4c0d      	ldr	r4, [pc, #52]	@ (8000bfc <__libc_init_array+0x3c>)
 8000bc6:	1b64      	subs	r4, r4, r5
 8000bc8:	10a4      	asrs	r4, r4, #2
 8000bca:	2600      	movs	r6, #0
 8000bcc:	42a6      	cmp	r6, r4
 8000bce:	d109      	bne.n	8000be4 <__libc_init_array+0x24>
 8000bd0:	4d0b      	ldr	r5, [pc, #44]	@ (8000c00 <__libc_init_array+0x40>)
 8000bd2:	4c0c      	ldr	r4, [pc, #48]	@ (8000c04 <__libc_init_array+0x44>)
 8000bd4:	f000 fcfa 	bl	80015cc <_init>
 8000bd8:	1b64      	subs	r4, r4, r5
 8000bda:	10a4      	asrs	r4, r4, #2
 8000bdc:	2600      	movs	r6, #0
 8000bde:	42a6      	cmp	r6, r4
 8000be0:	d105      	bne.n	8000bee <__libc_init_array+0x2e>
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000be8:	4798      	blx	r3
 8000bea:	3601      	adds	r6, #1
 8000bec:	e7ee      	b.n	8000bcc <__libc_init_array+0xc>
 8000bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bf2:	4798      	blx	r3
 8000bf4:	3601      	adds	r6, #1
 8000bf6:	e7f2      	b.n	8000bde <__libc_init_array+0x1e>
 8000bf8:	08001650 	.word	0x08001650
 8000bfc:	08001650 	.word	0x08001650
 8000c00:	08001650 	.word	0x08001650
 8000c04:	08001654 	.word	0x08001654

08000c08 <__retarget_lock_init_recursive>:
 8000c08:	4770      	bx	lr

08000c0a <__retarget_lock_acquire_recursive>:
 8000c0a:	4770      	bx	lr

08000c0c <__retarget_lock_release_recursive>:
 8000c0c:	4770      	bx	lr
	...

08000c10 <_free_r>:
 8000c10:	b538      	push	{r3, r4, r5, lr}
 8000c12:	4605      	mov	r5, r0
 8000c14:	2900      	cmp	r1, #0
 8000c16:	d041      	beq.n	8000c9c <_free_r+0x8c>
 8000c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c1c:	1f0c      	subs	r4, r1, #4
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bfb8      	it	lt
 8000c22:	18e4      	addlt	r4, r4, r3
 8000c24:	f7ff fe44 	bl	80008b0 <__malloc_lock>
 8000c28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca0 <_free_r+0x90>)
 8000c2a:	6813      	ldr	r3, [r2, #0]
 8000c2c:	b933      	cbnz	r3, 8000c3c <_free_r+0x2c>
 8000c2e:	6063      	str	r3, [r4, #4]
 8000c30:	6014      	str	r4, [r2, #0]
 8000c32:	4628      	mov	r0, r5
 8000c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c38:	f7ff be40 	b.w	80008bc <__malloc_unlock>
 8000c3c:	42a3      	cmp	r3, r4
 8000c3e:	d908      	bls.n	8000c52 <_free_r+0x42>
 8000c40:	6820      	ldr	r0, [r4, #0]
 8000c42:	1821      	adds	r1, r4, r0
 8000c44:	428b      	cmp	r3, r1
 8000c46:	bf01      	itttt	eq
 8000c48:	6819      	ldreq	r1, [r3, #0]
 8000c4a:	685b      	ldreq	r3, [r3, #4]
 8000c4c:	1809      	addeq	r1, r1, r0
 8000c4e:	6021      	streq	r1, [r4, #0]
 8000c50:	e7ed      	b.n	8000c2e <_free_r+0x1e>
 8000c52:	461a      	mov	r2, r3
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	b10b      	cbz	r3, 8000c5c <_free_r+0x4c>
 8000c58:	42a3      	cmp	r3, r4
 8000c5a:	d9fa      	bls.n	8000c52 <_free_r+0x42>
 8000c5c:	6811      	ldr	r1, [r2, #0]
 8000c5e:	1850      	adds	r0, r2, r1
 8000c60:	42a0      	cmp	r0, r4
 8000c62:	d10b      	bne.n	8000c7c <_free_r+0x6c>
 8000c64:	6820      	ldr	r0, [r4, #0]
 8000c66:	4401      	add	r1, r0
 8000c68:	1850      	adds	r0, r2, r1
 8000c6a:	4283      	cmp	r3, r0
 8000c6c:	6011      	str	r1, [r2, #0]
 8000c6e:	d1e0      	bne.n	8000c32 <_free_r+0x22>
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	6053      	str	r3, [r2, #4]
 8000c76:	4408      	add	r0, r1
 8000c78:	6010      	str	r0, [r2, #0]
 8000c7a:	e7da      	b.n	8000c32 <_free_r+0x22>
 8000c7c:	d902      	bls.n	8000c84 <_free_r+0x74>
 8000c7e:	230c      	movs	r3, #12
 8000c80:	602b      	str	r3, [r5, #0]
 8000c82:	e7d6      	b.n	8000c32 <_free_r+0x22>
 8000c84:	6820      	ldr	r0, [r4, #0]
 8000c86:	1821      	adds	r1, r4, r0
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	bf04      	itt	eq
 8000c8c:	6819      	ldreq	r1, [r3, #0]
 8000c8e:	685b      	ldreq	r3, [r3, #4]
 8000c90:	6063      	str	r3, [r4, #4]
 8000c92:	bf04      	itt	eq
 8000c94:	1809      	addeq	r1, r1, r0
 8000c96:	6021      	streq	r1, [r4, #0]
 8000c98:	6054      	str	r4, [r2, #4]
 8000c9a:	e7ca      	b.n	8000c32 <_free_r+0x22>
 8000c9c:	bd38      	pop	{r3, r4, r5, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000894 	.word	0x20000894

08000ca4 <__sfputc_r>:
 8000ca4:	6893      	ldr	r3, [r2, #8]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	b410      	push	{r4}
 8000cac:	6093      	str	r3, [r2, #8]
 8000cae:	da08      	bge.n	8000cc2 <__sfputc_r+0x1e>
 8000cb0:	6994      	ldr	r4, [r2, #24]
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	db01      	blt.n	8000cba <__sfputc_r+0x16>
 8000cb6:	290a      	cmp	r1, #10
 8000cb8:	d103      	bne.n	8000cc2 <__sfputc_r+0x1e>
 8000cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cbe:	f000 bbcf 	b.w	8001460 <__swbuf_r>
 8000cc2:	6813      	ldr	r3, [r2, #0]
 8000cc4:	1c58      	adds	r0, r3, #1
 8000cc6:	6010      	str	r0, [r2, #0]
 8000cc8:	7019      	strb	r1, [r3, #0]
 8000cca:	4608      	mov	r0, r1
 8000ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <__sfputs_r>:
 8000cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd4:	4606      	mov	r6, r0
 8000cd6:	460f      	mov	r7, r1
 8000cd8:	4614      	mov	r4, r2
 8000cda:	18d5      	adds	r5, r2, r3
 8000cdc:	42ac      	cmp	r4, r5
 8000cde:	d101      	bne.n	8000ce4 <__sfputs_r+0x12>
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	e007      	b.n	8000cf4 <__sfputs_r+0x22>
 8000ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ce8:	463a      	mov	r2, r7
 8000cea:	4630      	mov	r0, r6
 8000cec:	f7ff ffda 	bl	8000ca4 <__sfputc_r>
 8000cf0:	1c43      	adds	r3, r0, #1
 8000cf2:	d1f3      	bne.n	8000cdc <__sfputs_r+0xa>
 8000cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000cf8 <_vfiprintf_r>:
 8000cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cfc:	460d      	mov	r5, r1
 8000cfe:	b09d      	sub	sp, #116	@ 0x74
 8000d00:	4614      	mov	r4, r2
 8000d02:	4698      	mov	r8, r3
 8000d04:	4606      	mov	r6, r0
 8000d06:	b118      	cbz	r0, 8000d10 <_vfiprintf_r+0x18>
 8000d08:	6a03      	ldr	r3, [r0, #32]
 8000d0a:	b90b      	cbnz	r3, 8000d10 <_vfiprintf_r+0x18>
 8000d0c:	f7ff fe68 	bl	80009e0 <__sinit>
 8000d10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d12:	07d9      	lsls	r1, r3, #31
 8000d14:	d405      	bmi.n	8000d22 <_vfiprintf_r+0x2a>
 8000d16:	89ab      	ldrh	r3, [r5, #12]
 8000d18:	059a      	lsls	r2, r3, #22
 8000d1a:	d402      	bmi.n	8000d22 <_vfiprintf_r+0x2a>
 8000d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d1e:	f7ff ff74 	bl	8000c0a <__retarget_lock_acquire_recursive>
 8000d22:	89ab      	ldrh	r3, [r5, #12]
 8000d24:	071b      	lsls	r3, r3, #28
 8000d26:	d501      	bpl.n	8000d2c <_vfiprintf_r+0x34>
 8000d28:	692b      	ldr	r3, [r5, #16]
 8000d2a:	b99b      	cbnz	r3, 8000d54 <_vfiprintf_r+0x5c>
 8000d2c:	4629      	mov	r1, r5
 8000d2e:	4630      	mov	r0, r6
 8000d30:	f000 fbd4 	bl	80014dc <__swsetup_r>
 8000d34:	b170      	cbz	r0, 8000d54 <_vfiprintf_r+0x5c>
 8000d36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d38:	07dc      	lsls	r4, r3, #31
 8000d3a:	d504      	bpl.n	8000d46 <_vfiprintf_r+0x4e>
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	b01d      	add	sp, #116	@ 0x74
 8000d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d46:	89ab      	ldrh	r3, [r5, #12]
 8000d48:	0598      	lsls	r0, r3, #22
 8000d4a:	d4f7      	bmi.n	8000d3c <_vfiprintf_r+0x44>
 8000d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d4e:	f7ff ff5d 	bl	8000c0c <__retarget_lock_release_recursive>
 8000d52:	e7f3      	b.n	8000d3c <_vfiprintf_r+0x44>
 8000d54:	2300      	movs	r3, #0
 8000d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d58:	2320      	movs	r3, #32
 8000d5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d62:	2330      	movs	r3, #48	@ 0x30
 8000d64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000f14 <_vfiprintf_r+0x21c>
 8000d68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d6c:	f04f 0901 	mov.w	r9, #1
 8000d70:	4623      	mov	r3, r4
 8000d72:	469a      	mov	sl, r3
 8000d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d78:	b10a      	cbz	r2, 8000d7e <_vfiprintf_r+0x86>
 8000d7a:	2a25      	cmp	r2, #37	@ 0x25
 8000d7c:	d1f9      	bne.n	8000d72 <_vfiprintf_r+0x7a>
 8000d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8000d82:	d00b      	beq.n	8000d9c <_vfiprintf_r+0xa4>
 8000d84:	465b      	mov	r3, fp
 8000d86:	4622      	mov	r2, r4
 8000d88:	4629      	mov	r1, r5
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	f7ff ffa1 	bl	8000cd2 <__sfputs_r>
 8000d90:	3001      	adds	r0, #1
 8000d92:	f000 80a7 	beq.w	8000ee4 <_vfiprintf_r+0x1ec>
 8000d96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d98:	445a      	add	r2, fp
 8000d9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f000 809f 	beq.w	8000ee4 <_vfiprintf_r+0x1ec>
 8000da6:	2300      	movs	r3, #0
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000db0:	f10a 0a01 	add.w	sl, sl, #1
 8000db4:	9304      	str	r3, [sp, #16]
 8000db6:	9307      	str	r3, [sp, #28]
 8000db8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000dbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8000dbe:	4654      	mov	r4, sl
 8000dc0:	2205      	movs	r2, #5
 8000dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dc6:	4853      	ldr	r0, [pc, #332]	@ (8000f14 <_vfiprintf_r+0x21c>)
 8000dc8:	f7ff fa22 	bl	8000210 <memchr>
 8000dcc:	9a04      	ldr	r2, [sp, #16]
 8000dce:	b9d8      	cbnz	r0, 8000e08 <_vfiprintf_r+0x110>
 8000dd0:	06d1      	lsls	r1, r2, #27
 8000dd2:	bf44      	itt	mi
 8000dd4:	2320      	movmi	r3, #32
 8000dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000dda:	0713      	lsls	r3, r2, #28
 8000ddc:	bf44      	itt	mi
 8000dde:	232b      	movmi	r3, #43	@ 0x2b
 8000de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000de4:	f89a 3000 	ldrb.w	r3, [sl]
 8000de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dea:	d015      	beq.n	8000e18 <_vfiprintf_r+0x120>
 8000dec:	9a07      	ldr	r2, [sp, #28]
 8000dee:	4654      	mov	r4, sl
 8000df0:	2000      	movs	r0, #0
 8000df2:	f04f 0c0a 	mov.w	ip, #10
 8000df6:	4621      	mov	r1, r4
 8000df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dfc:	3b30      	subs	r3, #48	@ 0x30
 8000dfe:	2b09      	cmp	r3, #9
 8000e00:	d94b      	bls.n	8000e9a <_vfiprintf_r+0x1a2>
 8000e02:	b1b0      	cbz	r0, 8000e32 <_vfiprintf_r+0x13a>
 8000e04:	9207      	str	r2, [sp, #28]
 8000e06:	e014      	b.n	8000e32 <_vfiprintf_r+0x13a>
 8000e08:	eba0 0308 	sub.w	r3, r0, r8
 8000e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	9304      	str	r3, [sp, #16]
 8000e14:	46a2      	mov	sl, r4
 8000e16:	e7d2      	b.n	8000dbe <_vfiprintf_r+0xc6>
 8000e18:	9b03      	ldr	r3, [sp, #12]
 8000e1a:	1d19      	adds	r1, r3, #4
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	9103      	str	r1, [sp, #12]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bfbb      	ittet	lt
 8000e24:	425b      	neglt	r3, r3
 8000e26:	f042 0202 	orrlt.w	r2, r2, #2
 8000e2a:	9307      	strge	r3, [sp, #28]
 8000e2c:	9307      	strlt	r3, [sp, #28]
 8000e2e:	bfb8      	it	lt
 8000e30:	9204      	strlt	r2, [sp, #16]
 8000e32:	7823      	ldrb	r3, [r4, #0]
 8000e34:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e36:	d10a      	bne.n	8000e4e <_vfiprintf_r+0x156>
 8000e38:	7863      	ldrb	r3, [r4, #1]
 8000e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e3c:	d132      	bne.n	8000ea4 <_vfiprintf_r+0x1ac>
 8000e3e:	9b03      	ldr	r3, [sp, #12]
 8000e40:	1d1a      	adds	r2, r3, #4
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	9203      	str	r2, [sp, #12]
 8000e46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e4a:	3402      	adds	r4, #2
 8000e4c:	9305      	str	r3, [sp, #20]
 8000e4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000f24 <_vfiprintf_r+0x22c>
 8000e52:	7821      	ldrb	r1, [r4, #0]
 8000e54:	2203      	movs	r2, #3
 8000e56:	4650      	mov	r0, sl
 8000e58:	f7ff f9da 	bl	8000210 <memchr>
 8000e5c:	b138      	cbz	r0, 8000e6e <_vfiprintf_r+0x176>
 8000e5e:	9b04      	ldr	r3, [sp, #16]
 8000e60:	eba0 000a 	sub.w	r0, r0, sl
 8000e64:	2240      	movs	r2, #64	@ 0x40
 8000e66:	4082      	lsls	r2, r0
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	3401      	adds	r4, #1
 8000e6c:	9304      	str	r3, [sp, #16]
 8000e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e72:	4829      	ldr	r0, [pc, #164]	@ (8000f18 <_vfiprintf_r+0x220>)
 8000e74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e78:	2206      	movs	r2, #6
 8000e7a:	f7ff f9c9 	bl	8000210 <memchr>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d03f      	beq.n	8000f02 <_vfiprintf_r+0x20a>
 8000e82:	4b26      	ldr	r3, [pc, #152]	@ (8000f1c <_vfiprintf_r+0x224>)
 8000e84:	bb1b      	cbnz	r3, 8000ece <_vfiprintf_r+0x1d6>
 8000e86:	9b03      	ldr	r3, [sp, #12]
 8000e88:	3307      	adds	r3, #7
 8000e8a:	f023 0307 	bic.w	r3, r3, #7
 8000e8e:	3308      	adds	r3, #8
 8000e90:	9303      	str	r3, [sp, #12]
 8000e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e94:	443b      	add	r3, r7
 8000e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e98:	e76a      	b.n	8000d70 <_vfiprintf_r+0x78>
 8000e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e9e:	460c      	mov	r4, r1
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	e7a8      	b.n	8000df6 <_vfiprintf_r+0xfe>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	3401      	adds	r4, #1
 8000ea8:	9305      	str	r3, [sp, #20]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 0c0a 	mov.w	ip, #10
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000eb6:	3a30      	subs	r2, #48	@ 0x30
 8000eb8:	2a09      	cmp	r2, #9
 8000eba:	d903      	bls.n	8000ec4 <_vfiprintf_r+0x1cc>
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0c6      	beq.n	8000e4e <_vfiprintf_r+0x156>
 8000ec0:	9105      	str	r1, [sp, #20]
 8000ec2:	e7c4      	b.n	8000e4e <_vfiprintf_r+0x156>
 8000ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ec8:	4604      	mov	r4, r0
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e7f0      	b.n	8000eb0 <_vfiprintf_r+0x1b8>
 8000ece:	ab03      	add	r3, sp, #12
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	462a      	mov	r2, r5
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <_vfiprintf_r+0x228>)
 8000ed6:	a904      	add	r1, sp, #16
 8000ed8:	4630      	mov	r0, r6
 8000eda:	f3af 8000 	nop.w
 8000ede:	4607      	mov	r7, r0
 8000ee0:	1c78      	adds	r0, r7, #1
 8000ee2:	d1d6      	bne.n	8000e92 <_vfiprintf_r+0x19a>
 8000ee4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ee6:	07d9      	lsls	r1, r3, #31
 8000ee8:	d405      	bmi.n	8000ef6 <_vfiprintf_r+0x1fe>
 8000eea:	89ab      	ldrh	r3, [r5, #12]
 8000eec:	059a      	lsls	r2, r3, #22
 8000eee:	d402      	bmi.n	8000ef6 <_vfiprintf_r+0x1fe>
 8000ef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ef2:	f7ff fe8b 	bl	8000c0c <__retarget_lock_release_recursive>
 8000ef6:	89ab      	ldrh	r3, [r5, #12]
 8000ef8:	065b      	lsls	r3, r3, #25
 8000efa:	f53f af1f 	bmi.w	8000d3c <_vfiprintf_r+0x44>
 8000efe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f00:	e71e      	b.n	8000d40 <_vfiprintf_r+0x48>
 8000f02:	ab03      	add	r3, sp, #12
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	462a      	mov	r2, r5
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <_vfiprintf_r+0x228>)
 8000f0a:	a904      	add	r1, sp, #16
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	f000 f879 	bl	8001004 <_printf_i>
 8000f12:	e7e4      	b.n	8000ede <_vfiprintf_r+0x1e6>
 8000f14:	08001612 	.word	0x08001612
 8000f18:	0800161c 	.word	0x0800161c
 8000f1c:	00000000 	.word	0x00000000
 8000f20:	08000cd3 	.word	0x08000cd3
 8000f24:	08001618 	.word	0x08001618

08000f28 <_printf_common>:
 8000f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f2c:	4616      	mov	r6, r2
 8000f2e:	4698      	mov	r8, r3
 8000f30:	688a      	ldr	r2, [r1, #8]
 8000f32:	690b      	ldr	r3, [r1, #16]
 8000f34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	bfb8      	it	lt
 8000f3c:	4613      	movlt	r3, r2
 8000f3e:	6033      	str	r3, [r6, #0]
 8000f40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f44:	4607      	mov	r7, r0
 8000f46:	460c      	mov	r4, r1
 8000f48:	b10a      	cbz	r2, 8000f4e <_printf_common+0x26>
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	6033      	str	r3, [r6, #0]
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	0699      	lsls	r1, r3, #26
 8000f52:	bf42      	ittt	mi
 8000f54:	6833      	ldrmi	r3, [r6, #0]
 8000f56:	3302      	addmi	r3, #2
 8000f58:	6033      	strmi	r3, [r6, #0]
 8000f5a:	6825      	ldr	r5, [r4, #0]
 8000f5c:	f015 0506 	ands.w	r5, r5, #6
 8000f60:	d106      	bne.n	8000f70 <_printf_common+0x48>
 8000f62:	f104 0a19 	add.w	sl, r4, #25
 8000f66:	68e3      	ldr	r3, [r4, #12]
 8000f68:	6832      	ldr	r2, [r6, #0]
 8000f6a:	1a9b      	subs	r3, r3, r2
 8000f6c:	42ab      	cmp	r3, r5
 8000f6e:	dc26      	bgt.n	8000fbe <_printf_common+0x96>
 8000f70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f74:	6822      	ldr	r2, [r4, #0]
 8000f76:	3b00      	subs	r3, #0
 8000f78:	bf18      	it	ne
 8000f7a:	2301      	movne	r3, #1
 8000f7c:	0692      	lsls	r2, r2, #26
 8000f7e:	d42b      	bmi.n	8000fd8 <_printf_common+0xb0>
 8000f80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f84:	4641      	mov	r1, r8
 8000f86:	4638      	mov	r0, r7
 8000f88:	47c8      	blx	r9
 8000f8a:	3001      	adds	r0, #1
 8000f8c:	d01e      	beq.n	8000fcc <_printf_common+0xa4>
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	6922      	ldr	r2, [r4, #16]
 8000f92:	f003 0306 	and.w	r3, r3, #6
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf02      	ittt	eq
 8000f9a:	68e5      	ldreq	r5, [r4, #12]
 8000f9c:	6833      	ldreq	r3, [r6, #0]
 8000f9e:	1aed      	subeq	r5, r5, r3
 8000fa0:	68a3      	ldr	r3, [r4, #8]
 8000fa2:	bf0c      	ite	eq
 8000fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fa8:	2500      	movne	r5, #0
 8000faa:	4293      	cmp	r3, r2
 8000fac:	bfc4      	itt	gt
 8000fae:	1a9b      	subgt	r3, r3, r2
 8000fb0:	18ed      	addgt	r5, r5, r3
 8000fb2:	2600      	movs	r6, #0
 8000fb4:	341a      	adds	r4, #26
 8000fb6:	42b5      	cmp	r5, r6
 8000fb8:	d11a      	bne.n	8000ff0 <_printf_common+0xc8>
 8000fba:	2000      	movs	r0, #0
 8000fbc:	e008      	b.n	8000fd0 <_printf_common+0xa8>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	4652      	mov	r2, sl
 8000fc2:	4641      	mov	r1, r8
 8000fc4:	4638      	mov	r0, r7
 8000fc6:	47c8      	blx	r9
 8000fc8:	3001      	adds	r0, #1
 8000fca:	d103      	bne.n	8000fd4 <_printf_common+0xac>
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd4:	3501      	adds	r5, #1
 8000fd6:	e7c6      	b.n	8000f66 <_printf_common+0x3e>
 8000fd8:	18e1      	adds	r1, r4, r3
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	2030      	movs	r0, #48	@ 0x30
 8000fde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000fe2:	4422      	add	r2, r4
 8000fe4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000fe8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000fec:	3302      	adds	r3, #2
 8000fee:	e7c7      	b.n	8000f80 <_printf_common+0x58>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	4622      	mov	r2, r4
 8000ff4:	4641      	mov	r1, r8
 8000ff6:	4638      	mov	r0, r7
 8000ff8:	47c8      	blx	r9
 8000ffa:	3001      	adds	r0, #1
 8000ffc:	d0e6      	beq.n	8000fcc <_printf_common+0xa4>
 8000ffe:	3601      	adds	r6, #1
 8001000:	e7d9      	b.n	8000fb6 <_printf_common+0x8e>
	...

08001004 <_printf_i>:
 8001004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001008:	7e0f      	ldrb	r7, [r1, #24]
 800100a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800100c:	2f78      	cmp	r7, #120	@ 0x78
 800100e:	4691      	mov	r9, r2
 8001010:	4680      	mov	r8, r0
 8001012:	460c      	mov	r4, r1
 8001014:	469a      	mov	sl, r3
 8001016:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800101a:	d807      	bhi.n	800102c <_printf_i+0x28>
 800101c:	2f62      	cmp	r7, #98	@ 0x62
 800101e:	d80a      	bhi.n	8001036 <_printf_i+0x32>
 8001020:	2f00      	cmp	r7, #0
 8001022:	f000 80d2 	beq.w	80011ca <_printf_i+0x1c6>
 8001026:	2f58      	cmp	r7, #88	@ 0x58
 8001028:	f000 80b9 	beq.w	800119e <_printf_i+0x19a>
 800102c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001030:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001034:	e03a      	b.n	80010ac <_printf_i+0xa8>
 8001036:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800103a:	2b15      	cmp	r3, #21
 800103c:	d8f6      	bhi.n	800102c <_printf_i+0x28>
 800103e:	a101      	add	r1, pc, #4	@ (adr r1, 8001044 <_printf_i+0x40>)
 8001040:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001044:	0800109d 	.word	0x0800109d
 8001048:	080010b1 	.word	0x080010b1
 800104c:	0800102d 	.word	0x0800102d
 8001050:	0800102d 	.word	0x0800102d
 8001054:	0800102d 	.word	0x0800102d
 8001058:	0800102d 	.word	0x0800102d
 800105c:	080010b1 	.word	0x080010b1
 8001060:	0800102d 	.word	0x0800102d
 8001064:	0800102d 	.word	0x0800102d
 8001068:	0800102d 	.word	0x0800102d
 800106c:	0800102d 	.word	0x0800102d
 8001070:	080011b1 	.word	0x080011b1
 8001074:	080010db 	.word	0x080010db
 8001078:	0800116b 	.word	0x0800116b
 800107c:	0800102d 	.word	0x0800102d
 8001080:	0800102d 	.word	0x0800102d
 8001084:	080011d3 	.word	0x080011d3
 8001088:	0800102d 	.word	0x0800102d
 800108c:	080010db 	.word	0x080010db
 8001090:	0800102d 	.word	0x0800102d
 8001094:	0800102d 	.word	0x0800102d
 8001098:	08001173 	.word	0x08001173
 800109c:	6833      	ldr	r3, [r6, #0]
 800109e:	1d1a      	adds	r2, r3, #4
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6032      	str	r2, [r6, #0]
 80010a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80010ac:	2301      	movs	r3, #1
 80010ae:	e09d      	b.n	80011ec <_printf_i+0x1e8>
 80010b0:	6833      	ldr	r3, [r6, #0]
 80010b2:	6820      	ldr	r0, [r4, #0]
 80010b4:	1d19      	adds	r1, r3, #4
 80010b6:	6031      	str	r1, [r6, #0]
 80010b8:	0606      	lsls	r6, r0, #24
 80010ba:	d501      	bpl.n	80010c0 <_printf_i+0xbc>
 80010bc:	681d      	ldr	r5, [r3, #0]
 80010be:	e003      	b.n	80010c8 <_printf_i+0xc4>
 80010c0:	0645      	lsls	r5, r0, #25
 80010c2:	d5fb      	bpl.n	80010bc <_printf_i+0xb8>
 80010c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80010c8:	2d00      	cmp	r5, #0
 80010ca:	da03      	bge.n	80010d4 <_printf_i+0xd0>
 80010cc:	232d      	movs	r3, #45	@ 0x2d
 80010ce:	426d      	negs	r5, r5
 80010d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010d4:	4859      	ldr	r0, [pc, #356]	@ (800123c <_printf_i+0x238>)
 80010d6:	230a      	movs	r3, #10
 80010d8:	e011      	b.n	80010fe <_printf_i+0xfa>
 80010da:	6821      	ldr	r1, [r4, #0]
 80010dc:	6833      	ldr	r3, [r6, #0]
 80010de:	0608      	lsls	r0, r1, #24
 80010e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80010e4:	d402      	bmi.n	80010ec <_printf_i+0xe8>
 80010e6:	0649      	lsls	r1, r1, #25
 80010e8:	bf48      	it	mi
 80010ea:	b2ad      	uxthmi	r5, r5
 80010ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80010ee:	4853      	ldr	r0, [pc, #332]	@ (800123c <_printf_i+0x238>)
 80010f0:	6033      	str	r3, [r6, #0]
 80010f2:	bf14      	ite	ne
 80010f4:	230a      	movne	r3, #10
 80010f6:	2308      	moveq	r3, #8
 80010f8:	2100      	movs	r1, #0
 80010fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80010fe:	6866      	ldr	r6, [r4, #4]
 8001100:	60a6      	str	r6, [r4, #8]
 8001102:	2e00      	cmp	r6, #0
 8001104:	bfa2      	ittt	ge
 8001106:	6821      	ldrge	r1, [r4, #0]
 8001108:	f021 0104 	bicge.w	r1, r1, #4
 800110c:	6021      	strge	r1, [r4, #0]
 800110e:	b90d      	cbnz	r5, 8001114 <_printf_i+0x110>
 8001110:	2e00      	cmp	r6, #0
 8001112:	d04b      	beq.n	80011ac <_printf_i+0x1a8>
 8001114:	4616      	mov	r6, r2
 8001116:	fbb5 f1f3 	udiv	r1, r5, r3
 800111a:	fb03 5711 	mls	r7, r3, r1, r5
 800111e:	5dc7      	ldrb	r7, [r0, r7]
 8001120:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001124:	462f      	mov	r7, r5
 8001126:	42bb      	cmp	r3, r7
 8001128:	460d      	mov	r5, r1
 800112a:	d9f4      	bls.n	8001116 <_printf_i+0x112>
 800112c:	2b08      	cmp	r3, #8
 800112e:	d10b      	bne.n	8001148 <_printf_i+0x144>
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	07df      	lsls	r7, r3, #31
 8001134:	d508      	bpl.n	8001148 <_printf_i+0x144>
 8001136:	6923      	ldr	r3, [r4, #16]
 8001138:	6861      	ldr	r1, [r4, #4]
 800113a:	4299      	cmp	r1, r3
 800113c:	bfde      	ittt	le
 800113e:	2330      	movle	r3, #48	@ 0x30
 8001140:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001144:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001148:	1b92      	subs	r2, r2, r6
 800114a:	6122      	str	r2, [r4, #16]
 800114c:	f8cd a000 	str.w	sl, [sp]
 8001150:	464b      	mov	r3, r9
 8001152:	aa03      	add	r2, sp, #12
 8001154:	4621      	mov	r1, r4
 8001156:	4640      	mov	r0, r8
 8001158:	f7ff fee6 	bl	8000f28 <_printf_common>
 800115c:	3001      	adds	r0, #1
 800115e:	d14a      	bne.n	80011f6 <_printf_i+0x1f2>
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	b004      	add	sp, #16
 8001166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	6023      	str	r3, [r4, #0]
 8001172:	4833      	ldr	r0, [pc, #204]	@ (8001240 <_printf_i+0x23c>)
 8001174:	2778      	movs	r7, #120	@ 0x78
 8001176:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	6831      	ldr	r1, [r6, #0]
 800117e:	061f      	lsls	r7, r3, #24
 8001180:	f851 5b04 	ldr.w	r5, [r1], #4
 8001184:	d402      	bmi.n	800118c <_printf_i+0x188>
 8001186:	065f      	lsls	r7, r3, #25
 8001188:	bf48      	it	mi
 800118a:	b2ad      	uxthmi	r5, r5
 800118c:	6031      	str	r1, [r6, #0]
 800118e:	07d9      	lsls	r1, r3, #31
 8001190:	bf44      	itt	mi
 8001192:	f043 0320 	orrmi.w	r3, r3, #32
 8001196:	6023      	strmi	r3, [r4, #0]
 8001198:	b11d      	cbz	r5, 80011a2 <_printf_i+0x19e>
 800119a:	2310      	movs	r3, #16
 800119c:	e7ac      	b.n	80010f8 <_printf_i+0xf4>
 800119e:	4827      	ldr	r0, [pc, #156]	@ (800123c <_printf_i+0x238>)
 80011a0:	e7e9      	b.n	8001176 <_printf_i+0x172>
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	f023 0320 	bic.w	r3, r3, #32
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	e7f6      	b.n	800119a <_printf_i+0x196>
 80011ac:	4616      	mov	r6, r2
 80011ae:	e7bd      	b.n	800112c <_printf_i+0x128>
 80011b0:	6833      	ldr	r3, [r6, #0]
 80011b2:	6825      	ldr	r5, [r4, #0]
 80011b4:	6961      	ldr	r1, [r4, #20]
 80011b6:	1d18      	adds	r0, r3, #4
 80011b8:	6030      	str	r0, [r6, #0]
 80011ba:	062e      	lsls	r6, r5, #24
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	d501      	bpl.n	80011c4 <_printf_i+0x1c0>
 80011c0:	6019      	str	r1, [r3, #0]
 80011c2:	e002      	b.n	80011ca <_printf_i+0x1c6>
 80011c4:	0668      	lsls	r0, r5, #25
 80011c6:	d5fb      	bpl.n	80011c0 <_printf_i+0x1bc>
 80011c8:	8019      	strh	r1, [r3, #0]
 80011ca:	2300      	movs	r3, #0
 80011cc:	6123      	str	r3, [r4, #16]
 80011ce:	4616      	mov	r6, r2
 80011d0:	e7bc      	b.n	800114c <_printf_i+0x148>
 80011d2:	6833      	ldr	r3, [r6, #0]
 80011d4:	1d1a      	adds	r2, r3, #4
 80011d6:	6032      	str	r2, [r6, #0]
 80011d8:	681e      	ldr	r6, [r3, #0]
 80011da:	6862      	ldr	r2, [r4, #4]
 80011dc:	2100      	movs	r1, #0
 80011de:	4630      	mov	r0, r6
 80011e0:	f7ff f816 	bl	8000210 <memchr>
 80011e4:	b108      	cbz	r0, 80011ea <_printf_i+0x1e6>
 80011e6:	1b80      	subs	r0, r0, r6
 80011e8:	6060      	str	r0, [r4, #4]
 80011ea:	6863      	ldr	r3, [r4, #4]
 80011ec:	6123      	str	r3, [r4, #16]
 80011ee:	2300      	movs	r3, #0
 80011f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011f4:	e7aa      	b.n	800114c <_printf_i+0x148>
 80011f6:	6923      	ldr	r3, [r4, #16]
 80011f8:	4632      	mov	r2, r6
 80011fa:	4649      	mov	r1, r9
 80011fc:	4640      	mov	r0, r8
 80011fe:	47d0      	blx	sl
 8001200:	3001      	adds	r0, #1
 8001202:	d0ad      	beq.n	8001160 <_printf_i+0x15c>
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	079b      	lsls	r3, r3, #30
 8001208:	d413      	bmi.n	8001232 <_printf_i+0x22e>
 800120a:	68e0      	ldr	r0, [r4, #12]
 800120c:	9b03      	ldr	r3, [sp, #12]
 800120e:	4298      	cmp	r0, r3
 8001210:	bfb8      	it	lt
 8001212:	4618      	movlt	r0, r3
 8001214:	e7a6      	b.n	8001164 <_printf_i+0x160>
 8001216:	2301      	movs	r3, #1
 8001218:	4632      	mov	r2, r6
 800121a:	4649      	mov	r1, r9
 800121c:	4640      	mov	r0, r8
 800121e:	47d0      	blx	sl
 8001220:	3001      	adds	r0, #1
 8001222:	d09d      	beq.n	8001160 <_printf_i+0x15c>
 8001224:	3501      	adds	r5, #1
 8001226:	68e3      	ldr	r3, [r4, #12]
 8001228:	9903      	ldr	r1, [sp, #12]
 800122a:	1a5b      	subs	r3, r3, r1
 800122c:	42ab      	cmp	r3, r5
 800122e:	dcf2      	bgt.n	8001216 <_printf_i+0x212>
 8001230:	e7eb      	b.n	800120a <_printf_i+0x206>
 8001232:	2500      	movs	r5, #0
 8001234:	f104 0619 	add.w	r6, r4, #25
 8001238:	e7f5      	b.n	8001226 <_printf_i+0x222>
 800123a:	bf00      	nop
 800123c:	08001623 	.word	0x08001623
 8001240:	08001634 	.word	0x08001634

08001244 <__sflush_r>:
 8001244:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800124c:	0716      	lsls	r6, r2, #28
 800124e:	4605      	mov	r5, r0
 8001250:	460c      	mov	r4, r1
 8001252:	d454      	bmi.n	80012fe <__sflush_r+0xba>
 8001254:	684b      	ldr	r3, [r1, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	dc02      	bgt.n	8001260 <__sflush_r+0x1c>
 800125a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800125c:	2b00      	cmp	r3, #0
 800125e:	dd48      	ble.n	80012f2 <__sflush_r+0xae>
 8001260:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001262:	2e00      	cmp	r6, #0
 8001264:	d045      	beq.n	80012f2 <__sflush_r+0xae>
 8001266:	2300      	movs	r3, #0
 8001268:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800126c:	682f      	ldr	r7, [r5, #0]
 800126e:	6a21      	ldr	r1, [r4, #32]
 8001270:	602b      	str	r3, [r5, #0]
 8001272:	d030      	beq.n	80012d6 <__sflush_r+0x92>
 8001274:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001276:	89a3      	ldrh	r3, [r4, #12]
 8001278:	0759      	lsls	r1, r3, #29
 800127a:	d505      	bpl.n	8001288 <__sflush_r+0x44>
 800127c:	6863      	ldr	r3, [r4, #4]
 800127e:	1ad2      	subs	r2, r2, r3
 8001280:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001282:	b10b      	cbz	r3, 8001288 <__sflush_r+0x44>
 8001284:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001286:	1ad2      	subs	r2, r2, r3
 8001288:	2300      	movs	r3, #0
 800128a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800128c:	6a21      	ldr	r1, [r4, #32]
 800128e:	4628      	mov	r0, r5
 8001290:	47b0      	blx	r6
 8001292:	1c43      	adds	r3, r0, #1
 8001294:	89a3      	ldrh	r3, [r4, #12]
 8001296:	d106      	bne.n	80012a6 <__sflush_r+0x62>
 8001298:	6829      	ldr	r1, [r5, #0]
 800129a:	291d      	cmp	r1, #29
 800129c:	d82b      	bhi.n	80012f6 <__sflush_r+0xb2>
 800129e:	4a2a      	ldr	r2, [pc, #168]	@ (8001348 <__sflush_r+0x104>)
 80012a0:	410a      	asrs	r2, r1
 80012a2:	07d6      	lsls	r6, r2, #31
 80012a4:	d427      	bmi.n	80012f6 <__sflush_r+0xb2>
 80012a6:	2200      	movs	r2, #0
 80012a8:	6062      	str	r2, [r4, #4]
 80012aa:	04d9      	lsls	r1, r3, #19
 80012ac:	6922      	ldr	r2, [r4, #16]
 80012ae:	6022      	str	r2, [r4, #0]
 80012b0:	d504      	bpl.n	80012bc <__sflush_r+0x78>
 80012b2:	1c42      	adds	r2, r0, #1
 80012b4:	d101      	bne.n	80012ba <__sflush_r+0x76>
 80012b6:	682b      	ldr	r3, [r5, #0]
 80012b8:	b903      	cbnz	r3, 80012bc <__sflush_r+0x78>
 80012ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80012bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012be:	602f      	str	r7, [r5, #0]
 80012c0:	b1b9      	cbz	r1, 80012f2 <__sflush_r+0xae>
 80012c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012c6:	4299      	cmp	r1, r3
 80012c8:	d002      	beq.n	80012d0 <__sflush_r+0x8c>
 80012ca:	4628      	mov	r0, r5
 80012cc:	f7ff fca0 	bl	8000c10 <_free_r>
 80012d0:	2300      	movs	r3, #0
 80012d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80012d4:	e00d      	b.n	80012f2 <__sflush_r+0xae>
 80012d6:	2301      	movs	r3, #1
 80012d8:	4628      	mov	r0, r5
 80012da:	47b0      	blx	r6
 80012dc:	4602      	mov	r2, r0
 80012de:	1c50      	adds	r0, r2, #1
 80012e0:	d1c9      	bne.n	8001276 <__sflush_r+0x32>
 80012e2:	682b      	ldr	r3, [r5, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0c6      	beq.n	8001276 <__sflush_r+0x32>
 80012e8:	2b1d      	cmp	r3, #29
 80012ea:	d001      	beq.n	80012f0 <__sflush_r+0xac>
 80012ec:	2b16      	cmp	r3, #22
 80012ee:	d11e      	bne.n	800132e <__sflush_r+0xea>
 80012f0:	602f      	str	r7, [r5, #0]
 80012f2:	2000      	movs	r0, #0
 80012f4:	e022      	b.n	800133c <__sflush_r+0xf8>
 80012f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	e01b      	b.n	8001336 <__sflush_r+0xf2>
 80012fe:	690f      	ldr	r7, [r1, #16]
 8001300:	2f00      	cmp	r7, #0
 8001302:	d0f6      	beq.n	80012f2 <__sflush_r+0xae>
 8001304:	0793      	lsls	r3, r2, #30
 8001306:	680e      	ldr	r6, [r1, #0]
 8001308:	bf08      	it	eq
 800130a:	694b      	ldreq	r3, [r1, #20]
 800130c:	600f      	str	r7, [r1, #0]
 800130e:	bf18      	it	ne
 8001310:	2300      	movne	r3, #0
 8001312:	eba6 0807 	sub.w	r8, r6, r7
 8001316:	608b      	str	r3, [r1, #8]
 8001318:	f1b8 0f00 	cmp.w	r8, #0
 800131c:	dde9      	ble.n	80012f2 <__sflush_r+0xae>
 800131e:	6a21      	ldr	r1, [r4, #32]
 8001320:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001322:	4643      	mov	r3, r8
 8001324:	463a      	mov	r2, r7
 8001326:	4628      	mov	r0, r5
 8001328:	47b0      	blx	r6
 800132a:	2800      	cmp	r0, #0
 800132c:	dc08      	bgt.n	8001340 <__sflush_r+0xfc>
 800132e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001336:	81a3      	strh	r3, [r4, #12]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001340:	4407      	add	r7, r0
 8001342:	eba8 0800 	sub.w	r8, r8, r0
 8001346:	e7e7      	b.n	8001318 <__sflush_r+0xd4>
 8001348:	dfbffffe 	.word	0xdfbffffe

0800134c <_fflush_r>:
 800134c:	b538      	push	{r3, r4, r5, lr}
 800134e:	690b      	ldr	r3, [r1, #16]
 8001350:	4605      	mov	r5, r0
 8001352:	460c      	mov	r4, r1
 8001354:	b913      	cbnz	r3, 800135c <_fflush_r+0x10>
 8001356:	2500      	movs	r5, #0
 8001358:	4628      	mov	r0, r5
 800135a:	bd38      	pop	{r3, r4, r5, pc}
 800135c:	b118      	cbz	r0, 8001366 <_fflush_r+0x1a>
 800135e:	6a03      	ldr	r3, [r0, #32]
 8001360:	b90b      	cbnz	r3, 8001366 <_fflush_r+0x1a>
 8001362:	f7ff fb3d 	bl	80009e0 <__sinit>
 8001366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f3      	beq.n	8001356 <_fflush_r+0xa>
 800136e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001370:	07d0      	lsls	r0, r2, #31
 8001372:	d404      	bmi.n	800137e <_fflush_r+0x32>
 8001374:	0599      	lsls	r1, r3, #22
 8001376:	d402      	bmi.n	800137e <_fflush_r+0x32>
 8001378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800137a:	f7ff fc46 	bl	8000c0a <__retarget_lock_acquire_recursive>
 800137e:	4628      	mov	r0, r5
 8001380:	4621      	mov	r1, r4
 8001382:	f7ff ff5f 	bl	8001244 <__sflush_r>
 8001386:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001388:	07da      	lsls	r2, r3, #31
 800138a:	4605      	mov	r5, r0
 800138c:	d4e4      	bmi.n	8001358 <_fflush_r+0xc>
 800138e:	89a3      	ldrh	r3, [r4, #12]
 8001390:	059b      	lsls	r3, r3, #22
 8001392:	d4e1      	bmi.n	8001358 <_fflush_r+0xc>
 8001394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001396:	f7ff fc39 	bl	8000c0c <__retarget_lock_release_recursive>
 800139a:	e7dd      	b.n	8001358 <_fflush_r+0xc>

0800139c <__swhatbuf_r>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	460c      	mov	r4, r1
 80013a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013a4:	2900      	cmp	r1, #0
 80013a6:	b096      	sub	sp, #88	@ 0x58
 80013a8:	4615      	mov	r5, r2
 80013aa:	461e      	mov	r6, r3
 80013ac:	da0d      	bge.n	80013ca <__swhatbuf_r+0x2e>
 80013ae:	89a3      	ldrh	r3, [r4, #12]
 80013b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013b4:	f04f 0100 	mov.w	r1, #0
 80013b8:	bf14      	ite	ne
 80013ba:	2340      	movne	r3, #64	@ 0x40
 80013bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80013c0:	2000      	movs	r0, #0
 80013c2:	6031      	str	r1, [r6, #0]
 80013c4:	602b      	str	r3, [r5, #0]
 80013c6:	b016      	add	sp, #88	@ 0x58
 80013c8:	bd70      	pop	{r4, r5, r6, pc}
 80013ca:	466a      	mov	r2, sp
 80013cc:	f000 f8dc 	bl	8001588 <_fstat_r>
 80013d0:	2800      	cmp	r0, #0
 80013d2:	dbec      	blt.n	80013ae <__swhatbuf_r+0x12>
 80013d4:	9901      	ldr	r1, [sp, #4]
 80013d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80013de:	4259      	negs	r1, r3
 80013e0:	4159      	adcs	r1, r3
 80013e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013e6:	e7eb      	b.n	80013c0 <__swhatbuf_r+0x24>

080013e8 <__smakebuf_r>:
 80013e8:	898b      	ldrh	r3, [r1, #12]
 80013ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013ec:	079d      	lsls	r5, r3, #30
 80013ee:	4606      	mov	r6, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	d507      	bpl.n	8001404 <__smakebuf_r+0x1c>
 80013f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80013f8:	6023      	str	r3, [r4, #0]
 80013fa:	6123      	str	r3, [r4, #16]
 80013fc:	2301      	movs	r3, #1
 80013fe:	6163      	str	r3, [r4, #20]
 8001400:	b003      	add	sp, #12
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001404:	ab01      	add	r3, sp, #4
 8001406:	466a      	mov	r2, sp
 8001408:	f7ff ffc8 	bl	800139c <__swhatbuf_r>
 800140c:	9f00      	ldr	r7, [sp, #0]
 800140e:	4605      	mov	r5, r0
 8001410:	4639      	mov	r1, r7
 8001412:	4630      	mov	r0, r6
 8001414:	f7ff f9cc 	bl	80007b0 <_malloc_r>
 8001418:	b948      	cbnz	r0, 800142e <__smakebuf_r+0x46>
 800141a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800141e:	059a      	lsls	r2, r3, #22
 8001420:	d4ee      	bmi.n	8001400 <__smakebuf_r+0x18>
 8001422:	f023 0303 	bic.w	r3, r3, #3
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	81a3      	strh	r3, [r4, #12]
 800142c:	e7e2      	b.n	80013f4 <__smakebuf_r+0xc>
 800142e:	89a3      	ldrh	r3, [r4, #12]
 8001430:	6020      	str	r0, [r4, #0]
 8001432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001436:	81a3      	strh	r3, [r4, #12]
 8001438:	9b01      	ldr	r3, [sp, #4]
 800143a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800143e:	b15b      	cbz	r3, 8001458 <__smakebuf_r+0x70>
 8001440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001444:	4630      	mov	r0, r6
 8001446:	f000 f8b1 	bl	80015ac <_isatty_r>
 800144a:	b128      	cbz	r0, 8001458 <__smakebuf_r+0x70>
 800144c:	89a3      	ldrh	r3, [r4, #12]
 800144e:	f023 0303 	bic.w	r3, r3, #3
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	81a3      	strh	r3, [r4, #12]
 8001458:	89a3      	ldrh	r3, [r4, #12]
 800145a:	431d      	orrs	r5, r3
 800145c:	81a5      	strh	r5, [r4, #12]
 800145e:	e7cf      	b.n	8001400 <__smakebuf_r+0x18>

08001460 <__swbuf_r>:
 8001460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001462:	460e      	mov	r6, r1
 8001464:	4614      	mov	r4, r2
 8001466:	4605      	mov	r5, r0
 8001468:	b118      	cbz	r0, 8001472 <__swbuf_r+0x12>
 800146a:	6a03      	ldr	r3, [r0, #32]
 800146c:	b90b      	cbnz	r3, 8001472 <__swbuf_r+0x12>
 800146e:	f7ff fab7 	bl	80009e0 <__sinit>
 8001472:	69a3      	ldr	r3, [r4, #24]
 8001474:	60a3      	str	r3, [r4, #8]
 8001476:	89a3      	ldrh	r3, [r4, #12]
 8001478:	071a      	lsls	r2, r3, #28
 800147a:	d501      	bpl.n	8001480 <__swbuf_r+0x20>
 800147c:	6923      	ldr	r3, [r4, #16]
 800147e:	b943      	cbnz	r3, 8001492 <__swbuf_r+0x32>
 8001480:	4621      	mov	r1, r4
 8001482:	4628      	mov	r0, r5
 8001484:	f000 f82a 	bl	80014dc <__swsetup_r>
 8001488:	b118      	cbz	r0, 8001492 <__swbuf_r+0x32>
 800148a:	f04f 37ff 	mov.w	r7, #4294967295
 800148e:	4638      	mov	r0, r7
 8001490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	6922      	ldr	r2, [r4, #16]
 8001496:	1a98      	subs	r0, r3, r2
 8001498:	6963      	ldr	r3, [r4, #20]
 800149a:	b2f6      	uxtb	r6, r6
 800149c:	4283      	cmp	r3, r0
 800149e:	4637      	mov	r7, r6
 80014a0:	dc05      	bgt.n	80014ae <__swbuf_r+0x4e>
 80014a2:	4621      	mov	r1, r4
 80014a4:	4628      	mov	r0, r5
 80014a6:	f7ff ff51 	bl	800134c <_fflush_r>
 80014aa:	2800      	cmp	r0, #0
 80014ac:	d1ed      	bne.n	800148a <__swbuf_r+0x2a>
 80014ae:	68a3      	ldr	r3, [r4, #8]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	60a3      	str	r3, [r4, #8]
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	6022      	str	r2, [r4, #0]
 80014ba:	701e      	strb	r6, [r3, #0]
 80014bc:	6962      	ldr	r2, [r4, #20]
 80014be:	1c43      	adds	r3, r0, #1
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d004      	beq.n	80014ce <__swbuf_r+0x6e>
 80014c4:	89a3      	ldrh	r3, [r4, #12]
 80014c6:	07db      	lsls	r3, r3, #31
 80014c8:	d5e1      	bpl.n	800148e <__swbuf_r+0x2e>
 80014ca:	2e0a      	cmp	r6, #10
 80014cc:	d1df      	bne.n	800148e <__swbuf_r+0x2e>
 80014ce:	4621      	mov	r1, r4
 80014d0:	4628      	mov	r0, r5
 80014d2:	f7ff ff3b 	bl	800134c <_fflush_r>
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d0d9      	beq.n	800148e <__swbuf_r+0x2e>
 80014da:	e7d6      	b.n	800148a <__swbuf_r+0x2a>

080014dc <__swsetup_r>:
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	4b29      	ldr	r3, [pc, #164]	@ (8001584 <__swsetup_r+0xa8>)
 80014e0:	4605      	mov	r5, r0
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	460c      	mov	r4, r1
 80014e6:	b118      	cbz	r0, 80014f0 <__swsetup_r+0x14>
 80014e8:	6a03      	ldr	r3, [r0, #32]
 80014ea:	b90b      	cbnz	r3, 80014f0 <__swsetup_r+0x14>
 80014ec:	f7ff fa78 	bl	80009e0 <__sinit>
 80014f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014f4:	0719      	lsls	r1, r3, #28
 80014f6:	d422      	bmi.n	800153e <__swsetup_r+0x62>
 80014f8:	06da      	lsls	r2, r3, #27
 80014fa:	d407      	bmi.n	800150c <__swsetup_r+0x30>
 80014fc:	2209      	movs	r2, #9
 80014fe:	602a      	str	r2, [r5, #0]
 8001500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001504:	81a3      	strh	r3, [r4, #12]
 8001506:	f04f 30ff 	mov.w	r0, #4294967295
 800150a:	e033      	b.n	8001574 <__swsetup_r+0x98>
 800150c:	0758      	lsls	r0, r3, #29
 800150e:	d512      	bpl.n	8001536 <__swsetup_r+0x5a>
 8001510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001512:	b141      	cbz	r1, 8001526 <__swsetup_r+0x4a>
 8001514:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001518:	4299      	cmp	r1, r3
 800151a:	d002      	beq.n	8001522 <__swsetup_r+0x46>
 800151c:	4628      	mov	r0, r5
 800151e:	f7ff fb77 	bl	8000c10 <_free_r>
 8001522:	2300      	movs	r3, #0
 8001524:	6363      	str	r3, [r4, #52]	@ 0x34
 8001526:	89a3      	ldrh	r3, [r4, #12]
 8001528:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800152c:	81a3      	strh	r3, [r4, #12]
 800152e:	2300      	movs	r3, #0
 8001530:	6063      	str	r3, [r4, #4]
 8001532:	6923      	ldr	r3, [r4, #16]
 8001534:	6023      	str	r3, [r4, #0]
 8001536:	89a3      	ldrh	r3, [r4, #12]
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	81a3      	strh	r3, [r4, #12]
 800153e:	6923      	ldr	r3, [r4, #16]
 8001540:	b94b      	cbnz	r3, 8001556 <__swsetup_r+0x7a>
 8001542:	89a3      	ldrh	r3, [r4, #12]
 8001544:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800154c:	d003      	beq.n	8001556 <__swsetup_r+0x7a>
 800154e:	4621      	mov	r1, r4
 8001550:	4628      	mov	r0, r5
 8001552:	f7ff ff49 	bl	80013e8 <__smakebuf_r>
 8001556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800155a:	f013 0201 	ands.w	r2, r3, #1
 800155e:	d00a      	beq.n	8001576 <__swsetup_r+0x9a>
 8001560:	2200      	movs	r2, #0
 8001562:	60a2      	str	r2, [r4, #8]
 8001564:	6962      	ldr	r2, [r4, #20]
 8001566:	4252      	negs	r2, r2
 8001568:	61a2      	str	r2, [r4, #24]
 800156a:	6922      	ldr	r2, [r4, #16]
 800156c:	b942      	cbnz	r2, 8001580 <__swsetup_r+0xa4>
 800156e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001572:	d1c5      	bne.n	8001500 <__swsetup_r+0x24>
 8001574:	bd38      	pop	{r3, r4, r5, pc}
 8001576:	0799      	lsls	r1, r3, #30
 8001578:	bf58      	it	pl
 800157a:	6962      	ldrpl	r2, [r4, #20]
 800157c:	60a2      	str	r2, [r4, #8]
 800157e:	e7f4      	b.n	800156a <__swsetup_r+0x8e>
 8001580:	2000      	movs	r0, #0
 8001582:	e7f7      	b.n	8001574 <__swsetup_r+0x98>
 8001584:	2000001c 	.word	0x2000001c

08001588 <_fstat_r>:
 8001588:	b538      	push	{r3, r4, r5, lr}
 800158a:	4d07      	ldr	r5, [pc, #28]	@ (80015a8 <_fstat_r+0x20>)
 800158c:	2300      	movs	r3, #0
 800158e:	4604      	mov	r4, r0
 8001590:	4608      	mov	r0, r1
 8001592:	4611      	mov	r1, r2
 8001594:	602b      	str	r3, [r5, #0]
 8001596:	f7fe ff7e 	bl	8000496 <_fstat>
 800159a:	1c43      	adds	r3, r0, #1
 800159c:	d102      	bne.n	80015a4 <_fstat_r+0x1c>
 800159e:	682b      	ldr	r3, [r5, #0]
 80015a0:	b103      	cbz	r3, 80015a4 <_fstat_r+0x1c>
 80015a2:	6023      	str	r3, [r4, #0]
 80015a4:	bd38      	pop	{r3, r4, r5, pc}
 80015a6:	bf00      	nop
 80015a8:	200009d4 	.word	0x200009d4

080015ac <_isatty_r>:
 80015ac:	b538      	push	{r3, r4, r5, lr}
 80015ae:	4d06      	ldr	r5, [pc, #24]	@ (80015c8 <_isatty_r+0x1c>)
 80015b0:	2300      	movs	r3, #0
 80015b2:	4604      	mov	r4, r0
 80015b4:	4608      	mov	r0, r1
 80015b6:	602b      	str	r3, [r5, #0]
 80015b8:	f7fe ff7d 	bl	80004b6 <_isatty>
 80015bc:	1c43      	adds	r3, r0, #1
 80015be:	d102      	bne.n	80015c6 <_isatty_r+0x1a>
 80015c0:	682b      	ldr	r3, [r5, #0]
 80015c2:	b103      	cbz	r3, 80015c6 <_isatty_r+0x1a>
 80015c4:	6023      	str	r3, [r4, #0]
 80015c6:	bd38      	pop	{r3, r4, r5, pc}
 80015c8:	200009d4 	.word	0x200009d4

080015cc <_init>:
 80015cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ce:	bf00      	nop
 80015d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015d2:	bc08      	pop	{r3}
 80015d4:	469e      	mov	lr, r3
 80015d6:	4770      	bx	lr

080015d8 <_fini>:
 80015d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015da:	bf00      	nop
 80015dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015de:	bc08      	pop	{r3}
 80015e0:	469e      	mov	lr, r3
 80015e2:	4770      	bx	lr
