
TP_C_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000174c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800191c  0800191c  0000291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a0c  08001a0c  0000306c  2**0
                  CONTENTS
  4 .ARM          00000008  08001a0c  08001a0c  00002a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a14  08001a14  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a14  08001a14  00002a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a18  08001a18  00002a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08001a1c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000970  2000006c  08001a88  0000306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  08001a88  000039dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002931  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c43  00000000  00000000  000059cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00006610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001b2  00000000  00000000  00006898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afaa  00000000  00000000  00006a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004049  00000000  00000000  000219f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f38  00000000  00000000  00025a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6975  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f58  00000000  00000000  000b69b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b7910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001904 	.word	0x08001904

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08001904 	.word	0x08001904

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <CreerFeuille>:
#include <stdint.h>
#include "Arbre.h"
#include <stdlib.h>

void CreerFeuille(struct noeud * arbre[256], uint32_t tab[256]){
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	uint32_t j=0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = 0; i<255;i++ ){
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
 80002c2:	e028      	b.n	8000316 <CreerFeuille+0x66>
		if (tab[i] != 0){
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	4413      	add	r3, r2
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d01e      	beq.n	8000310 <CreerFeuille+0x60>
			  arbre[j] = malloc(sizeof(struct noeud));
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	18d4      	adds	r4, r2, r3
 80002da:	2018      	movs	r0, #24
 80002dc:	f000 fb7c 	bl	80009d8 <malloc>
 80002e0:	4603      	mov	r3, r0
 80002e2:	6023      	str	r3, [r4, #0]
			  arbre[j]->occurence = tab[i];
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	683a      	ldr	r2, [r7, #0]
 80002ea:	441a      	add	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	6879      	ldr	r1, [r7, #4]
 80002f2:	440b      	add	r3, r1
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	6812      	ldr	r2, [r2, #0]
 80002f8:	605a      	str	r2, [r3, #4]
			  arbre[j]->c = (char)i;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	4413      	add	r3, r2
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	68ba      	ldr	r2, [r7, #8]
 8000306:	b2d2      	uxtb	r2, r2
 8000308:	701a      	strb	r2, [r3, #0]
			  j++;
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	3301      	adds	r3, #1
 800030e:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = 0; i<255;i++ ){
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	3301      	adds	r3, #1
 8000314:	60bb      	str	r3, [r7, #8]
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	2bfe      	cmp	r3, #254	@ 0xfe
 800031a:	d9d3      	bls.n	80002c4 <CreerFeuille+0x14>
		}
	}
}
 800031c:	bf00      	nop
 800031e:	bf00      	nop
 8000320:	3714      	adds	r7, #20
 8000322:	46bd      	mov	sp, r7
 8000324:	bd90      	pop	{r4, r7, pc}
	...

08000328 <afficherTabArbreHuffman>:

void afficherTabArbreHuffman(struct noeud* arbre[256], uint32_t taille){
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]
	printf("DÃ©but de Tableau \r\n");
 8000332:	4831      	ldr	r0, [pc, #196]	@ (80003f8 <afficherTabArbreHuffman+0xd0>)
 8000334:	f000 fd30 	bl	8000d98 <puts>
	for(uint32_t i = 0; i<taille;i++ ){
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	e048      	b.n	80003d0 <afficherTabArbreHuffman+0xa8>
			if (arbre[i] != 0){
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d03e      	beq.n	80003ca <afficherTabArbreHuffman+0xa2>
				printf("c = %c \r\n",arbre[i]->c);
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	4413      	add	r3, r2
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4619      	mov	r1, r3
 800035a:	4828      	ldr	r0, [pc, #160]	@ (80003fc <afficherTabArbreHuffman+0xd4>)
 800035c:	f000 fcb4 	bl	8000cc8 <iprintf>
				printf("occurence = %d \r\n",arbre[i]->occurence);
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	4619      	mov	r1, r3
 800036e:	4824      	ldr	r0, [pc, #144]	@ (8000400 <afficherTabArbreHuffman+0xd8>)
 8000370:	f000 fcaa 	bl	8000cc8 <iprintf>
				printf("code = %d \r\n",arbre[i]->code);
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	4413      	add	r3, r2
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	4619      	mov	r1, r3
 8000382:	4820      	ldr	r0, [pc, #128]	@ (8000404 <afficherTabArbreHuffman+0xdc>)
 8000384:	f000 fca0 	bl	8000cc8 <iprintf>
				printf("tailleCode = %d \r\n",arbre[i]->tailleCode);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	4413      	add	r3, r2
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	4619      	mov	r1, r3
 8000396:	481c      	ldr	r0, [pc, #112]	@ (8000408 <afficherTabArbreHuffman+0xe0>)
 8000398:	f000 fc96 	bl	8000cc8 <iprintf>
				printf("gauche = %X \r\n",arbre[i]->gauche);
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	4413      	add	r3, r2
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4619      	mov	r1, r3
 80003aa:	4818      	ldr	r0, [pc, #96]	@ (800040c <afficherTabArbreHuffman+0xe4>)
 80003ac:	f000 fc8c 	bl	8000cc8 <iprintf>
				printf("droite = %X \r\n",arbre[i]->droite);
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	4413      	add	r3, r2
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4619      	mov	r1, r3
 80003be:	4814      	ldr	r0, [pc, #80]	@ (8000410 <afficherTabArbreHuffman+0xe8>)
 80003c0:	f000 fc82 	bl	8000cc8 <iprintf>
				printf("	\r\n");
 80003c4:	4813      	ldr	r0, [pc, #76]	@ (8000414 <afficherTabArbreHuffman+0xec>)
 80003c6:	f000 fce7 	bl	8000d98 <puts>
	for(uint32_t i = 0; i<taille;i++ ){
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	3301      	adds	r3, #1
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d3b2      	bcc.n	800033e <afficherTabArbreHuffman+0x16>
			}
		}
	printf("Fin de Tableau \r\n");
 80003d8:	480f      	ldr	r0, [pc, #60]	@ (8000418 <afficherTabArbreHuffman+0xf0>)
 80003da:	f000 fcdd 	bl	8000d98 <puts>
	printf("	\r\n");
 80003de:	480d      	ldr	r0, [pc, #52]	@ (8000414 <afficherTabArbreHuffman+0xec>)
 80003e0:	f000 fcda 	bl	8000d98 <puts>
	printf("	\r\n");
 80003e4:	480b      	ldr	r0, [pc, #44]	@ (8000414 <afficherTabArbreHuffman+0xec>)
 80003e6:	f000 fcd7 	bl	8000d98 <puts>
	printf("	\r\n");
 80003ea:	480a      	ldr	r0, [pc, #40]	@ (8000414 <afficherTabArbreHuffman+0xec>)
 80003ec:	f000 fcd4 	bl	8000d98 <puts>
}
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	0800191c 	.word	0x0800191c
 80003fc:	08001930 	.word	0x08001930
 8000400:	0800193c 	.word	0x0800193c
 8000404:	08001950 	.word	0x08001950
 8000408:	08001960 	.word	0x08001960
 800040c:	08001974 	.word	0x08001974
 8000410:	08001984 	.word	0x08001984
 8000414:	08001994 	.word	0x08001994
 8000418:	08001998 	.word	0x08001998

0800041c <triArbre>:

void triArbre(struct noeud* arbre[256], uint32_t taille){
 800041c:	b480      	push	{r7}
 800041e:	b087      	sub	sp, #28
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
	for(uint32_t j = 0; j<taille;j++ ){
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	e033      	b.n	8000494 <triArbre+0x78>
		for(uint32_t i = 0; i<taille;i++ ){
 800042c:	2300      	movs	r3, #0
 800042e:	613b      	str	r3, [r7, #16]
 8000430:	e029      	b.n	8000486 <triArbre+0x6a>
			if (arbre[i]->occurence > arbre[i+1]->occurence){
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	4413      	add	r3, r2
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	685a      	ldr	r2, [r3, #4]
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	3301      	adds	r3, #1
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	440b      	add	r3, r1
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	429a      	cmp	r2, r3
 800044e:	d917      	bls.n	8000480 <triArbre+0x64>
				struct noeud * temp;
				temp = arbre[i+1];
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	3301      	adds	r3, #1
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	4413      	add	r3, r2
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	60fb      	str	r3, [r7, #12]
				arbre[i+1] = arbre[i];
 800045e:	693b      	ldr	r3, [r7, #16]
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	441a      	add	r2, r3
 8000466:	693b      	ldr	r3, [r7, #16]
 8000468:	3301      	adds	r3, #1
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	6879      	ldr	r1, [r7, #4]
 800046e:	440b      	add	r3, r1
 8000470:	6812      	ldr	r2, [r2, #0]
 8000472:	601a      	str	r2, [r3, #0]
				arbre[i] = temp;
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	4413      	add	r3, r2
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	601a      	str	r2, [r3, #0]
		for(uint32_t i = 0; i<taille;i++ ){
 8000480:	693b      	ldr	r3, [r7, #16]
 8000482:	3301      	adds	r3, #1
 8000484:	613b      	str	r3, [r7, #16]
 8000486:	693a      	ldr	r2, [r7, #16]
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	429a      	cmp	r2, r3
 800048c:	d3d1      	bcc.n	8000432 <triArbre+0x16>
	for(uint32_t j = 0; j<taille;j++ ){
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	3301      	adds	r3, #1
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	697a      	ldr	r2, [r7, #20]
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	429a      	cmp	r2, r3
 800049a:	d3c7      	bcc.n	800042c <triArbre+0x10>
			}
		}
	}
}
 800049c:	bf00      	nop
 800049e:	bf00      	nop
 80004a0:	371c      	adds	r7, #28
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <FaireArbre>:

void FaireArbre(struct noeud* arbre[256], uint32_t taille){
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b086      	sub	sp, #24
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
 80004b2:	6039      	str	r1, [r7, #0]
	struct noeud * temp;

	while(taille>1){
 80004b4:	e04a      	b.n	800054c <FaireArbre+0xa2>
		for(uint32_t i = 0; i<taille;i++ ){
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	e02b      	b.n	8000514 <FaireArbre+0x6a>

			temp = malloc(sizeof(struct noeud));
 80004bc:	2018      	movs	r0, #24
 80004be:	f000 fa8b 	bl	80009d8 <malloc>
 80004c2:	4603      	mov	r3, r0
 80004c4:	60fb      	str	r3, [r7, #12]
			temp->c = '!';
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	2221      	movs	r2, #33	@ 0x21
 80004ca:	701a      	strb	r2, [r3, #0]
			temp->occurence = arbre[i]->occurence + arbre[i+1]->occurence;
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	4413      	add	r3, r2
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	685a      	ldr	r2, [r3, #4]
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	3301      	adds	r3, #1
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	440b      	add	r3, r1
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	441a      	add	r2, r3
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	605a      	str	r2, [r3, #4]
			temp->code = 0;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
			temp->tailleCode = 0;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
			temp->gauche = arbre[0];
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	611a      	str	r2, [r3, #16]
			temp->droite = arbre[1];
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	685a      	ldr	r2, [r3, #4]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	615a      	str	r2, [r3, #20]
			arbre[0] = temp;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	601a      	str	r2, [r3, #0]
		for(uint32_t i = 0; i<taille;i++ ){
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	429a      	cmp	r2, r3
 800051a:	d3cf      	bcc.n	80004bc <FaireArbre+0x12>
			}
		for(uint32_t i = 1; i<taille;i++ ){
 800051c:	2301      	movs	r3, #1
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	e00d      	b.n	800053e <FaireArbre+0x94>
				arbre[i] = arbre[i+1];
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	3301      	adds	r3, #1
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	441a      	add	r2, r3
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	6879      	ldr	r1, [r7, #4]
 8000532:	440b      	add	r3, r1
 8000534:	6812      	ldr	r2, [r2, #0]
 8000536:	601a      	str	r2, [r3, #0]
		for(uint32_t i = 1; i<taille;i++ ){
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	3301      	adds	r3, #1
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	429a      	cmp	r2, r3
 8000544:	d3ed      	bcc.n	8000522 <FaireArbre+0x78>
		}
		taille--;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	3b01      	subs	r3, #1
 800054a:	603b      	str	r3, [r7, #0]
	while(taille>1){
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d8b1      	bhi.n	80004b6 <FaireArbre+0xc>
	}
	afficherTabArbreHuffman(arbre, 4);
 8000552:	2104      	movs	r1, #4
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff fee7 	bl	8000328 <afficherTabArbreHuffman>
}
 800055a:	bf00      	nop
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <parcourirArbre>:


void parcourirArbre(struct noeud* ptrNoeud){
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	if(ptrNoeud ->droite==NULL && ptrNoeud ->gauche==NULL){
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d107      	bne.n	8000584 <parcourirArbre+0x20>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	691b      	ldr	r3, [r3, #16]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d103      	bne.n	8000584 <parcourirArbre+0x20>
		printf("Je suis une feuille\r\n");
 800057c:	480a      	ldr	r0, [pc, #40]	@ (80005a8 <parcourirArbre+0x44>)
 800057e:	f000 fc0b 	bl	8000d98 <puts>
	if(ptrNoeud ->droite==NULL && ptrNoeud ->gauche==NULL){
 8000582:	e00d      	b.n	80005a0 <parcourirArbre+0x3c>
	}
	else{
		printf("Je suis un nÅud\r\n");
 8000584:	4809      	ldr	r0, [pc, #36]	@ (80005ac <parcourirArbre+0x48>)
 8000586:	f000 fc07 	bl	8000d98 <puts>
		parcourirArbre(ptrNoeud ->droite); // On va a droite
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ffe8 	bl	8000564 <parcourirArbre>
		parcourirArbre(ptrNoeud ->gauche); // On va a gauche
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ffe3 	bl	8000564 <parcourirArbre>
	}
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	080019ac 	.word	0x080019ac
 80005ac:	080019c4 	.word	0x080019c4

080005b0 <GPIO_Init>:
#include <stdint.h>
#include <stm32f446xx.h>
#include "main.h"
#include "gpio.h"

void GPIO_Init(void){
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 80005b4:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <GPIO_Init+0x30>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b8:	4a09      	ldr	r2, [pc, #36]	@ (80005e0 <GPIO_Init+0x30>)
 80005ba:	f043 0305 	orr.w	r3, r3, #5
 80005be:	6313      	str	r3, [r2, #48]	@ 0x30

	/* GPIO Init */
	GPIOA->MODER |= OUTPUT_MODE <<10;		// PA5 Output LED
 80005c0:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <GPIO_Init+0x34>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a07      	ldr	r2, [pc, #28]	@ (80005e4 <GPIO_Init+0x34>)
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005ca:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= INPUT_MODE	<< 26;		// PC13 Input Push-Button
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <GPIO_Init+0x38>)
 80005ce:	4a06      	ldr	r2, [pc, #24]	@ (80005e8 <GPIO_Init+0x38>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6013      	str	r3, [r2, #0]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000
 80005e8:	40020800 	.word	0x40020800

080005ec <SysTick_Handler>:
#include "interrupt.h"

extern uint32_t ticks;

// Interrupt Handler for SysTick Interrupt
void SysTick_Handler(void){
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	ticks++;
 80005f0:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <SysTick_Handler+0x18>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	4a03      	ldr	r2, [pc, #12]	@ (8000604 <SysTick_Handler+0x18>)
 80005f8:	6013      	str	r3, [r2, #0]
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	2000088c 	.word	0x2000088c

08000608 <main>:
struct noeud* arbreHuffman[256];

uint32_t tabCaractere[256];

int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	GPIO_Init();
 800060c:	f7ff ffd0 	bl	80005b0 <GPIO_Init>
	USART2_Init();
 8000610:	f000 f93c 	bl	800088c <USART2_Init>
	SYSTICK_Init();
 8000614:	f000 f928 	bl	8000868 <SYSTICK_Init>
	occurance(texte, tabCaractere);
 8000618:	490a      	ldr	r1, [pc, #40]	@ (8000644 <main+0x3c>)
 800061a:	480b      	ldr	r0, [pc, #44]	@ (8000648 <main+0x40>)
 800061c:	f000 f818 	bl	8000650 <occurance>
	CreerFeuille(arbreHuffman, tabCaractere);
 8000620:	4908      	ldr	r1, [pc, #32]	@ (8000644 <main+0x3c>)
 8000622:	480a      	ldr	r0, [pc, #40]	@ (800064c <main+0x44>)
 8000624:	f7ff fe44 	bl	80002b0 <CreerFeuille>
	triArbre(arbreHuffman, 4);
 8000628:	2104      	movs	r1, #4
 800062a:	4808      	ldr	r0, [pc, #32]	@ (800064c <main+0x44>)
 800062c:	f7ff fef6 	bl	800041c <triArbre>
	FaireArbre(arbreHuffman, 4);
 8000630:	2104      	movs	r1, #4
 8000632:	4806      	ldr	r0, [pc, #24]	@ (800064c <main+0x44>)
 8000634:	f7ff ff39 	bl	80004aa <FaireArbre>
	while(1){
	parcourirArbre(arbreHuffman[0]);
 8000638:	4b04      	ldr	r3, [pc, #16]	@ (800064c <main+0x44>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff91 	bl	8000564 <parcourirArbre>
 8000642:	e7f9      	b.n	8000638 <main+0x30>
 8000644:	20000088 	.word	0x20000088
 8000648:	20000000 	.word	0x20000000
 800064c:	20000488 	.word	0x20000488

08000650 <occurance>:
#include "occurence.h"
#include <stdint.h>

void occurance (uint8_t* chaine, uint32_t tab[256]){
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	while((*chaine) != ('\0')){
 800065a:	e00a      	b.n	8000672 <occurance+0x22>
		tab[*chaine] ++;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	4413      	add	r3, r2
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	3201      	adds	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
		chaine ++;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3301      	adds	r3, #1
 8000670:	607b      	str	r3, [r7, #4]
	while((*chaine) != ('\0')){
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1f0      	bne.n	800065c <occurance+0xc>
	}
}
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	e00a      	b.n	80006b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800069a:	f000 f96b 	bl	8000974 <__io_getchar>
 800069e:	4601      	mov	r1, r0
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	60ba      	str	r2, [r7, #8]
 80006a6:	b2ca      	uxtb	r2, r1
 80006a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3301      	adds	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	dbf0      	blt.n	800069a <_read+0x12>
	}

return len;
 80006b8:	687b      	ldr	r3, [r7, #4]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b086      	sub	sp, #24
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	e009      	b.n	80006e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	60ba      	str	r2, [r7, #8]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f93b 	bl	8000958 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	3301      	adds	r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	dbf1      	blt.n	80006d4 <_write+0x12>
	}
	return len;
 80006f0:	687b      	ldr	r3, [r7, #4]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3718      	adds	r7, #24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <_close>:

int _close(int file)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
	return -1;
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000706:	4618      	mov	r0, r3
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
 800071a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000722:	605a      	str	r2, [r3, #4]
	return 0;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <_isatty>:

int _isatty(int file)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
	return 1;
 800073a:	2301      	movs	r3, #1
}
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	return 0;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800076c:	4a14      	ldr	r2, [pc, #80]	@ (80007c0 <_sbrk+0x5c>)
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <_sbrk+0x60>)
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <_sbrk+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d102      	bne.n	8000786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <_sbrk+0x64>)
 8000782:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <_sbrk+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <_sbrk+0x64>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	429a      	cmp	r2, r3
 8000792:	d207      	bcs.n	80007a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000794:	f000 fc3e 	bl	8001014 <__errno>
 8000798:	4603      	mov	r3, r0
 800079a:	220c      	movs	r2, #12
 800079c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	e009      	b.n	80007b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007aa:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <_sbrk+0x64>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	4a05      	ldr	r2, [pc, #20]	@ (80007c8 <_sbrk+0x64>)
 80007b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007b6:	68fb      	ldr	r3, [r7, #12]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20020000 	.word	0x20020000
 80007c4:	00000400 	.word	0x00000400
 80007c8:	20000888 	.word	0x20000888
 80007cc:	200009e0 	.word	0x200009e0

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	@ (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	@ (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0112      	lsls	r2, r2, #4
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000834:	d301      	bcc.n	800083a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000836:	2301      	movs	r3, #1
 8000838:	e00f      	b.n	800085a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083a:	4a0a      	ldr	r2, [pc, #40]	@ (8000864 <SysTick_Config+0x40>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000842:	210f      	movs	r1, #15
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f7ff ffc2 	bl	80007d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <SysTick_Config+0x40>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000852:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <SysTick_Config+0x40>)
 8000854:	2207      	movs	r2, #7
 8000856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	e000e010 	.word	0xe000e010

08000868 <SYSTICK_Init>:

//////////////////////////////////////////////
////////////// SYSTICK TIMER /////////////////
//////////////////////////////////////////////

void SYSTICK_Init(void){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <SYSTICK_Init+0x1c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a05      	ldr	r2, [pc, #20]	@ (8000888 <SYSTICK_Init+0x20>)
 8000872:	fba2 2303 	umull	r2, r3, r2, r3
 8000876:	099b      	lsrs	r3, r3, #6
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ffd3 	bl	8000824 <SysTick_Config>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000000c 	.word	0x2000000c
 8000888:	10624dd3 	.word	0x10624dd3

0800088c <USART2_Init>:
#include <stm32f446xx.h>
#include "main.h"
#include "usart.h"


void USART2_Init(void){
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;			// ABP1
 8000890:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <USART2_Init+0x68>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	4a17      	ldr	r2, [pc, #92]	@ (80008f4 <USART2_Init+0x68>)
 8000896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800089a:	6413      	str	r3, [r2, #64]	@ 0x40
	USART2->CR1 |= USART_CR1_UE;
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <USART2_Init+0x6c>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <USART2_Init+0x6c>)
 80008a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008a6:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <USART2_Init+0x70>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a13      	ldr	r2, [pc, #76]	@ (80008fc <USART2_Init+0x70>)
 80008ae:	f043 0320 	orr.w	r3, r3, #32
 80008b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <USART2_Init+0x70>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a10      	ldr	r2, [pc, #64]	@ (80008fc <USART2_Init+0x70>)
 80008ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008be:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 80008c0:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <USART2_Init+0x70>)
 80008c2:	6a1b      	ldr	r3, [r3, #32]
 80008c4:	4a0d      	ldr	r2, [pc, #52]	@ (80008fc <USART2_Init+0x70>)
 80008c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80008ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 80008cc:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <USART2_Init+0x70>)
 80008ce:	6a1b      	ldr	r3, [r3, #32]
 80008d0:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <USART2_Init+0x70>)
 80008d2:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80008d6:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <USART2_Init+0x6c>)
 80008da:	228b      	movs	r2, #139	@ 0x8b
 80008dc:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <USART2_Init+0x6c>)
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <USART2_Init+0x6c>)
 80008e4:	f043 030c 	orr.w	r3, r3, #12
 80008e8:	60d3      	str	r3, [r2, #12]
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40004400 	.word	0x40004400
 80008fc:	40020000 	.word	0x40020000

08000900 <USART2_TransmitChar>:


void USART2_TransmitChar(uint8_t data){
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	USART2->DR = data;
 800090a:	4a08      	ldr	r2, [pc, #32]	@ (800092c <USART2_TransmitChar+0x2c>)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	6053      	str	r3, [r2, #4]
	while( (USART2->SR & USART_SR_TXE)==0 );
 8000910:	bf00      	nop
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <USART2_TransmitChar+0x2c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0f9      	beq.n	8000912 <USART2_TransmitChar+0x12>
}
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40004400 	.word	0x40004400

08000930 <USART2_ReceiveChar>:


uint8_t USART2_ReceiveChar(void){
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
	while( (USART2->SR & USART_SR_RXNE)==0 );
 8000934:	bf00      	nop
 8000936:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <USART2_ReceiveChar+0x24>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f003 0320 	and.w	r3, r3, #32
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0f9      	beq.n	8000936 <USART2_ReceiveChar+0x6>
	return USART2->DR;
 8000942:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <USART2_ReceiveChar+0x24>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	b2db      	uxtb	r3, r3

}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40004400 	.word	0x40004400

08000958 <__io_putchar>:
#include "util.h"
#include "usart.h"


/* Send on USART2 PA2*/
int __io_putchar(int ch){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	USART2_TransmitChar(ch);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ffcb 	bl	8000900 <USART2_TransmitChar>
	return 0;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <__io_getchar>:

/* Receive on USART2 PA3 */
int __io_getchar(void){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	return USART2_ReceiveChar();
 8000978:	f7ff ffda 	bl	8000930 <USART2_ReceiveChar>
 800097c:	4603      	mov	r3, r0
}
 800097e:	4618      	mov	r0, r3
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000984:	480d      	ldr	r0, [pc, #52]	@ (80009bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000986:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000988:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800098e:	490d      	ldr	r1, [pc, #52]	@ (80009c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000990:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <LoopForever+0xe>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a4:	4c0a      	ldr	r4, [pc, #40]	@ (80009d0 <LoopForever+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009b2:	f000 fb35 	bl	8001020 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b6:	f7ff fe27 	bl	8000608 <main>

080009ba <LoopForever>:

LoopForever:
  b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
  ldr   r0, =_estack
 80009bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80009c8:	08001a1c 	.word	0x08001a1c
  ldr r2, =_sbss
 80009cc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80009d0:	200009dc 	.word	0x200009dc

080009d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>
	...

080009d8 <malloc>:
 80009d8:	4b02      	ldr	r3, [pc, #8]	@ (80009e4 <malloc+0xc>)
 80009da:	4601      	mov	r1, r0
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	f000 b825 	b.w	8000a2c <_malloc_r>
 80009e2:	bf00      	nop
 80009e4:	2000001c 	.word	0x2000001c

080009e8 <sbrk_aligned>:
 80009e8:	b570      	push	{r4, r5, r6, lr}
 80009ea:	4e0f      	ldr	r6, [pc, #60]	@ (8000a28 <sbrk_aligned+0x40>)
 80009ec:	460c      	mov	r4, r1
 80009ee:	6831      	ldr	r1, [r6, #0]
 80009f0:	4605      	mov	r5, r0
 80009f2:	b911      	cbnz	r1, 80009fa <sbrk_aligned+0x12>
 80009f4:	f000 faec 	bl	8000fd0 <_sbrk_r>
 80009f8:	6030      	str	r0, [r6, #0]
 80009fa:	4621      	mov	r1, r4
 80009fc:	4628      	mov	r0, r5
 80009fe:	f000 fae7 	bl	8000fd0 <_sbrk_r>
 8000a02:	1c43      	adds	r3, r0, #1
 8000a04:	d103      	bne.n	8000a0e <sbrk_aligned+0x26>
 8000a06:	f04f 34ff 	mov.w	r4, #4294967295
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	bd70      	pop	{r4, r5, r6, pc}
 8000a0e:	1cc4      	adds	r4, r0, #3
 8000a10:	f024 0403 	bic.w	r4, r4, #3
 8000a14:	42a0      	cmp	r0, r4
 8000a16:	d0f8      	beq.n	8000a0a <sbrk_aligned+0x22>
 8000a18:	1a21      	subs	r1, r4, r0
 8000a1a:	4628      	mov	r0, r5
 8000a1c:	f000 fad8 	bl	8000fd0 <_sbrk_r>
 8000a20:	3001      	adds	r0, #1
 8000a22:	d1f2      	bne.n	8000a0a <sbrk_aligned+0x22>
 8000a24:	e7ef      	b.n	8000a06 <sbrk_aligned+0x1e>
 8000a26:	bf00      	nop
 8000a28:	20000890 	.word	0x20000890

08000a2c <_malloc_r>:
 8000a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a30:	1ccd      	adds	r5, r1, #3
 8000a32:	f025 0503 	bic.w	r5, r5, #3
 8000a36:	3508      	adds	r5, #8
 8000a38:	2d0c      	cmp	r5, #12
 8000a3a:	bf38      	it	cc
 8000a3c:	250c      	movcc	r5, #12
 8000a3e:	2d00      	cmp	r5, #0
 8000a40:	4606      	mov	r6, r0
 8000a42:	db01      	blt.n	8000a48 <_malloc_r+0x1c>
 8000a44:	42a9      	cmp	r1, r5
 8000a46:	d904      	bls.n	8000a52 <_malloc_r+0x26>
 8000a48:	230c      	movs	r3, #12
 8000a4a:	6033      	str	r3, [r6, #0]
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b28 <_malloc_r+0xfc>
 8000a56:	f000 f869 	bl	8000b2c <__malloc_lock>
 8000a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8000a5e:	461c      	mov	r4, r3
 8000a60:	bb44      	cbnz	r4, 8000ab4 <_malloc_r+0x88>
 8000a62:	4629      	mov	r1, r5
 8000a64:	4630      	mov	r0, r6
 8000a66:	f7ff ffbf 	bl	80009e8 <sbrk_aligned>
 8000a6a:	1c43      	adds	r3, r0, #1
 8000a6c:	4604      	mov	r4, r0
 8000a6e:	d158      	bne.n	8000b22 <_malloc_r+0xf6>
 8000a70:	f8d8 4000 	ldr.w	r4, [r8]
 8000a74:	4627      	mov	r7, r4
 8000a76:	2f00      	cmp	r7, #0
 8000a78:	d143      	bne.n	8000b02 <_malloc_r+0xd6>
 8000a7a:	2c00      	cmp	r4, #0
 8000a7c:	d04b      	beq.n	8000b16 <_malloc_r+0xea>
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	4639      	mov	r1, r7
 8000a82:	4630      	mov	r0, r6
 8000a84:	eb04 0903 	add.w	r9, r4, r3
 8000a88:	f000 faa2 	bl	8000fd0 <_sbrk_r>
 8000a8c:	4581      	cmp	r9, r0
 8000a8e:	d142      	bne.n	8000b16 <_malloc_r+0xea>
 8000a90:	6821      	ldr	r1, [r4, #0]
 8000a92:	1a6d      	subs	r5, r5, r1
 8000a94:	4629      	mov	r1, r5
 8000a96:	4630      	mov	r0, r6
 8000a98:	f7ff ffa6 	bl	80009e8 <sbrk_aligned>
 8000a9c:	3001      	adds	r0, #1
 8000a9e:	d03a      	beq.n	8000b16 <_malloc_r+0xea>
 8000aa0:	6823      	ldr	r3, [r4, #0]
 8000aa2:	442b      	add	r3, r5
 8000aa4:	6023      	str	r3, [r4, #0]
 8000aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	bb62      	cbnz	r2, 8000b08 <_malloc_r+0xdc>
 8000aae:	f8c8 7000 	str.w	r7, [r8]
 8000ab2:	e00f      	b.n	8000ad4 <_malloc_r+0xa8>
 8000ab4:	6822      	ldr	r2, [r4, #0]
 8000ab6:	1b52      	subs	r2, r2, r5
 8000ab8:	d420      	bmi.n	8000afc <_malloc_r+0xd0>
 8000aba:	2a0b      	cmp	r2, #11
 8000abc:	d917      	bls.n	8000aee <_malloc_r+0xc2>
 8000abe:	1961      	adds	r1, r4, r5
 8000ac0:	42a3      	cmp	r3, r4
 8000ac2:	6025      	str	r5, [r4, #0]
 8000ac4:	bf18      	it	ne
 8000ac6:	6059      	strne	r1, [r3, #4]
 8000ac8:	6863      	ldr	r3, [r4, #4]
 8000aca:	bf08      	it	eq
 8000acc:	f8c8 1000 	streq.w	r1, [r8]
 8000ad0:	5162      	str	r2, [r4, r5]
 8000ad2:	604b      	str	r3, [r1, #4]
 8000ad4:	4630      	mov	r0, r6
 8000ad6:	f000 f82f 	bl	8000b38 <__malloc_unlock>
 8000ada:	f104 000b 	add.w	r0, r4, #11
 8000ade:	1d23      	adds	r3, r4, #4
 8000ae0:	f020 0007 	bic.w	r0, r0, #7
 8000ae4:	1ac2      	subs	r2, r0, r3
 8000ae6:	bf1c      	itt	ne
 8000ae8:	1a1b      	subne	r3, r3, r0
 8000aea:	50a3      	strne	r3, [r4, r2]
 8000aec:	e7af      	b.n	8000a4e <_malloc_r+0x22>
 8000aee:	6862      	ldr	r2, [r4, #4]
 8000af0:	42a3      	cmp	r3, r4
 8000af2:	bf0c      	ite	eq
 8000af4:	f8c8 2000 	streq.w	r2, [r8]
 8000af8:	605a      	strne	r2, [r3, #4]
 8000afa:	e7eb      	b.n	8000ad4 <_malloc_r+0xa8>
 8000afc:	4623      	mov	r3, r4
 8000afe:	6864      	ldr	r4, [r4, #4]
 8000b00:	e7ae      	b.n	8000a60 <_malloc_r+0x34>
 8000b02:	463c      	mov	r4, r7
 8000b04:	687f      	ldr	r7, [r7, #4]
 8000b06:	e7b6      	b.n	8000a76 <_malloc_r+0x4a>
 8000b08:	461a      	mov	r2, r3
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	d1fb      	bne.n	8000b08 <_malloc_r+0xdc>
 8000b10:	2300      	movs	r3, #0
 8000b12:	6053      	str	r3, [r2, #4]
 8000b14:	e7de      	b.n	8000ad4 <_malloc_r+0xa8>
 8000b16:	230c      	movs	r3, #12
 8000b18:	6033      	str	r3, [r6, #0]
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	f000 f80c 	bl	8000b38 <__malloc_unlock>
 8000b20:	e794      	b.n	8000a4c <_malloc_r+0x20>
 8000b22:	6005      	str	r5, [r0, #0]
 8000b24:	e7d6      	b.n	8000ad4 <_malloc_r+0xa8>
 8000b26:	bf00      	nop
 8000b28:	20000894 	.word	0x20000894

08000b2c <__malloc_lock>:
 8000b2c:	4801      	ldr	r0, [pc, #4]	@ (8000b34 <__malloc_lock+0x8>)
 8000b2e:	f000 ba9c 	b.w	800106a <__retarget_lock_acquire_recursive>
 8000b32:	bf00      	nop
 8000b34:	200009d8 	.word	0x200009d8

08000b38 <__malloc_unlock>:
 8000b38:	4801      	ldr	r0, [pc, #4]	@ (8000b40 <__malloc_unlock+0x8>)
 8000b3a:	f000 ba97 	b.w	800106c <__retarget_lock_release_recursive>
 8000b3e:	bf00      	nop
 8000b40:	200009d8 	.word	0x200009d8

08000b44 <std>:
 8000b44:	2300      	movs	r3, #0
 8000b46:	b510      	push	{r4, lr}
 8000b48:	4604      	mov	r4, r0
 8000b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8000b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b52:	6083      	str	r3, [r0, #8]
 8000b54:	8181      	strh	r1, [r0, #12]
 8000b56:	6643      	str	r3, [r0, #100]	@ 0x64
 8000b58:	81c2      	strh	r2, [r0, #14]
 8000b5a:	6183      	str	r3, [r0, #24]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	2208      	movs	r2, #8
 8000b60:	305c      	adds	r0, #92	@ 0x5c
 8000b62:	f000 f9f9 	bl	8000f58 <memset>
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <std+0x58>)
 8000b68:	6263      	str	r3, [r4, #36]	@ 0x24
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <std+0x5c>)
 8000b6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <std+0x60>)
 8000b70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <std+0x64>)
 8000b74:	6323      	str	r3, [r4, #48]	@ 0x30
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <std+0x68>)
 8000b78:	6224      	str	r4, [r4, #32]
 8000b7a:	429c      	cmp	r4, r3
 8000b7c:	d006      	beq.n	8000b8c <std+0x48>
 8000b7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000b82:	4294      	cmp	r4, r2
 8000b84:	d002      	beq.n	8000b8c <std+0x48>
 8000b86:	33d0      	adds	r3, #208	@ 0xd0
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	d105      	bne.n	8000b98 <std+0x54>
 8000b8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b94:	f000 ba68 	b.w	8001068 <__retarget_lock_init_recursive>
 8000b98:	bd10      	pop	{r4, pc}
 8000b9a:	bf00      	nop
 8000b9c:	08000da9 	.word	0x08000da9
 8000ba0:	08000dcb 	.word	0x08000dcb
 8000ba4:	08000e03 	.word	0x08000e03
 8000ba8:	08000e27 	.word	0x08000e27
 8000bac:	20000898 	.word	0x20000898

08000bb0 <stdio_exit_handler>:
 8000bb0:	4a02      	ldr	r2, [pc, #8]	@ (8000bbc <stdio_exit_handler+0xc>)
 8000bb2:	4903      	ldr	r1, [pc, #12]	@ (8000bc0 <stdio_exit_handler+0x10>)
 8000bb4:	4803      	ldr	r0, [pc, #12]	@ (8000bc4 <stdio_exit_handler+0x14>)
 8000bb6:	f000 b869 	b.w	8000c8c <_fwalk_sglue>
 8000bba:	bf00      	nop
 8000bbc:	20000010 	.word	0x20000010
 8000bc0:	080017ad 	.word	0x080017ad
 8000bc4:	20000020 	.word	0x20000020

08000bc8 <cleanup_stdio>:
 8000bc8:	6841      	ldr	r1, [r0, #4]
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <cleanup_stdio+0x34>)
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	b510      	push	{r4, lr}
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	d001      	beq.n	8000bd8 <cleanup_stdio+0x10>
 8000bd4:	f000 fdea 	bl	80017ac <_fflush_r>
 8000bd8:	68a1      	ldr	r1, [r4, #8]
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <cleanup_stdio+0x38>)
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d002      	beq.n	8000be6 <cleanup_stdio+0x1e>
 8000be0:	4620      	mov	r0, r4
 8000be2:	f000 fde3 	bl	80017ac <_fflush_r>
 8000be6:	68e1      	ldr	r1, [r4, #12]
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <cleanup_stdio+0x3c>)
 8000bea:	4299      	cmp	r1, r3
 8000bec:	d004      	beq.n	8000bf8 <cleanup_stdio+0x30>
 8000bee:	4620      	mov	r0, r4
 8000bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bf4:	f000 bdda 	b.w	80017ac <_fflush_r>
 8000bf8:	bd10      	pop	{r4, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000898 	.word	0x20000898
 8000c00:	20000900 	.word	0x20000900
 8000c04:	20000968 	.word	0x20000968

08000c08 <global_stdio_init.part.0>:
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <global_stdio_init.part.0+0x30>)
 8000c0c:	4c0b      	ldr	r4, [pc, #44]	@ (8000c3c <global_stdio_init.part.0+0x34>)
 8000c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000c40 <global_stdio_init.part.0+0x38>)
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	4620      	mov	r0, r4
 8000c14:	2200      	movs	r2, #0
 8000c16:	2104      	movs	r1, #4
 8000c18:	f7ff ff94 	bl	8000b44 <std>
 8000c1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000c20:	2201      	movs	r2, #1
 8000c22:	2109      	movs	r1, #9
 8000c24:	f7ff ff8e 	bl	8000b44 <std>
 8000c28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c32:	2112      	movs	r1, #18
 8000c34:	f7ff bf86 	b.w	8000b44 <std>
 8000c38:	200009d0 	.word	0x200009d0
 8000c3c:	20000898 	.word	0x20000898
 8000c40:	08000bb1 	.word	0x08000bb1

08000c44 <__sfp_lock_acquire>:
 8000c44:	4801      	ldr	r0, [pc, #4]	@ (8000c4c <__sfp_lock_acquire+0x8>)
 8000c46:	f000 ba10 	b.w	800106a <__retarget_lock_acquire_recursive>
 8000c4a:	bf00      	nop
 8000c4c:	200009d9 	.word	0x200009d9

08000c50 <__sfp_lock_release>:
 8000c50:	4801      	ldr	r0, [pc, #4]	@ (8000c58 <__sfp_lock_release+0x8>)
 8000c52:	f000 ba0b 	b.w	800106c <__retarget_lock_release_recursive>
 8000c56:	bf00      	nop
 8000c58:	200009d9 	.word	0x200009d9

08000c5c <__sinit>:
 8000c5c:	b510      	push	{r4, lr}
 8000c5e:	4604      	mov	r4, r0
 8000c60:	f7ff fff0 	bl	8000c44 <__sfp_lock_acquire>
 8000c64:	6a23      	ldr	r3, [r4, #32]
 8000c66:	b11b      	cbz	r3, 8000c70 <__sinit+0x14>
 8000c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c6c:	f7ff bff0 	b.w	8000c50 <__sfp_lock_release>
 8000c70:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <__sinit+0x28>)
 8000c72:	6223      	str	r3, [r4, #32]
 8000c74:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <__sinit+0x2c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f5      	bne.n	8000c68 <__sinit+0xc>
 8000c7c:	f7ff ffc4 	bl	8000c08 <global_stdio_init.part.0>
 8000c80:	e7f2      	b.n	8000c68 <__sinit+0xc>
 8000c82:	bf00      	nop
 8000c84:	08000bc9 	.word	0x08000bc9
 8000c88:	200009d0 	.word	0x200009d0

08000c8c <_fwalk_sglue>:
 8000c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c90:	4607      	mov	r7, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	4614      	mov	r4, r2
 8000c96:	2600      	movs	r6, #0
 8000c98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c9c:	f1b9 0901 	subs.w	r9, r9, #1
 8000ca0:	d505      	bpl.n	8000cae <_fwalk_sglue+0x22>
 8000ca2:	6824      	ldr	r4, [r4, #0]
 8000ca4:	2c00      	cmp	r4, #0
 8000ca6:	d1f7      	bne.n	8000c98 <_fwalk_sglue+0xc>
 8000ca8:	4630      	mov	r0, r6
 8000caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cae:	89ab      	ldrh	r3, [r5, #12]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d907      	bls.n	8000cc4 <_fwalk_sglue+0x38>
 8000cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	d003      	beq.n	8000cc4 <_fwalk_sglue+0x38>
 8000cbc:	4629      	mov	r1, r5
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	47c0      	blx	r8
 8000cc2:	4306      	orrs	r6, r0
 8000cc4:	3568      	adds	r5, #104	@ 0x68
 8000cc6:	e7e9      	b.n	8000c9c <_fwalk_sglue+0x10>

08000cc8 <iprintf>:
 8000cc8:	b40f      	push	{r0, r1, r2, r3}
 8000cca:	b507      	push	{r0, r1, r2, lr}
 8000ccc:	4906      	ldr	r1, [pc, #24]	@ (8000ce8 <iprintf+0x20>)
 8000cce:	ab04      	add	r3, sp, #16
 8000cd0:	6808      	ldr	r0, [r1, #0]
 8000cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8000cd6:	6881      	ldr	r1, [r0, #8]
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	f000 fa3d 	bl	8001158 <_vfiprintf_r>
 8000cde:	b003      	add	sp, #12
 8000ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr
 8000ce8:	2000001c 	.word	0x2000001c

08000cec <_puts_r>:
 8000cec:	6a03      	ldr	r3, [r0, #32]
 8000cee:	b570      	push	{r4, r5, r6, lr}
 8000cf0:	6884      	ldr	r4, [r0, #8]
 8000cf2:	4605      	mov	r5, r0
 8000cf4:	460e      	mov	r6, r1
 8000cf6:	b90b      	cbnz	r3, 8000cfc <_puts_r+0x10>
 8000cf8:	f7ff ffb0 	bl	8000c5c <__sinit>
 8000cfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000cfe:	07db      	lsls	r3, r3, #31
 8000d00:	d405      	bmi.n	8000d0e <_puts_r+0x22>
 8000d02:	89a3      	ldrh	r3, [r4, #12]
 8000d04:	0598      	lsls	r0, r3, #22
 8000d06:	d402      	bmi.n	8000d0e <_puts_r+0x22>
 8000d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d0a:	f000 f9ae 	bl	800106a <__retarget_lock_acquire_recursive>
 8000d0e:	89a3      	ldrh	r3, [r4, #12]
 8000d10:	0719      	lsls	r1, r3, #28
 8000d12:	d502      	bpl.n	8000d1a <_puts_r+0x2e>
 8000d14:	6923      	ldr	r3, [r4, #16]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d135      	bne.n	8000d86 <_puts_r+0x9a>
 8000d1a:	4621      	mov	r1, r4
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	f000 f8c5 	bl	8000eac <__swsetup_r>
 8000d22:	b380      	cbz	r0, 8000d86 <_puts_r+0x9a>
 8000d24:	f04f 35ff 	mov.w	r5, #4294967295
 8000d28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d2a:	07da      	lsls	r2, r3, #31
 8000d2c:	d405      	bmi.n	8000d3a <_puts_r+0x4e>
 8000d2e:	89a3      	ldrh	r3, [r4, #12]
 8000d30:	059b      	lsls	r3, r3, #22
 8000d32:	d402      	bmi.n	8000d3a <_puts_r+0x4e>
 8000d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d36:	f000 f999 	bl	800106c <__retarget_lock_release_recursive>
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	bd70      	pop	{r4, r5, r6, pc}
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	da04      	bge.n	8000d4c <_puts_r+0x60>
 8000d42:	69a2      	ldr	r2, [r4, #24]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dc17      	bgt.n	8000d78 <_puts_r+0x8c>
 8000d48:	290a      	cmp	r1, #10
 8000d4a:	d015      	beq.n	8000d78 <_puts_r+0x8c>
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	6022      	str	r2, [r4, #0]
 8000d52:	7019      	strb	r1, [r3, #0]
 8000d54:	68a3      	ldr	r3, [r4, #8]
 8000d56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	60a3      	str	r3, [r4, #8]
 8000d5e:	2900      	cmp	r1, #0
 8000d60:	d1ed      	bne.n	8000d3e <_puts_r+0x52>
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da11      	bge.n	8000d8a <_puts_r+0x9e>
 8000d66:	4622      	mov	r2, r4
 8000d68:	210a      	movs	r1, #10
 8000d6a:	4628      	mov	r0, r5
 8000d6c:	f000 f85f 	bl	8000e2e <__swbuf_r>
 8000d70:	3001      	adds	r0, #1
 8000d72:	d0d7      	beq.n	8000d24 <_puts_r+0x38>
 8000d74:	250a      	movs	r5, #10
 8000d76:	e7d7      	b.n	8000d28 <_puts_r+0x3c>
 8000d78:	4622      	mov	r2, r4
 8000d7a:	4628      	mov	r0, r5
 8000d7c:	f000 f857 	bl	8000e2e <__swbuf_r>
 8000d80:	3001      	adds	r0, #1
 8000d82:	d1e7      	bne.n	8000d54 <_puts_r+0x68>
 8000d84:	e7ce      	b.n	8000d24 <_puts_r+0x38>
 8000d86:	3e01      	subs	r6, #1
 8000d88:	e7e4      	b.n	8000d54 <_puts_r+0x68>
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	6022      	str	r2, [r4, #0]
 8000d90:	220a      	movs	r2, #10
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	e7ee      	b.n	8000d74 <_puts_r+0x88>
	...

08000d98 <puts>:
 8000d98:	4b02      	ldr	r3, [pc, #8]	@ (8000da4 <puts+0xc>)
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f7ff bfa5 	b.w	8000cec <_puts_r>
 8000da2:	bf00      	nop
 8000da4:	2000001c 	.word	0x2000001c

08000da8 <__sread>:
 8000da8:	b510      	push	{r4, lr}
 8000daa:	460c      	mov	r4, r1
 8000dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000db0:	f000 f8fc 	bl	8000fac <_read_r>
 8000db4:	2800      	cmp	r0, #0
 8000db6:	bfab      	itete	ge
 8000db8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000dba:	89a3      	ldrhlt	r3, [r4, #12]
 8000dbc:	181b      	addge	r3, r3, r0
 8000dbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000dc2:	bfac      	ite	ge
 8000dc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000dc6:	81a3      	strhlt	r3, [r4, #12]
 8000dc8:	bd10      	pop	{r4, pc}

08000dca <__swrite>:
 8000dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dce:	461f      	mov	r7, r3
 8000dd0:	898b      	ldrh	r3, [r1, #12]
 8000dd2:	05db      	lsls	r3, r3, #23
 8000dd4:	4605      	mov	r5, r0
 8000dd6:	460c      	mov	r4, r1
 8000dd8:	4616      	mov	r6, r2
 8000dda:	d505      	bpl.n	8000de8 <__swrite+0x1e>
 8000ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000de0:	2302      	movs	r3, #2
 8000de2:	2200      	movs	r2, #0
 8000de4:	f000 f8d0 	bl	8000f88 <_lseek_r>
 8000de8:	89a3      	ldrh	r3, [r4, #12]
 8000dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000dee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000df2:	81a3      	strh	r3, [r4, #12]
 8000df4:	4632      	mov	r2, r6
 8000df6:	463b      	mov	r3, r7
 8000df8:	4628      	mov	r0, r5
 8000dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000dfe:	f000 b8f7 	b.w	8000ff0 <_write_r>

08000e02 <__sseek>:
 8000e02:	b510      	push	{r4, lr}
 8000e04:	460c      	mov	r4, r1
 8000e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e0a:	f000 f8bd 	bl	8000f88 <_lseek_r>
 8000e0e:	1c43      	adds	r3, r0, #1
 8000e10:	89a3      	ldrh	r3, [r4, #12]
 8000e12:	bf15      	itete	ne
 8000e14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000e16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000e1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000e1e:	81a3      	strheq	r3, [r4, #12]
 8000e20:	bf18      	it	ne
 8000e22:	81a3      	strhne	r3, [r4, #12]
 8000e24:	bd10      	pop	{r4, pc}

08000e26 <__sclose>:
 8000e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e2a:	f000 b89d 	b.w	8000f68 <_close_r>

08000e2e <__swbuf_r>:
 8000e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e30:	460e      	mov	r6, r1
 8000e32:	4614      	mov	r4, r2
 8000e34:	4605      	mov	r5, r0
 8000e36:	b118      	cbz	r0, 8000e40 <__swbuf_r+0x12>
 8000e38:	6a03      	ldr	r3, [r0, #32]
 8000e3a:	b90b      	cbnz	r3, 8000e40 <__swbuf_r+0x12>
 8000e3c:	f7ff ff0e 	bl	8000c5c <__sinit>
 8000e40:	69a3      	ldr	r3, [r4, #24]
 8000e42:	60a3      	str	r3, [r4, #8]
 8000e44:	89a3      	ldrh	r3, [r4, #12]
 8000e46:	071a      	lsls	r2, r3, #28
 8000e48:	d501      	bpl.n	8000e4e <__swbuf_r+0x20>
 8000e4a:	6923      	ldr	r3, [r4, #16]
 8000e4c:	b943      	cbnz	r3, 8000e60 <__swbuf_r+0x32>
 8000e4e:	4621      	mov	r1, r4
 8000e50:	4628      	mov	r0, r5
 8000e52:	f000 f82b 	bl	8000eac <__swsetup_r>
 8000e56:	b118      	cbz	r0, 8000e60 <__swbuf_r+0x32>
 8000e58:	f04f 37ff 	mov.w	r7, #4294967295
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	6922      	ldr	r2, [r4, #16]
 8000e64:	1a98      	subs	r0, r3, r2
 8000e66:	6963      	ldr	r3, [r4, #20]
 8000e68:	b2f6      	uxtb	r6, r6
 8000e6a:	4283      	cmp	r3, r0
 8000e6c:	4637      	mov	r7, r6
 8000e6e:	dc05      	bgt.n	8000e7c <__swbuf_r+0x4e>
 8000e70:	4621      	mov	r1, r4
 8000e72:	4628      	mov	r0, r5
 8000e74:	f000 fc9a 	bl	80017ac <_fflush_r>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d1ed      	bne.n	8000e58 <__swbuf_r+0x2a>
 8000e7c:	68a3      	ldr	r3, [r4, #8]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	60a3      	str	r3, [r4, #8]
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	1c5a      	adds	r2, r3, #1
 8000e86:	6022      	str	r2, [r4, #0]
 8000e88:	701e      	strb	r6, [r3, #0]
 8000e8a:	6962      	ldr	r2, [r4, #20]
 8000e8c:	1c43      	adds	r3, r0, #1
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d004      	beq.n	8000e9c <__swbuf_r+0x6e>
 8000e92:	89a3      	ldrh	r3, [r4, #12]
 8000e94:	07db      	lsls	r3, r3, #31
 8000e96:	d5e1      	bpl.n	8000e5c <__swbuf_r+0x2e>
 8000e98:	2e0a      	cmp	r6, #10
 8000e9a:	d1df      	bne.n	8000e5c <__swbuf_r+0x2e>
 8000e9c:	4621      	mov	r1, r4
 8000e9e:	4628      	mov	r0, r5
 8000ea0:	f000 fc84 	bl	80017ac <_fflush_r>
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	d0d9      	beq.n	8000e5c <__swbuf_r+0x2e>
 8000ea8:	e7d6      	b.n	8000e58 <__swbuf_r+0x2a>
	...

08000eac <__swsetup_r>:
 8000eac:	b538      	push	{r3, r4, r5, lr}
 8000eae:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <__swsetup_r+0xa8>)
 8000eb0:	4605      	mov	r5, r0
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	460c      	mov	r4, r1
 8000eb6:	b118      	cbz	r0, 8000ec0 <__swsetup_r+0x14>
 8000eb8:	6a03      	ldr	r3, [r0, #32]
 8000eba:	b90b      	cbnz	r3, 8000ec0 <__swsetup_r+0x14>
 8000ebc:	f7ff fece 	bl	8000c5c <__sinit>
 8000ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ec4:	0719      	lsls	r1, r3, #28
 8000ec6:	d422      	bmi.n	8000f0e <__swsetup_r+0x62>
 8000ec8:	06da      	lsls	r2, r3, #27
 8000eca:	d407      	bmi.n	8000edc <__swsetup_r+0x30>
 8000ecc:	2209      	movs	r2, #9
 8000ece:	602a      	str	r2, [r5, #0]
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed4:	81a3      	strh	r3, [r4, #12]
 8000ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eda:	e033      	b.n	8000f44 <__swsetup_r+0x98>
 8000edc:	0758      	lsls	r0, r3, #29
 8000ede:	d512      	bpl.n	8000f06 <__swsetup_r+0x5a>
 8000ee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000ee2:	b141      	cbz	r1, 8000ef6 <__swsetup_r+0x4a>
 8000ee4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ee8:	4299      	cmp	r1, r3
 8000eea:	d002      	beq.n	8000ef2 <__swsetup_r+0x46>
 8000eec:	4628      	mov	r0, r5
 8000eee:	f000 f8bf 	bl	8001070 <_free_r>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	6363      	str	r3, [r4, #52]	@ 0x34
 8000ef6:	89a3      	ldrh	r3, [r4, #12]
 8000ef8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000efc:	81a3      	strh	r3, [r4, #12]
 8000efe:	2300      	movs	r3, #0
 8000f00:	6063      	str	r3, [r4, #4]
 8000f02:	6923      	ldr	r3, [r4, #16]
 8000f04:	6023      	str	r3, [r4, #0]
 8000f06:	89a3      	ldrh	r3, [r4, #12]
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	81a3      	strh	r3, [r4, #12]
 8000f0e:	6923      	ldr	r3, [r4, #16]
 8000f10:	b94b      	cbnz	r3, 8000f26 <__swsetup_r+0x7a>
 8000f12:	89a3      	ldrh	r3, [r4, #12]
 8000f14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f1c:	d003      	beq.n	8000f26 <__swsetup_r+0x7a>
 8000f1e:	4621      	mov	r1, r4
 8000f20:	4628      	mov	r0, r5
 8000f22:	f000 fc91 	bl	8001848 <__smakebuf_r>
 8000f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f2a:	f013 0201 	ands.w	r2, r3, #1
 8000f2e:	d00a      	beq.n	8000f46 <__swsetup_r+0x9a>
 8000f30:	2200      	movs	r2, #0
 8000f32:	60a2      	str	r2, [r4, #8]
 8000f34:	6962      	ldr	r2, [r4, #20]
 8000f36:	4252      	negs	r2, r2
 8000f38:	61a2      	str	r2, [r4, #24]
 8000f3a:	6922      	ldr	r2, [r4, #16]
 8000f3c:	b942      	cbnz	r2, 8000f50 <__swsetup_r+0xa4>
 8000f3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000f42:	d1c5      	bne.n	8000ed0 <__swsetup_r+0x24>
 8000f44:	bd38      	pop	{r3, r4, r5, pc}
 8000f46:	0799      	lsls	r1, r3, #30
 8000f48:	bf58      	it	pl
 8000f4a:	6962      	ldrpl	r2, [r4, #20]
 8000f4c:	60a2      	str	r2, [r4, #8]
 8000f4e:	e7f4      	b.n	8000f3a <__swsetup_r+0x8e>
 8000f50:	2000      	movs	r0, #0
 8000f52:	e7f7      	b.n	8000f44 <__swsetup_r+0x98>
 8000f54:	2000001c 	.word	0x2000001c

08000f58 <memset>:
 8000f58:	4402      	add	r2, r0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d100      	bne.n	8000f62 <memset+0xa>
 8000f60:	4770      	bx	lr
 8000f62:	f803 1b01 	strb.w	r1, [r3], #1
 8000f66:	e7f9      	b.n	8000f5c <memset+0x4>

08000f68 <_close_r>:
 8000f68:	b538      	push	{r3, r4, r5, lr}
 8000f6a:	4d06      	ldr	r5, [pc, #24]	@ (8000f84 <_close_r+0x1c>)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4604      	mov	r4, r0
 8000f70:	4608      	mov	r0, r1
 8000f72:	602b      	str	r3, [r5, #0]
 8000f74:	f7ff fbc1 	bl	80006fa <_close>
 8000f78:	1c43      	adds	r3, r0, #1
 8000f7a:	d102      	bne.n	8000f82 <_close_r+0x1a>
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	b103      	cbz	r3, 8000f82 <_close_r+0x1a>
 8000f80:	6023      	str	r3, [r4, #0]
 8000f82:	bd38      	pop	{r3, r4, r5, pc}
 8000f84:	200009d4 	.word	0x200009d4

08000f88 <_lseek_r>:
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	4d07      	ldr	r5, [pc, #28]	@ (8000fa8 <_lseek_r+0x20>)
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	4608      	mov	r0, r1
 8000f90:	4611      	mov	r1, r2
 8000f92:	2200      	movs	r2, #0
 8000f94:	602a      	str	r2, [r5, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	f7ff fbd6 	bl	8000748 <_lseek>
 8000f9c:	1c43      	adds	r3, r0, #1
 8000f9e:	d102      	bne.n	8000fa6 <_lseek_r+0x1e>
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	b103      	cbz	r3, 8000fa6 <_lseek_r+0x1e>
 8000fa4:	6023      	str	r3, [r4, #0]
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
 8000fa8:	200009d4 	.word	0x200009d4

08000fac <_read_r>:
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	4d07      	ldr	r5, [pc, #28]	@ (8000fcc <_read_r+0x20>)
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	602a      	str	r2, [r5, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	f7ff fb64 	bl	8000688 <_read>
 8000fc0:	1c43      	adds	r3, r0, #1
 8000fc2:	d102      	bne.n	8000fca <_read_r+0x1e>
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	b103      	cbz	r3, 8000fca <_read_r+0x1e>
 8000fc8:	6023      	str	r3, [r4, #0]
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
 8000fcc:	200009d4 	.word	0x200009d4

08000fd0 <_sbrk_r>:
 8000fd0:	b538      	push	{r3, r4, r5, lr}
 8000fd2:	4d06      	ldr	r5, [pc, #24]	@ (8000fec <_sbrk_r+0x1c>)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	4608      	mov	r0, r1
 8000fda:	602b      	str	r3, [r5, #0]
 8000fdc:	f7ff fbc2 	bl	8000764 <_sbrk>
 8000fe0:	1c43      	adds	r3, r0, #1
 8000fe2:	d102      	bne.n	8000fea <_sbrk_r+0x1a>
 8000fe4:	682b      	ldr	r3, [r5, #0]
 8000fe6:	b103      	cbz	r3, 8000fea <_sbrk_r+0x1a>
 8000fe8:	6023      	str	r3, [r4, #0]
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	200009d4 	.word	0x200009d4

08000ff0 <_write_r>:
 8000ff0:	b538      	push	{r3, r4, r5, lr}
 8000ff2:	4d07      	ldr	r5, [pc, #28]	@ (8001010 <_write_r+0x20>)
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	602a      	str	r2, [r5, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	f7ff fb5f 	bl	80006c2 <_write>
 8001004:	1c43      	adds	r3, r0, #1
 8001006:	d102      	bne.n	800100e <_write_r+0x1e>
 8001008:	682b      	ldr	r3, [r5, #0]
 800100a:	b103      	cbz	r3, 800100e <_write_r+0x1e>
 800100c:	6023      	str	r3, [r4, #0]
 800100e:	bd38      	pop	{r3, r4, r5, pc}
 8001010:	200009d4 	.word	0x200009d4

08001014 <__errno>:
 8001014:	4b01      	ldr	r3, [pc, #4]	@ (800101c <__errno+0x8>)
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2000001c 	.word	0x2000001c

08001020 <__libc_init_array>:
 8001020:	b570      	push	{r4, r5, r6, lr}
 8001022:	4d0d      	ldr	r5, [pc, #52]	@ (8001058 <__libc_init_array+0x38>)
 8001024:	4c0d      	ldr	r4, [pc, #52]	@ (800105c <__libc_init_array+0x3c>)
 8001026:	1b64      	subs	r4, r4, r5
 8001028:	10a4      	asrs	r4, r4, #2
 800102a:	2600      	movs	r6, #0
 800102c:	42a6      	cmp	r6, r4
 800102e:	d109      	bne.n	8001044 <__libc_init_array+0x24>
 8001030:	4d0b      	ldr	r5, [pc, #44]	@ (8001060 <__libc_init_array+0x40>)
 8001032:	4c0c      	ldr	r4, [pc, #48]	@ (8001064 <__libc_init_array+0x44>)
 8001034:	f000 fc66 	bl	8001904 <_init>
 8001038:	1b64      	subs	r4, r4, r5
 800103a:	10a4      	asrs	r4, r4, #2
 800103c:	2600      	movs	r6, #0
 800103e:	42a6      	cmp	r6, r4
 8001040:	d105      	bne.n	800104e <__libc_init_array+0x2e>
 8001042:	bd70      	pop	{r4, r5, r6, pc}
 8001044:	f855 3b04 	ldr.w	r3, [r5], #4
 8001048:	4798      	blx	r3
 800104a:	3601      	adds	r6, #1
 800104c:	e7ee      	b.n	800102c <__libc_init_array+0xc>
 800104e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001052:	4798      	blx	r3
 8001054:	3601      	adds	r6, #1
 8001056:	e7f2      	b.n	800103e <__libc_init_array+0x1e>
 8001058:	08001a14 	.word	0x08001a14
 800105c:	08001a14 	.word	0x08001a14
 8001060:	08001a14 	.word	0x08001a14
 8001064:	08001a18 	.word	0x08001a18

08001068 <__retarget_lock_init_recursive>:
 8001068:	4770      	bx	lr

0800106a <__retarget_lock_acquire_recursive>:
 800106a:	4770      	bx	lr

0800106c <__retarget_lock_release_recursive>:
 800106c:	4770      	bx	lr
	...

08001070 <_free_r>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4605      	mov	r5, r0
 8001074:	2900      	cmp	r1, #0
 8001076:	d041      	beq.n	80010fc <_free_r+0x8c>
 8001078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800107c:	1f0c      	subs	r4, r1, #4
 800107e:	2b00      	cmp	r3, #0
 8001080:	bfb8      	it	lt
 8001082:	18e4      	addlt	r4, r4, r3
 8001084:	f7ff fd52 	bl	8000b2c <__malloc_lock>
 8001088:	4a1d      	ldr	r2, [pc, #116]	@ (8001100 <_free_r+0x90>)
 800108a:	6813      	ldr	r3, [r2, #0]
 800108c:	b933      	cbnz	r3, 800109c <_free_r+0x2c>
 800108e:	6063      	str	r3, [r4, #4]
 8001090:	6014      	str	r4, [r2, #0]
 8001092:	4628      	mov	r0, r5
 8001094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001098:	f7ff bd4e 	b.w	8000b38 <__malloc_unlock>
 800109c:	42a3      	cmp	r3, r4
 800109e:	d908      	bls.n	80010b2 <_free_r+0x42>
 80010a0:	6820      	ldr	r0, [r4, #0]
 80010a2:	1821      	adds	r1, r4, r0
 80010a4:	428b      	cmp	r3, r1
 80010a6:	bf01      	itttt	eq
 80010a8:	6819      	ldreq	r1, [r3, #0]
 80010aa:	685b      	ldreq	r3, [r3, #4]
 80010ac:	1809      	addeq	r1, r1, r0
 80010ae:	6021      	streq	r1, [r4, #0]
 80010b0:	e7ed      	b.n	800108e <_free_r+0x1e>
 80010b2:	461a      	mov	r2, r3
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	b10b      	cbz	r3, 80010bc <_free_r+0x4c>
 80010b8:	42a3      	cmp	r3, r4
 80010ba:	d9fa      	bls.n	80010b2 <_free_r+0x42>
 80010bc:	6811      	ldr	r1, [r2, #0]
 80010be:	1850      	adds	r0, r2, r1
 80010c0:	42a0      	cmp	r0, r4
 80010c2:	d10b      	bne.n	80010dc <_free_r+0x6c>
 80010c4:	6820      	ldr	r0, [r4, #0]
 80010c6:	4401      	add	r1, r0
 80010c8:	1850      	adds	r0, r2, r1
 80010ca:	4283      	cmp	r3, r0
 80010cc:	6011      	str	r1, [r2, #0]
 80010ce:	d1e0      	bne.n	8001092 <_free_r+0x22>
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	6053      	str	r3, [r2, #4]
 80010d6:	4408      	add	r0, r1
 80010d8:	6010      	str	r0, [r2, #0]
 80010da:	e7da      	b.n	8001092 <_free_r+0x22>
 80010dc:	d902      	bls.n	80010e4 <_free_r+0x74>
 80010de:	230c      	movs	r3, #12
 80010e0:	602b      	str	r3, [r5, #0]
 80010e2:	e7d6      	b.n	8001092 <_free_r+0x22>
 80010e4:	6820      	ldr	r0, [r4, #0]
 80010e6:	1821      	adds	r1, r4, r0
 80010e8:	428b      	cmp	r3, r1
 80010ea:	bf04      	itt	eq
 80010ec:	6819      	ldreq	r1, [r3, #0]
 80010ee:	685b      	ldreq	r3, [r3, #4]
 80010f0:	6063      	str	r3, [r4, #4]
 80010f2:	bf04      	itt	eq
 80010f4:	1809      	addeq	r1, r1, r0
 80010f6:	6021      	streq	r1, [r4, #0]
 80010f8:	6054      	str	r4, [r2, #4]
 80010fa:	e7ca      	b.n	8001092 <_free_r+0x22>
 80010fc:	bd38      	pop	{r3, r4, r5, pc}
 80010fe:	bf00      	nop
 8001100:	20000894 	.word	0x20000894

08001104 <__sfputc_r>:
 8001104:	6893      	ldr	r3, [r2, #8]
 8001106:	3b01      	subs	r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	b410      	push	{r4}
 800110c:	6093      	str	r3, [r2, #8]
 800110e:	da08      	bge.n	8001122 <__sfputc_r+0x1e>
 8001110:	6994      	ldr	r4, [r2, #24]
 8001112:	42a3      	cmp	r3, r4
 8001114:	db01      	blt.n	800111a <__sfputc_r+0x16>
 8001116:	290a      	cmp	r1, #10
 8001118:	d103      	bne.n	8001122 <__sfputc_r+0x1e>
 800111a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800111e:	f7ff be86 	b.w	8000e2e <__swbuf_r>
 8001122:	6813      	ldr	r3, [r2, #0]
 8001124:	1c58      	adds	r0, r3, #1
 8001126:	6010      	str	r0, [r2, #0]
 8001128:	7019      	strb	r1, [r3, #0]
 800112a:	4608      	mov	r0, r1
 800112c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001130:	4770      	bx	lr

08001132 <__sfputs_r>:
 8001132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001134:	4606      	mov	r6, r0
 8001136:	460f      	mov	r7, r1
 8001138:	4614      	mov	r4, r2
 800113a:	18d5      	adds	r5, r2, r3
 800113c:	42ac      	cmp	r4, r5
 800113e:	d101      	bne.n	8001144 <__sfputs_r+0x12>
 8001140:	2000      	movs	r0, #0
 8001142:	e007      	b.n	8001154 <__sfputs_r+0x22>
 8001144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001148:	463a      	mov	r2, r7
 800114a:	4630      	mov	r0, r6
 800114c:	f7ff ffda 	bl	8001104 <__sfputc_r>
 8001150:	1c43      	adds	r3, r0, #1
 8001152:	d1f3      	bne.n	800113c <__sfputs_r+0xa>
 8001154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001158 <_vfiprintf_r>:
 8001158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800115c:	460d      	mov	r5, r1
 800115e:	b09d      	sub	sp, #116	@ 0x74
 8001160:	4614      	mov	r4, r2
 8001162:	4698      	mov	r8, r3
 8001164:	4606      	mov	r6, r0
 8001166:	b118      	cbz	r0, 8001170 <_vfiprintf_r+0x18>
 8001168:	6a03      	ldr	r3, [r0, #32]
 800116a:	b90b      	cbnz	r3, 8001170 <_vfiprintf_r+0x18>
 800116c:	f7ff fd76 	bl	8000c5c <__sinit>
 8001170:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001172:	07d9      	lsls	r1, r3, #31
 8001174:	d405      	bmi.n	8001182 <_vfiprintf_r+0x2a>
 8001176:	89ab      	ldrh	r3, [r5, #12]
 8001178:	059a      	lsls	r2, r3, #22
 800117a:	d402      	bmi.n	8001182 <_vfiprintf_r+0x2a>
 800117c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800117e:	f7ff ff74 	bl	800106a <__retarget_lock_acquire_recursive>
 8001182:	89ab      	ldrh	r3, [r5, #12]
 8001184:	071b      	lsls	r3, r3, #28
 8001186:	d501      	bpl.n	800118c <_vfiprintf_r+0x34>
 8001188:	692b      	ldr	r3, [r5, #16]
 800118a:	b99b      	cbnz	r3, 80011b4 <_vfiprintf_r+0x5c>
 800118c:	4629      	mov	r1, r5
 800118e:	4630      	mov	r0, r6
 8001190:	f7ff fe8c 	bl	8000eac <__swsetup_r>
 8001194:	b170      	cbz	r0, 80011b4 <_vfiprintf_r+0x5c>
 8001196:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001198:	07dc      	lsls	r4, r3, #31
 800119a:	d504      	bpl.n	80011a6 <_vfiprintf_r+0x4e>
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	b01d      	add	sp, #116	@ 0x74
 80011a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011a6:	89ab      	ldrh	r3, [r5, #12]
 80011a8:	0598      	lsls	r0, r3, #22
 80011aa:	d4f7      	bmi.n	800119c <_vfiprintf_r+0x44>
 80011ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80011ae:	f7ff ff5d 	bl	800106c <__retarget_lock_release_recursive>
 80011b2:	e7f3      	b.n	800119c <_vfiprintf_r+0x44>
 80011b4:	2300      	movs	r3, #0
 80011b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80011b8:	2320      	movs	r3, #32
 80011ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80011be:	f8cd 800c 	str.w	r8, [sp, #12]
 80011c2:	2330      	movs	r3, #48	@ 0x30
 80011c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001374 <_vfiprintf_r+0x21c>
 80011c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80011cc:	f04f 0901 	mov.w	r9, #1
 80011d0:	4623      	mov	r3, r4
 80011d2:	469a      	mov	sl, r3
 80011d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80011d8:	b10a      	cbz	r2, 80011de <_vfiprintf_r+0x86>
 80011da:	2a25      	cmp	r2, #37	@ 0x25
 80011dc:	d1f9      	bne.n	80011d2 <_vfiprintf_r+0x7a>
 80011de:	ebba 0b04 	subs.w	fp, sl, r4
 80011e2:	d00b      	beq.n	80011fc <_vfiprintf_r+0xa4>
 80011e4:	465b      	mov	r3, fp
 80011e6:	4622      	mov	r2, r4
 80011e8:	4629      	mov	r1, r5
 80011ea:	4630      	mov	r0, r6
 80011ec:	f7ff ffa1 	bl	8001132 <__sfputs_r>
 80011f0:	3001      	adds	r0, #1
 80011f2:	f000 80a7 	beq.w	8001344 <_vfiprintf_r+0x1ec>
 80011f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80011f8:	445a      	add	r2, fp
 80011fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80011fc:	f89a 3000 	ldrb.w	r3, [sl]
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 809f 	beq.w	8001344 <_vfiprintf_r+0x1ec>
 8001206:	2300      	movs	r3, #0
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001210:	f10a 0a01 	add.w	sl, sl, #1
 8001214:	9304      	str	r3, [sp, #16]
 8001216:	9307      	str	r3, [sp, #28]
 8001218:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800121c:	931a      	str	r3, [sp, #104]	@ 0x68
 800121e:	4654      	mov	r4, sl
 8001220:	2205      	movs	r2, #5
 8001222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001226:	4853      	ldr	r0, [pc, #332]	@ (8001374 <_vfiprintf_r+0x21c>)
 8001228:	f7fe fff2 	bl	8000210 <memchr>
 800122c:	9a04      	ldr	r2, [sp, #16]
 800122e:	b9d8      	cbnz	r0, 8001268 <_vfiprintf_r+0x110>
 8001230:	06d1      	lsls	r1, r2, #27
 8001232:	bf44      	itt	mi
 8001234:	2320      	movmi	r3, #32
 8001236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800123a:	0713      	lsls	r3, r2, #28
 800123c:	bf44      	itt	mi
 800123e:	232b      	movmi	r3, #43	@ 0x2b
 8001240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001244:	f89a 3000 	ldrb.w	r3, [sl]
 8001248:	2b2a      	cmp	r3, #42	@ 0x2a
 800124a:	d015      	beq.n	8001278 <_vfiprintf_r+0x120>
 800124c:	9a07      	ldr	r2, [sp, #28]
 800124e:	4654      	mov	r4, sl
 8001250:	2000      	movs	r0, #0
 8001252:	f04f 0c0a 	mov.w	ip, #10
 8001256:	4621      	mov	r1, r4
 8001258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800125c:	3b30      	subs	r3, #48	@ 0x30
 800125e:	2b09      	cmp	r3, #9
 8001260:	d94b      	bls.n	80012fa <_vfiprintf_r+0x1a2>
 8001262:	b1b0      	cbz	r0, 8001292 <_vfiprintf_r+0x13a>
 8001264:	9207      	str	r2, [sp, #28]
 8001266:	e014      	b.n	8001292 <_vfiprintf_r+0x13a>
 8001268:	eba0 0308 	sub.w	r3, r0, r8
 800126c:	fa09 f303 	lsl.w	r3, r9, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	9304      	str	r3, [sp, #16]
 8001274:	46a2      	mov	sl, r4
 8001276:	e7d2      	b.n	800121e <_vfiprintf_r+0xc6>
 8001278:	9b03      	ldr	r3, [sp, #12]
 800127a:	1d19      	adds	r1, r3, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	9103      	str	r1, [sp, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	bfbb      	ittet	lt
 8001284:	425b      	neglt	r3, r3
 8001286:	f042 0202 	orrlt.w	r2, r2, #2
 800128a:	9307      	strge	r3, [sp, #28]
 800128c:	9307      	strlt	r3, [sp, #28]
 800128e:	bfb8      	it	lt
 8001290:	9204      	strlt	r2, [sp, #16]
 8001292:	7823      	ldrb	r3, [r4, #0]
 8001294:	2b2e      	cmp	r3, #46	@ 0x2e
 8001296:	d10a      	bne.n	80012ae <_vfiprintf_r+0x156>
 8001298:	7863      	ldrb	r3, [r4, #1]
 800129a:	2b2a      	cmp	r3, #42	@ 0x2a
 800129c:	d132      	bne.n	8001304 <_vfiprintf_r+0x1ac>
 800129e:	9b03      	ldr	r3, [sp, #12]
 80012a0:	1d1a      	adds	r2, r3, #4
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	9203      	str	r2, [sp, #12]
 80012a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80012aa:	3402      	adds	r4, #2
 80012ac:	9305      	str	r3, [sp, #20]
 80012ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001384 <_vfiprintf_r+0x22c>
 80012b2:	7821      	ldrb	r1, [r4, #0]
 80012b4:	2203      	movs	r2, #3
 80012b6:	4650      	mov	r0, sl
 80012b8:	f7fe ffaa 	bl	8000210 <memchr>
 80012bc:	b138      	cbz	r0, 80012ce <_vfiprintf_r+0x176>
 80012be:	9b04      	ldr	r3, [sp, #16]
 80012c0:	eba0 000a 	sub.w	r0, r0, sl
 80012c4:	2240      	movs	r2, #64	@ 0x40
 80012c6:	4082      	lsls	r2, r0
 80012c8:	4313      	orrs	r3, r2
 80012ca:	3401      	adds	r4, #1
 80012cc:	9304      	str	r3, [sp, #16]
 80012ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012d2:	4829      	ldr	r0, [pc, #164]	@ (8001378 <_vfiprintf_r+0x220>)
 80012d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80012d8:	2206      	movs	r2, #6
 80012da:	f7fe ff99 	bl	8000210 <memchr>
 80012de:	2800      	cmp	r0, #0
 80012e0:	d03f      	beq.n	8001362 <_vfiprintf_r+0x20a>
 80012e2:	4b26      	ldr	r3, [pc, #152]	@ (800137c <_vfiprintf_r+0x224>)
 80012e4:	bb1b      	cbnz	r3, 800132e <_vfiprintf_r+0x1d6>
 80012e6:	9b03      	ldr	r3, [sp, #12]
 80012e8:	3307      	adds	r3, #7
 80012ea:	f023 0307 	bic.w	r3, r3, #7
 80012ee:	3308      	adds	r3, #8
 80012f0:	9303      	str	r3, [sp, #12]
 80012f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80012f4:	443b      	add	r3, r7
 80012f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80012f8:	e76a      	b.n	80011d0 <_vfiprintf_r+0x78>
 80012fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80012fe:	460c      	mov	r4, r1
 8001300:	2001      	movs	r0, #1
 8001302:	e7a8      	b.n	8001256 <_vfiprintf_r+0xfe>
 8001304:	2300      	movs	r3, #0
 8001306:	3401      	adds	r4, #1
 8001308:	9305      	str	r3, [sp, #20]
 800130a:	4619      	mov	r1, r3
 800130c:	f04f 0c0a 	mov.w	ip, #10
 8001310:	4620      	mov	r0, r4
 8001312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001316:	3a30      	subs	r2, #48	@ 0x30
 8001318:	2a09      	cmp	r2, #9
 800131a:	d903      	bls.n	8001324 <_vfiprintf_r+0x1cc>
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0c6      	beq.n	80012ae <_vfiprintf_r+0x156>
 8001320:	9105      	str	r1, [sp, #20]
 8001322:	e7c4      	b.n	80012ae <_vfiprintf_r+0x156>
 8001324:	fb0c 2101 	mla	r1, ip, r1, r2
 8001328:	4604      	mov	r4, r0
 800132a:	2301      	movs	r3, #1
 800132c:	e7f0      	b.n	8001310 <_vfiprintf_r+0x1b8>
 800132e:	ab03      	add	r3, sp, #12
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	462a      	mov	r2, r5
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <_vfiprintf_r+0x228>)
 8001336:	a904      	add	r1, sp, #16
 8001338:	4630      	mov	r0, r6
 800133a:	f3af 8000 	nop.w
 800133e:	4607      	mov	r7, r0
 8001340:	1c78      	adds	r0, r7, #1
 8001342:	d1d6      	bne.n	80012f2 <_vfiprintf_r+0x19a>
 8001344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001346:	07d9      	lsls	r1, r3, #31
 8001348:	d405      	bmi.n	8001356 <_vfiprintf_r+0x1fe>
 800134a:	89ab      	ldrh	r3, [r5, #12]
 800134c:	059a      	lsls	r2, r3, #22
 800134e:	d402      	bmi.n	8001356 <_vfiprintf_r+0x1fe>
 8001350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001352:	f7ff fe8b 	bl	800106c <__retarget_lock_release_recursive>
 8001356:	89ab      	ldrh	r3, [r5, #12]
 8001358:	065b      	lsls	r3, r3, #25
 800135a:	f53f af1f 	bmi.w	800119c <_vfiprintf_r+0x44>
 800135e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001360:	e71e      	b.n	80011a0 <_vfiprintf_r+0x48>
 8001362:	ab03      	add	r3, sp, #12
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	462a      	mov	r2, r5
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <_vfiprintf_r+0x228>)
 800136a:	a904      	add	r1, sp, #16
 800136c:	4630      	mov	r0, r6
 800136e:	f000 f879 	bl	8001464 <_printf_i>
 8001372:	e7e4      	b.n	800133e <_vfiprintf_r+0x1e6>
 8001374:	080019d6 	.word	0x080019d6
 8001378:	080019e0 	.word	0x080019e0
 800137c:	00000000 	.word	0x00000000
 8001380:	08001133 	.word	0x08001133
 8001384:	080019dc 	.word	0x080019dc

08001388 <_printf_common>:
 8001388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800138c:	4616      	mov	r6, r2
 800138e:	4698      	mov	r8, r3
 8001390:	688a      	ldr	r2, [r1, #8]
 8001392:	690b      	ldr	r3, [r1, #16]
 8001394:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001398:	4293      	cmp	r3, r2
 800139a:	bfb8      	it	lt
 800139c:	4613      	movlt	r3, r2
 800139e:	6033      	str	r3, [r6, #0]
 80013a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80013a4:	4607      	mov	r7, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	b10a      	cbz	r2, 80013ae <_printf_common+0x26>
 80013aa:	3301      	adds	r3, #1
 80013ac:	6033      	str	r3, [r6, #0]
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	0699      	lsls	r1, r3, #26
 80013b2:	bf42      	ittt	mi
 80013b4:	6833      	ldrmi	r3, [r6, #0]
 80013b6:	3302      	addmi	r3, #2
 80013b8:	6033      	strmi	r3, [r6, #0]
 80013ba:	6825      	ldr	r5, [r4, #0]
 80013bc:	f015 0506 	ands.w	r5, r5, #6
 80013c0:	d106      	bne.n	80013d0 <_printf_common+0x48>
 80013c2:	f104 0a19 	add.w	sl, r4, #25
 80013c6:	68e3      	ldr	r3, [r4, #12]
 80013c8:	6832      	ldr	r2, [r6, #0]
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	42ab      	cmp	r3, r5
 80013ce:	dc26      	bgt.n	800141e <_printf_common+0x96>
 80013d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80013d4:	6822      	ldr	r2, [r4, #0]
 80013d6:	3b00      	subs	r3, #0
 80013d8:	bf18      	it	ne
 80013da:	2301      	movne	r3, #1
 80013dc:	0692      	lsls	r2, r2, #26
 80013de:	d42b      	bmi.n	8001438 <_printf_common+0xb0>
 80013e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80013e4:	4641      	mov	r1, r8
 80013e6:	4638      	mov	r0, r7
 80013e8:	47c8      	blx	r9
 80013ea:	3001      	adds	r0, #1
 80013ec:	d01e      	beq.n	800142c <_printf_common+0xa4>
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	6922      	ldr	r2, [r4, #16]
 80013f2:	f003 0306 	and.w	r3, r3, #6
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf02      	ittt	eq
 80013fa:	68e5      	ldreq	r5, [r4, #12]
 80013fc:	6833      	ldreq	r3, [r6, #0]
 80013fe:	1aed      	subeq	r5, r5, r3
 8001400:	68a3      	ldr	r3, [r4, #8]
 8001402:	bf0c      	ite	eq
 8001404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001408:	2500      	movne	r5, #0
 800140a:	4293      	cmp	r3, r2
 800140c:	bfc4      	itt	gt
 800140e:	1a9b      	subgt	r3, r3, r2
 8001410:	18ed      	addgt	r5, r5, r3
 8001412:	2600      	movs	r6, #0
 8001414:	341a      	adds	r4, #26
 8001416:	42b5      	cmp	r5, r6
 8001418:	d11a      	bne.n	8001450 <_printf_common+0xc8>
 800141a:	2000      	movs	r0, #0
 800141c:	e008      	b.n	8001430 <_printf_common+0xa8>
 800141e:	2301      	movs	r3, #1
 8001420:	4652      	mov	r2, sl
 8001422:	4641      	mov	r1, r8
 8001424:	4638      	mov	r0, r7
 8001426:	47c8      	blx	r9
 8001428:	3001      	adds	r0, #1
 800142a:	d103      	bne.n	8001434 <_printf_common+0xac>
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001434:	3501      	adds	r5, #1
 8001436:	e7c6      	b.n	80013c6 <_printf_common+0x3e>
 8001438:	18e1      	adds	r1, r4, r3
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	2030      	movs	r0, #48	@ 0x30
 800143e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001442:	4422      	add	r2, r4
 8001444:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001448:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800144c:	3302      	adds	r3, #2
 800144e:	e7c7      	b.n	80013e0 <_printf_common+0x58>
 8001450:	2301      	movs	r3, #1
 8001452:	4622      	mov	r2, r4
 8001454:	4641      	mov	r1, r8
 8001456:	4638      	mov	r0, r7
 8001458:	47c8      	blx	r9
 800145a:	3001      	adds	r0, #1
 800145c:	d0e6      	beq.n	800142c <_printf_common+0xa4>
 800145e:	3601      	adds	r6, #1
 8001460:	e7d9      	b.n	8001416 <_printf_common+0x8e>
	...

08001464 <_printf_i>:
 8001464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001468:	7e0f      	ldrb	r7, [r1, #24]
 800146a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800146c:	2f78      	cmp	r7, #120	@ 0x78
 800146e:	4691      	mov	r9, r2
 8001470:	4680      	mov	r8, r0
 8001472:	460c      	mov	r4, r1
 8001474:	469a      	mov	sl, r3
 8001476:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800147a:	d807      	bhi.n	800148c <_printf_i+0x28>
 800147c:	2f62      	cmp	r7, #98	@ 0x62
 800147e:	d80a      	bhi.n	8001496 <_printf_i+0x32>
 8001480:	2f00      	cmp	r7, #0
 8001482:	f000 80d2 	beq.w	800162a <_printf_i+0x1c6>
 8001486:	2f58      	cmp	r7, #88	@ 0x58
 8001488:	f000 80b9 	beq.w	80015fe <_printf_i+0x19a>
 800148c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001490:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001494:	e03a      	b.n	800150c <_printf_i+0xa8>
 8001496:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800149a:	2b15      	cmp	r3, #21
 800149c:	d8f6      	bhi.n	800148c <_printf_i+0x28>
 800149e:	a101      	add	r1, pc, #4	@ (adr r1, 80014a4 <_printf_i+0x40>)
 80014a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80014a4:	080014fd 	.word	0x080014fd
 80014a8:	08001511 	.word	0x08001511
 80014ac:	0800148d 	.word	0x0800148d
 80014b0:	0800148d 	.word	0x0800148d
 80014b4:	0800148d 	.word	0x0800148d
 80014b8:	0800148d 	.word	0x0800148d
 80014bc:	08001511 	.word	0x08001511
 80014c0:	0800148d 	.word	0x0800148d
 80014c4:	0800148d 	.word	0x0800148d
 80014c8:	0800148d 	.word	0x0800148d
 80014cc:	0800148d 	.word	0x0800148d
 80014d0:	08001611 	.word	0x08001611
 80014d4:	0800153b 	.word	0x0800153b
 80014d8:	080015cb 	.word	0x080015cb
 80014dc:	0800148d 	.word	0x0800148d
 80014e0:	0800148d 	.word	0x0800148d
 80014e4:	08001633 	.word	0x08001633
 80014e8:	0800148d 	.word	0x0800148d
 80014ec:	0800153b 	.word	0x0800153b
 80014f0:	0800148d 	.word	0x0800148d
 80014f4:	0800148d 	.word	0x0800148d
 80014f8:	080015d3 	.word	0x080015d3
 80014fc:	6833      	ldr	r3, [r6, #0]
 80014fe:	1d1a      	adds	r2, r3, #4
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6032      	str	r2, [r6, #0]
 8001504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001508:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800150c:	2301      	movs	r3, #1
 800150e:	e09d      	b.n	800164c <_printf_i+0x1e8>
 8001510:	6833      	ldr	r3, [r6, #0]
 8001512:	6820      	ldr	r0, [r4, #0]
 8001514:	1d19      	adds	r1, r3, #4
 8001516:	6031      	str	r1, [r6, #0]
 8001518:	0606      	lsls	r6, r0, #24
 800151a:	d501      	bpl.n	8001520 <_printf_i+0xbc>
 800151c:	681d      	ldr	r5, [r3, #0]
 800151e:	e003      	b.n	8001528 <_printf_i+0xc4>
 8001520:	0645      	lsls	r5, r0, #25
 8001522:	d5fb      	bpl.n	800151c <_printf_i+0xb8>
 8001524:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001528:	2d00      	cmp	r5, #0
 800152a:	da03      	bge.n	8001534 <_printf_i+0xd0>
 800152c:	232d      	movs	r3, #45	@ 0x2d
 800152e:	426d      	negs	r5, r5
 8001530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001534:	4859      	ldr	r0, [pc, #356]	@ (800169c <_printf_i+0x238>)
 8001536:	230a      	movs	r3, #10
 8001538:	e011      	b.n	800155e <_printf_i+0xfa>
 800153a:	6821      	ldr	r1, [r4, #0]
 800153c:	6833      	ldr	r3, [r6, #0]
 800153e:	0608      	lsls	r0, r1, #24
 8001540:	f853 5b04 	ldr.w	r5, [r3], #4
 8001544:	d402      	bmi.n	800154c <_printf_i+0xe8>
 8001546:	0649      	lsls	r1, r1, #25
 8001548:	bf48      	it	mi
 800154a:	b2ad      	uxthmi	r5, r5
 800154c:	2f6f      	cmp	r7, #111	@ 0x6f
 800154e:	4853      	ldr	r0, [pc, #332]	@ (800169c <_printf_i+0x238>)
 8001550:	6033      	str	r3, [r6, #0]
 8001552:	bf14      	ite	ne
 8001554:	230a      	movne	r3, #10
 8001556:	2308      	moveq	r3, #8
 8001558:	2100      	movs	r1, #0
 800155a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800155e:	6866      	ldr	r6, [r4, #4]
 8001560:	60a6      	str	r6, [r4, #8]
 8001562:	2e00      	cmp	r6, #0
 8001564:	bfa2      	ittt	ge
 8001566:	6821      	ldrge	r1, [r4, #0]
 8001568:	f021 0104 	bicge.w	r1, r1, #4
 800156c:	6021      	strge	r1, [r4, #0]
 800156e:	b90d      	cbnz	r5, 8001574 <_printf_i+0x110>
 8001570:	2e00      	cmp	r6, #0
 8001572:	d04b      	beq.n	800160c <_printf_i+0x1a8>
 8001574:	4616      	mov	r6, r2
 8001576:	fbb5 f1f3 	udiv	r1, r5, r3
 800157a:	fb03 5711 	mls	r7, r3, r1, r5
 800157e:	5dc7      	ldrb	r7, [r0, r7]
 8001580:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001584:	462f      	mov	r7, r5
 8001586:	42bb      	cmp	r3, r7
 8001588:	460d      	mov	r5, r1
 800158a:	d9f4      	bls.n	8001576 <_printf_i+0x112>
 800158c:	2b08      	cmp	r3, #8
 800158e:	d10b      	bne.n	80015a8 <_printf_i+0x144>
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	07df      	lsls	r7, r3, #31
 8001594:	d508      	bpl.n	80015a8 <_printf_i+0x144>
 8001596:	6923      	ldr	r3, [r4, #16]
 8001598:	6861      	ldr	r1, [r4, #4]
 800159a:	4299      	cmp	r1, r3
 800159c:	bfde      	ittt	le
 800159e:	2330      	movle	r3, #48	@ 0x30
 80015a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80015a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80015a8:	1b92      	subs	r2, r2, r6
 80015aa:	6122      	str	r2, [r4, #16]
 80015ac:	f8cd a000 	str.w	sl, [sp]
 80015b0:	464b      	mov	r3, r9
 80015b2:	aa03      	add	r2, sp, #12
 80015b4:	4621      	mov	r1, r4
 80015b6:	4640      	mov	r0, r8
 80015b8:	f7ff fee6 	bl	8001388 <_printf_common>
 80015bc:	3001      	adds	r0, #1
 80015be:	d14a      	bne.n	8001656 <_printf_i+0x1f2>
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	b004      	add	sp, #16
 80015c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	6023      	str	r3, [r4, #0]
 80015d2:	4833      	ldr	r0, [pc, #204]	@ (80016a0 <_printf_i+0x23c>)
 80015d4:	2778      	movs	r7, #120	@ 0x78
 80015d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	6831      	ldr	r1, [r6, #0]
 80015de:	061f      	lsls	r7, r3, #24
 80015e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80015e4:	d402      	bmi.n	80015ec <_printf_i+0x188>
 80015e6:	065f      	lsls	r7, r3, #25
 80015e8:	bf48      	it	mi
 80015ea:	b2ad      	uxthmi	r5, r5
 80015ec:	6031      	str	r1, [r6, #0]
 80015ee:	07d9      	lsls	r1, r3, #31
 80015f0:	bf44      	itt	mi
 80015f2:	f043 0320 	orrmi.w	r3, r3, #32
 80015f6:	6023      	strmi	r3, [r4, #0]
 80015f8:	b11d      	cbz	r5, 8001602 <_printf_i+0x19e>
 80015fa:	2310      	movs	r3, #16
 80015fc:	e7ac      	b.n	8001558 <_printf_i+0xf4>
 80015fe:	4827      	ldr	r0, [pc, #156]	@ (800169c <_printf_i+0x238>)
 8001600:	e7e9      	b.n	80015d6 <_printf_i+0x172>
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	f023 0320 	bic.w	r3, r3, #32
 8001608:	6023      	str	r3, [r4, #0]
 800160a:	e7f6      	b.n	80015fa <_printf_i+0x196>
 800160c:	4616      	mov	r6, r2
 800160e:	e7bd      	b.n	800158c <_printf_i+0x128>
 8001610:	6833      	ldr	r3, [r6, #0]
 8001612:	6825      	ldr	r5, [r4, #0]
 8001614:	6961      	ldr	r1, [r4, #20]
 8001616:	1d18      	adds	r0, r3, #4
 8001618:	6030      	str	r0, [r6, #0]
 800161a:	062e      	lsls	r6, r5, #24
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	d501      	bpl.n	8001624 <_printf_i+0x1c0>
 8001620:	6019      	str	r1, [r3, #0]
 8001622:	e002      	b.n	800162a <_printf_i+0x1c6>
 8001624:	0668      	lsls	r0, r5, #25
 8001626:	d5fb      	bpl.n	8001620 <_printf_i+0x1bc>
 8001628:	8019      	strh	r1, [r3, #0]
 800162a:	2300      	movs	r3, #0
 800162c:	6123      	str	r3, [r4, #16]
 800162e:	4616      	mov	r6, r2
 8001630:	e7bc      	b.n	80015ac <_printf_i+0x148>
 8001632:	6833      	ldr	r3, [r6, #0]
 8001634:	1d1a      	adds	r2, r3, #4
 8001636:	6032      	str	r2, [r6, #0]
 8001638:	681e      	ldr	r6, [r3, #0]
 800163a:	6862      	ldr	r2, [r4, #4]
 800163c:	2100      	movs	r1, #0
 800163e:	4630      	mov	r0, r6
 8001640:	f7fe fde6 	bl	8000210 <memchr>
 8001644:	b108      	cbz	r0, 800164a <_printf_i+0x1e6>
 8001646:	1b80      	subs	r0, r0, r6
 8001648:	6060      	str	r0, [r4, #4]
 800164a:	6863      	ldr	r3, [r4, #4]
 800164c:	6123      	str	r3, [r4, #16]
 800164e:	2300      	movs	r3, #0
 8001650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001654:	e7aa      	b.n	80015ac <_printf_i+0x148>
 8001656:	6923      	ldr	r3, [r4, #16]
 8001658:	4632      	mov	r2, r6
 800165a:	4649      	mov	r1, r9
 800165c:	4640      	mov	r0, r8
 800165e:	47d0      	blx	sl
 8001660:	3001      	adds	r0, #1
 8001662:	d0ad      	beq.n	80015c0 <_printf_i+0x15c>
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	079b      	lsls	r3, r3, #30
 8001668:	d413      	bmi.n	8001692 <_printf_i+0x22e>
 800166a:	68e0      	ldr	r0, [r4, #12]
 800166c:	9b03      	ldr	r3, [sp, #12]
 800166e:	4298      	cmp	r0, r3
 8001670:	bfb8      	it	lt
 8001672:	4618      	movlt	r0, r3
 8001674:	e7a6      	b.n	80015c4 <_printf_i+0x160>
 8001676:	2301      	movs	r3, #1
 8001678:	4632      	mov	r2, r6
 800167a:	4649      	mov	r1, r9
 800167c:	4640      	mov	r0, r8
 800167e:	47d0      	blx	sl
 8001680:	3001      	adds	r0, #1
 8001682:	d09d      	beq.n	80015c0 <_printf_i+0x15c>
 8001684:	3501      	adds	r5, #1
 8001686:	68e3      	ldr	r3, [r4, #12]
 8001688:	9903      	ldr	r1, [sp, #12]
 800168a:	1a5b      	subs	r3, r3, r1
 800168c:	42ab      	cmp	r3, r5
 800168e:	dcf2      	bgt.n	8001676 <_printf_i+0x212>
 8001690:	e7eb      	b.n	800166a <_printf_i+0x206>
 8001692:	2500      	movs	r5, #0
 8001694:	f104 0619 	add.w	r6, r4, #25
 8001698:	e7f5      	b.n	8001686 <_printf_i+0x222>
 800169a:	bf00      	nop
 800169c:	080019e7 	.word	0x080019e7
 80016a0:	080019f8 	.word	0x080019f8

080016a4 <__sflush_r>:
 80016a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80016a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016ac:	0716      	lsls	r6, r2, #28
 80016ae:	4605      	mov	r5, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	d454      	bmi.n	800175e <__sflush_r+0xba>
 80016b4:	684b      	ldr	r3, [r1, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	dc02      	bgt.n	80016c0 <__sflush_r+0x1c>
 80016ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80016bc:	2b00      	cmp	r3, #0
 80016be:	dd48      	ble.n	8001752 <__sflush_r+0xae>
 80016c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80016c2:	2e00      	cmp	r6, #0
 80016c4:	d045      	beq.n	8001752 <__sflush_r+0xae>
 80016c6:	2300      	movs	r3, #0
 80016c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80016cc:	682f      	ldr	r7, [r5, #0]
 80016ce:	6a21      	ldr	r1, [r4, #32]
 80016d0:	602b      	str	r3, [r5, #0]
 80016d2:	d030      	beq.n	8001736 <__sflush_r+0x92>
 80016d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80016d6:	89a3      	ldrh	r3, [r4, #12]
 80016d8:	0759      	lsls	r1, r3, #29
 80016da:	d505      	bpl.n	80016e8 <__sflush_r+0x44>
 80016dc:	6863      	ldr	r3, [r4, #4]
 80016de:	1ad2      	subs	r2, r2, r3
 80016e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80016e2:	b10b      	cbz	r3, 80016e8 <__sflush_r+0x44>
 80016e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80016e6:	1ad2      	subs	r2, r2, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80016ec:	6a21      	ldr	r1, [r4, #32]
 80016ee:	4628      	mov	r0, r5
 80016f0:	47b0      	blx	r6
 80016f2:	1c43      	adds	r3, r0, #1
 80016f4:	89a3      	ldrh	r3, [r4, #12]
 80016f6:	d106      	bne.n	8001706 <__sflush_r+0x62>
 80016f8:	6829      	ldr	r1, [r5, #0]
 80016fa:	291d      	cmp	r1, #29
 80016fc:	d82b      	bhi.n	8001756 <__sflush_r+0xb2>
 80016fe:	4a2a      	ldr	r2, [pc, #168]	@ (80017a8 <__sflush_r+0x104>)
 8001700:	410a      	asrs	r2, r1
 8001702:	07d6      	lsls	r6, r2, #31
 8001704:	d427      	bmi.n	8001756 <__sflush_r+0xb2>
 8001706:	2200      	movs	r2, #0
 8001708:	6062      	str	r2, [r4, #4]
 800170a:	04d9      	lsls	r1, r3, #19
 800170c:	6922      	ldr	r2, [r4, #16]
 800170e:	6022      	str	r2, [r4, #0]
 8001710:	d504      	bpl.n	800171c <__sflush_r+0x78>
 8001712:	1c42      	adds	r2, r0, #1
 8001714:	d101      	bne.n	800171a <__sflush_r+0x76>
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	b903      	cbnz	r3, 800171c <__sflush_r+0x78>
 800171a:	6560      	str	r0, [r4, #84]	@ 0x54
 800171c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800171e:	602f      	str	r7, [r5, #0]
 8001720:	b1b9      	cbz	r1, 8001752 <__sflush_r+0xae>
 8001722:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001726:	4299      	cmp	r1, r3
 8001728:	d002      	beq.n	8001730 <__sflush_r+0x8c>
 800172a:	4628      	mov	r0, r5
 800172c:	f7ff fca0 	bl	8001070 <_free_r>
 8001730:	2300      	movs	r3, #0
 8001732:	6363      	str	r3, [r4, #52]	@ 0x34
 8001734:	e00d      	b.n	8001752 <__sflush_r+0xae>
 8001736:	2301      	movs	r3, #1
 8001738:	4628      	mov	r0, r5
 800173a:	47b0      	blx	r6
 800173c:	4602      	mov	r2, r0
 800173e:	1c50      	adds	r0, r2, #1
 8001740:	d1c9      	bne.n	80016d6 <__sflush_r+0x32>
 8001742:	682b      	ldr	r3, [r5, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0c6      	beq.n	80016d6 <__sflush_r+0x32>
 8001748:	2b1d      	cmp	r3, #29
 800174a:	d001      	beq.n	8001750 <__sflush_r+0xac>
 800174c:	2b16      	cmp	r3, #22
 800174e:	d11e      	bne.n	800178e <__sflush_r+0xea>
 8001750:	602f      	str	r7, [r5, #0]
 8001752:	2000      	movs	r0, #0
 8001754:	e022      	b.n	800179c <__sflush_r+0xf8>
 8001756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800175a:	b21b      	sxth	r3, r3
 800175c:	e01b      	b.n	8001796 <__sflush_r+0xf2>
 800175e:	690f      	ldr	r7, [r1, #16]
 8001760:	2f00      	cmp	r7, #0
 8001762:	d0f6      	beq.n	8001752 <__sflush_r+0xae>
 8001764:	0793      	lsls	r3, r2, #30
 8001766:	680e      	ldr	r6, [r1, #0]
 8001768:	bf08      	it	eq
 800176a:	694b      	ldreq	r3, [r1, #20]
 800176c:	600f      	str	r7, [r1, #0]
 800176e:	bf18      	it	ne
 8001770:	2300      	movne	r3, #0
 8001772:	eba6 0807 	sub.w	r8, r6, r7
 8001776:	608b      	str	r3, [r1, #8]
 8001778:	f1b8 0f00 	cmp.w	r8, #0
 800177c:	dde9      	ble.n	8001752 <__sflush_r+0xae>
 800177e:	6a21      	ldr	r1, [r4, #32]
 8001780:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001782:	4643      	mov	r3, r8
 8001784:	463a      	mov	r2, r7
 8001786:	4628      	mov	r0, r5
 8001788:	47b0      	blx	r6
 800178a:	2800      	cmp	r0, #0
 800178c:	dc08      	bgt.n	80017a0 <__sflush_r+0xfc>
 800178e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001796:	81a3      	strh	r3, [r4, #12]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017a0:	4407      	add	r7, r0
 80017a2:	eba8 0800 	sub.w	r8, r8, r0
 80017a6:	e7e7      	b.n	8001778 <__sflush_r+0xd4>
 80017a8:	dfbffffe 	.word	0xdfbffffe

080017ac <_fflush_r>:
 80017ac:	b538      	push	{r3, r4, r5, lr}
 80017ae:	690b      	ldr	r3, [r1, #16]
 80017b0:	4605      	mov	r5, r0
 80017b2:	460c      	mov	r4, r1
 80017b4:	b913      	cbnz	r3, 80017bc <_fflush_r+0x10>
 80017b6:	2500      	movs	r5, #0
 80017b8:	4628      	mov	r0, r5
 80017ba:	bd38      	pop	{r3, r4, r5, pc}
 80017bc:	b118      	cbz	r0, 80017c6 <_fflush_r+0x1a>
 80017be:	6a03      	ldr	r3, [r0, #32]
 80017c0:	b90b      	cbnz	r3, 80017c6 <_fflush_r+0x1a>
 80017c2:	f7ff fa4b 	bl	8000c5c <__sinit>
 80017c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f3      	beq.n	80017b6 <_fflush_r+0xa>
 80017ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80017d0:	07d0      	lsls	r0, r2, #31
 80017d2:	d404      	bmi.n	80017de <_fflush_r+0x32>
 80017d4:	0599      	lsls	r1, r3, #22
 80017d6:	d402      	bmi.n	80017de <_fflush_r+0x32>
 80017d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017da:	f7ff fc46 	bl	800106a <__retarget_lock_acquire_recursive>
 80017de:	4628      	mov	r0, r5
 80017e0:	4621      	mov	r1, r4
 80017e2:	f7ff ff5f 	bl	80016a4 <__sflush_r>
 80017e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017e8:	07da      	lsls	r2, r3, #31
 80017ea:	4605      	mov	r5, r0
 80017ec:	d4e4      	bmi.n	80017b8 <_fflush_r+0xc>
 80017ee:	89a3      	ldrh	r3, [r4, #12]
 80017f0:	059b      	lsls	r3, r3, #22
 80017f2:	d4e1      	bmi.n	80017b8 <_fflush_r+0xc>
 80017f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017f6:	f7ff fc39 	bl	800106c <__retarget_lock_release_recursive>
 80017fa:	e7dd      	b.n	80017b8 <_fflush_r+0xc>

080017fc <__swhatbuf_r>:
 80017fc:	b570      	push	{r4, r5, r6, lr}
 80017fe:	460c      	mov	r4, r1
 8001800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001804:	2900      	cmp	r1, #0
 8001806:	b096      	sub	sp, #88	@ 0x58
 8001808:	4615      	mov	r5, r2
 800180a:	461e      	mov	r6, r3
 800180c:	da0d      	bge.n	800182a <__swhatbuf_r+0x2e>
 800180e:	89a3      	ldrh	r3, [r4, #12]
 8001810:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001814:	f04f 0100 	mov.w	r1, #0
 8001818:	bf14      	ite	ne
 800181a:	2340      	movne	r3, #64	@ 0x40
 800181c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001820:	2000      	movs	r0, #0
 8001822:	6031      	str	r1, [r6, #0]
 8001824:	602b      	str	r3, [r5, #0]
 8001826:	b016      	add	sp, #88	@ 0x58
 8001828:	bd70      	pop	{r4, r5, r6, pc}
 800182a:	466a      	mov	r2, sp
 800182c:	f000 f848 	bl	80018c0 <_fstat_r>
 8001830:	2800      	cmp	r0, #0
 8001832:	dbec      	blt.n	800180e <__swhatbuf_r+0x12>
 8001834:	9901      	ldr	r1, [sp, #4]
 8001836:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800183a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800183e:	4259      	negs	r1, r3
 8001840:	4159      	adcs	r1, r3
 8001842:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001846:	e7eb      	b.n	8001820 <__swhatbuf_r+0x24>

08001848 <__smakebuf_r>:
 8001848:	898b      	ldrh	r3, [r1, #12]
 800184a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800184c:	079d      	lsls	r5, r3, #30
 800184e:	4606      	mov	r6, r0
 8001850:	460c      	mov	r4, r1
 8001852:	d507      	bpl.n	8001864 <__smakebuf_r+0x1c>
 8001854:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001858:	6023      	str	r3, [r4, #0]
 800185a:	6123      	str	r3, [r4, #16]
 800185c:	2301      	movs	r3, #1
 800185e:	6163      	str	r3, [r4, #20]
 8001860:	b003      	add	sp, #12
 8001862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001864:	ab01      	add	r3, sp, #4
 8001866:	466a      	mov	r2, sp
 8001868:	f7ff ffc8 	bl	80017fc <__swhatbuf_r>
 800186c:	9f00      	ldr	r7, [sp, #0]
 800186e:	4605      	mov	r5, r0
 8001870:	4639      	mov	r1, r7
 8001872:	4630      	mov	r0, r6
 8001874:	f7ff f8da 	bl	8000a2c <_malloc_r>
 8001878:	b948      	cbnz	r0, 800188e <__smakebuf_r+0x46>
 800187a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800187e:	059a      	lsls	r2, r3, #22
 8001880:	d4ee      	bmi.n	8001860 <__smakebuf_r+0x18>
 8001882:	f023 0303 	bic.w	r3, r3, #3
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	81a3      	strh	r3, [r4, #12]
 800188c:	e7e2      	b.n	8001854 <__smakebuf_r+0xc>
 800188e:	89a3      	ldrh	r3, [r4, #12]
 8001890:	6020      	str	r0, [r4, #0]
 8001892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001896:	81a3      	strh	r3, [r4, #12]
 8001898:	9b01      	ldr	r3, [sp, #4]
 800189a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800189e:	b15b      	cbz	r3, 80018b8 <__smakebuf_r+0x70>
 80018a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018a4:	4630      	mov	r0, r6
 80018a6:	f000 f81d 	bl	80018e4 <_isatty_r>
 80018aa:	b128      	cbz	r0, 80018b8 <__smakebuf_r+0x70>
 80018ac:	89a3      	ldrh	r3, [r4, #12]
 80018ae:	f023 0303 	bic.w	r3, r3, #3
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	81a3      	strh	r3, [r4, #12]
 80018b8:	89a3      	ldrh	r3, [r4, #12]
 80018ba:	431d      	orrs	r5, r3
 80018bc:	81a5      	strh	r5, [r4, #12]
 80018be:	e7cf      	b.n	8001860 <__smakebuf_r+0x18>

080018c0 <_fstat_r>:
 80018c0:	b538      	push	{r3, r4, r5, lr}
 80018c2:	4d07      	ldr	r5, [pc, #28]	@ (80018e0 <_fstat_r+0x20>)
 80018c4:	2300      	movs	r3, #0
 80018c6:	4604      	mov	r4, r0
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	602b      	str	r3, [r5, #0]
 80018ce:	f7fe ff20 	bl	8000712 <_fstat>
 80018d2:	1c43      	adds	r3, r0, #1
 80018d4:	d102      	bne.n	80018dc <_fstat_r+0x1c>
 80018d6:	682b      	ldr	r3, [r5, #0]
 80018d8:	b103      	cbz	r3, 80018dc <_fstat_r+0x1c>
 80018da:	6023      	str	r3, [r4, #0]
 80018dc:	bd38      	pop	{r3, r4, r5, pc}
 80018de:	bf00      	nop
 80018e0:	200009d4 	.word	0x200009d4

080018e4 <_isatty_r>:
 80018e4:	b538      	push	{r3, r4, r5, lr}
 80018e6:	4d06      	ldr	r5, [pc, #24]	@ (8001900 <_isatty_r+0x1c>)
 80018e8:	2300      	movs	r3, #0
 80018ea:	4604      	mov	r4, r0
 80018ec:	4608      	mov	r0, r1
 80018ee:	602b      	str	r3, [r5, #0]
 80018f0:	f7fe ff1f 	bl	8000732 <_isatty>
 80018f4:	1c43      	adds	r3, r0, #1
 80018f6:	d102      	bne.n	80018fe <_isatty_r+0x1a>
 80018f8:	682b      	ldr	r3, [r5, #0]
 80018fa:	b103      	cbz	r3, 80018fe <_isatty_r+0x1a>
 80018fc:	6023      	str	r3, [r4, #0]
 80018fe:	bd38      	pop	{r3, r4, r5, pc}
 8001900:	200009d4 	.word	0x200009d4

08001904 <_init>:
 8001904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001906:	bf00      	nop
 8001908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190a:	bc08      	pop	{r3}
 800190c:	469e      	mov	lr, r3
 800190e:	4770      	bx	lr

08001910 <_fini>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	bf00      	nop
 8001914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001916:	bc08      	pop	{r3}
 8001918:	469e      	mov	lr, r3
 800191a:	4770      	bx	lr
